{"version":3,"file":"live2dWidget.iife.js","sources":["../src/lappdefine.ts","../framework/type/csmvector.ts","../framework/type/csmstring.ts","../framework/id/cubismid.ts","../framework/id/cubismidmanager.ts","../framework/math/cubismmatrix44.ts","../framework/rendering/cubismrenderer.ts","../framework/utils/cubismdebug.ts","../framework/type/csmmap.ts","../framework/utils/cubismjsonextension.ts","../framework/utils/cubismjson.ts","../framework/live2dcubismframework.ts","../framework/cubismdefaultparameterid.ts","../framework/icubismmodelsetting.ts","../framework/cubismmodelsettingjson.ts","../framework/effect/cubismbreath.ts","../framework/effect/cubismeyeblink.ts","../framework/effect/cubismpose.ts","../framework/math/cubismmodelmatrix.ts","../framework/math/cubismvector2.ts","../framework/math/cubismmath.ts","../framework/math/cubismtargetpoint.ts","../framework/motion/acubismmotion.ts","../framework/motion/cubismexpressionmotion.ts","../framework/motion/cubismmotioninternal.ts","../framework/motion/cubismmotionjson.ts","../framework/motion/cubismmotion.ts","../framework/motion/cubismmotionqueueentry.ts","../framework/motion/cubismmotionqueuemanager.ts","../framework/motion/cubismmotionmanager.ts","../framework/physics/cubismphysicsinternal.ts","../framework/physics/cubismphysicsjson.ts","../framework/physics/cubismphysics.ts","../framework/type/csmrectf.ts","../framework/rendering/cubismrenderer_webgl.ts","../framework/model/cubismmodel.ts","../framework/model/cubismmoc.ts","../framework/model/cubismmodeluserdatajson.ts","../framework/model/cubismmodeluserdata.ts","../framework/model/cubismusermodel.ts","../src/lapppal.ts","../src/lappwavfilehandler.ts","../src/lappmodel.ts","../src/lapplive2dmanager.ts","../src/lapptexturemanager.ts","../framework/math/cubismviewmatrix.ts","../src/lappsprite.ts","../src/touchmanager.ts","../src/lappview.ts","../src/lappdelegate.ts","../src/main.ts","../src/main.iife.ts"],"sourcesContent":["/**\r\n * 示例应用中使用的常量\r\n */\r\n\r\ninterface CanvasOptions {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\ninterface SourceOptions {\r\n  path: string;\r\n  models: string[];\r\n}\r\n\r\nexport interface LAppDefineOptions {\r\n  canvas?: CanvasOptions | 'auto';\r\n  scale?: number;\r\n  debug?: boolean;\r\n  target?: HTMLElement;\r\n  cubismCorePath?: string;\r\n  source: SourceOptions;\r\n}\r\n\r\n// 画面\r\nexport enum ViewScale {\r\n  Max = 2.0,\r\n  Min = 0.8\r\n}\r\n\r\nexport enum ViewLogical {\r\n  Left = -1.0,\r\n  Right = 1.0,\r\n  Bottom = -1.0,\r\n  Top = 1.0\r\n}\r\n\r\nexport enum ViewLogicalMax {\r\n  Left = -2.0,\r\n  Right = 2.0,\r\n  Bottom = -2.0,\r\n  Top = 2.0\r\n}\r\n\r\n// 与外部定义文件 （JSON） 对齐\r\nexport enum MotionGroup {\r\n  Idle = 'Idle', // 空闲\r\n  TapBody = 'TapBody', // 当轻拍身体时\r\n  TapLeft = 'TapLeft', // 当轻拍身体左侧时（左胳膊）\r\n  TapRight = 'TapRight', // 当轻拍身体右侧时（右胳膊）\r\n  Tap = 'Tap' // 当点击重叠检测区域之外时\r\n}\r\n\r\n// 与外部定义文件 （JSON） 对齐\r\nexport enum HitArea {\r\n  Head = 'Head',\r\n  Body = 'Body',\r\n  Left = 'Left',\r\n  Right = 'Right',\r\n  Other = 'Other'\r\n}\r\n\r\n// 运动优先级常数\r\nexport enum Priority {\r\n  None = 0,\r\n  Idle,\r\n  Normal,\r\n  Force\r\n}\r\n\r\nexport const doc = globalThis.document || {} as Document\r\n\r\nconst LAppDefine: LAppDefineOptions = {\r\n  canvas: {\r\n    width: 280,\r\n    height: 360,\r\n  },\r\n  scale: 1.0,\r\n  debug: false,\r\n  target: doc.body,\r\n  source: {\r\n    path: '',\r\n    models: [],\r\n  },\r\n  cubismCorePath: '/live2d/core/live2dCubismCore.min.js',\r\n}\r\n\r\nexport const setDefaults = (options: LAppDefineOptions) => {\r\n  LAppDefine.target = doc.body\r\n  Object.keys(options).forEach(key => {\r\n    if (LAppDefine.hasOwnProperty(key)) {\r\n      LAppDefine[key] = options[key]\r\n    }\r\n  })\r\n}\r\n\r\nexport default LAppDefine\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\n/**\r\n * ベクター型（可変配列型）\r\n */\r\nexport class csmVector<T> {\r\n  /**\r\n   * 引数付きコンストラクタ\r\n   * @param iniitalCapacity 初期化後のキャパシティ。データサイズは_capacity * sizeof(T)\r\n   * @param zeroClear trueなら初期化時に確保した領域を0で埋める\r\n   */\r\n  constructor(initialCapacity = 0) {\r\n    if (initialCapacity < 1) {\r\n      this._ptr = [];\r\n      this._capacity = 0;\r\n      this._size = 0;\r\n    } else {\r\n      this._ptr = new Array(initialCapacity);\r\n      this._capacity = initialCapacity;\r\n      this._size = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * インデックスで指定した要素を返す\r\n   */\r\n  public at(index: number): T {\r\n    return this._ptr[index];\r\n  }\r\n\r\n  /**\r\n   * 要素をセット\r\n   * @param index 要素をセットするインデックス\r\n   * @param value セットする要素\r\n   */\r\n  public set(index: number, value: T): void {\r\n    this._ptr[index] = value;\r\n  }\r\n\r\n  /**\r\n   * コンテナを取得する\r\n   */\r\n  public get(offset = 0): T[] {\r\n    const ret: T[] = new Array<T>();\r\n    for (let i = offset; i < this._size; i++) {\r\n      ret.push(this._ptr[i]);\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * pushBack処理、コンテナに新たな要素を追加する\r\n   * @param value PushBack処理で追加する値\r\n   */\r\n  public pushBack(value: T): void {\r\n    if (this._size >= this._capacity) {\r\n      this.prepareCapacity(\r\n        this._capacity == 0 ? csmVector.s_defaultSize : this._capacity * 2\r\n      );\r\n    }\r\n\r\n    this._ptr[this._size++] = value;\r\n  }\r\n\r\n  /**\r\n   * コンテナの全要素を解放する\r\n   */\r\n  public clear(): void {\r\n    this._ptr.length = 0;\r\n    this._size = 0;\r\n  }\r\n\r\n  /**\r\n   * コンテナの要素数を返す\r\n   * @return コンテナの要素数\r\n   */\r\n  public getSize(): number {\r\n    return this._size;\r\n  }\r\n\r\n  /**\r\n   * コンテナの全要素に対して代入処理を行う\r\n   * @param newSize 代入処理後のサイズ\r\n   * @param value 要素に代入する値\r\n   */\r\n  public assign(newSize: number, value: T): void {\r\n    const curSize = this._size;\r\n\r\n    if (curSize < newSize) {\r\n      this.prepareCapacity(newSize); // capacity更新\r\n    }\r\n\r\n    for (let i = 0; i < newSize; i++) {\r\n      this._ptr[i] = value;\r\n    }\r\n\r\n    this._size = newSize;\r\n  }\r\n\r\n  /**\r\n   * サイズ変更\r\n   */\r\n  public resize(newSize: number, value: T = null): void {\r\n    this.updateSize(newSize, value, true);\r\n  }\r\n\r\n  /**\r\n   * サイズ変更\r\n   */\r\n  public updateSize(\r\n    newSize: number,\r\n    value: any = null,\r\n    callPlacementNew = true\r\n  ): void {\r\n    const curSize: number = this._size;\r\n\r\n    if (curSize < newSize) {\r\n      this.prepareCapacity(newSize); // capacity更新\r\n\r\n      if (callPlacementNew) {\r\n        for (let i: number = this._size; i < newSize; i++) {\r\n          if (typeof value == 'function') {\r\n            // new\r\n            this._ptr[i] = JSON.parse(JSON.stringify(new value()));\r\n          } // プリミティブ型なので値渡し\r\n          else {\r\n            this._ptr[i] = value;\r\n          }\r\n        }\r\n      } else {\r\n        for (let i: number = this._size; i < newSize; i++) {\r\n          this._ptr[i] = value;\r\n        }\r\n      }\r\n    } else {\r\n      // newSize <= this._size\r\n      //---\r\n      const sub = this._size - newSize;\r\n      this._ptr.splice(this._size - sub, sub); // 不要なので破棄する\r\n    }\r\n    this._size = newSize;\r\n  }\r\n\r\n  /**\r\n   * コンテナにコンテナ要素を挿入する\r\n   * @param position 挿入する位置\r\n   * @param begin 挿入するコンテナの開始位置\r\n   * @param end 挿入するコンテナの終端位置\r\n   */\r\n  public insert(\r\n    position: iterator<T>,\r\n    begin: iterator<T>,\r\n    end: iterator<T>\r\n  ): void {\r\n    let dstSi: number = position._index;\r\n    const srcSi: number = begin._index;\r\n    const srcEi: number = end._index;\r\n\r\n    const addCount: number = srcEi - srcSi;\r\n\r\n    this.prepareCapacity(this._size + addCount);\r\n\r\n    // 挿入用の既存データをシフトして隙間を作る\r\n    const addSize = this._size - dstSi;\r\n    if (addSize > 0) {\r\n      for (let i = 0; i < addSize; i++) {\r\n        this._ptr.splice(dstSi + i, 0, null);\r\n      }\r\n    }\r\n\r\n    for (let i: number = srcSi; i < srcEi; i++, dstSi++) {\r\n      this._ptr[dstSi] = begin._vector._ptr[i];\r\n    }\r\n\r\n    this._size = this._size + addCount;\r\n  }\r\n\r\n  /**\r\n   * コンテナからインデックスで指定した要素を削除する\r\n   * @param index インデックス値\r\n   * @return true 削除実行\r\n   * @return false 削除範囲外\r\n   */\r\n  public remove(index: number): boolean {\r\n    if (index < 0 || this._size <= index) {\r\n      return false; // 削除範囲外\r\n    }\r\n\r\n    this._ptr.splice(index, 1);\r\n    --this._size;\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * コンテナから要素を削除して他の要素をシフトする\r\n   * @param ite 削除する要素\r\n   */\r\n  public erase(ite: iterator<T>): iterator<T> {\r\n    const index: number = ite._index;\r\n    if (index < 0 || this._size <= index) {\r\n      return ite; // 削除範囲外\r\n    }\r\n\r\n    // 削除\r\n    this._ptr.splice(index, 1);\r\n    --this._size;\r\n\r\n    const ite2: iterator<T> = new iterator<T>(this, index); // 終了\r\n    return ite2;\r\n  }\r\n\r\n  /**\r\n   * コンテナのキャパシティを確保する\r\n   * @param newSize 新たなキャパシティ。引数の値が現在のサイズ未満の場合は何もしない.\r\n   */\r\n  public prepareCapacity(newSize: number): void {\r\n    if (newSize > this._capacity) {\r\n      if (this._capacity == 0) {\r\n        this._ptr = new Array(newSize);\r\n        this._capacity = newSize;\r\n      } else {\r\n        this._ptr.length = newSize;\r\n        this._capacity = newSize;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * コンテナの先頭要素を返す\r\n   */\r\n  public begin(): iterator<T> {\r\n    const ite: iterator<T> =\r\n      this._size == 0 ? this.end() : new iterator<T>(this, 0);\r\n    return ite;\r\n  }\r\n\r\n  /**\r\n   * コンテナの終端要素を返す\r\n   */\r\n  public end(): iterator<T> {\r\n    const ite: iterator<T> = new iterator<T>(this, this._size);\r\n    return ite;\r\n  }\r\n\r\n  public getOffset(offset: number): csmVector<T> {\r\n    const newVector = new csmVector<T>();\r\n    newVector._ptr = this.get(offset);\r\n    newVector._size = this.get(offset).length;\r\n    newVector._capacity = this.get(offset).length;\r\n\r\n    return newVector;\r\n  }\r\n\r\n  _ptr: T[]; // コンテナの先頭アドレス\r\n  _size: number; // コンテナの要素数\r\n  _capacity: number; // コンテナのキャパシティ\r\n\r\n  static readonly s_defaultSize = 10; // コンテナ初期化のデフォルトサイズ\r\n}\r\n\r\nexport class iterator<T> {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor(v?: csmVector<T>, index?: number) {\r\n    this._vector = v != undefined ? v : null;\r\n    this._index = index != undefined ? index : 0;\r\n  }\r\n\r\n  /**\r\n   * 代入\r\n   */\r\n  public set(ite: iterator<T>): iterator<T> {\r\n    this._index = ite._index;\r\n    this._vector = ite._vector;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 前置き++演算\r\n   */\r\n  public preIncrement(): iterator<T> {\r\n    ++this._index;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 前置き--演算\r\n   */\r\n  public preDecrement(): iterator<T> {\r\n    --this._index;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 後置き++演算子\r\n   */\r\n  public increment(): iterator<T> {\r\n    const iteold = new iterator<T>(this._vector, this._index++); // 古い値を保存\r\n    return iteold;\r\n  }\r\n\r\n  /**\r\n   * 後置き--演算子\r\n   */\r\n  public decrement(): iterator<T> {\r\n    const iteold = new iterator<T>(this._vector, this._index--); // 古い値を保存\r\n    return iteold;\r\n  }\r\n\r\n  /**\r\n   * ptr\r\n   */\r\n  public ptr(): T {\r\n    return this._vector._ptr[this._index];\r\n  }\r\n\r\n  /**\r\n   * =演算子のオーバーロード\r\n   */\r\n  public substitution(ite: iterator<T>): iterator<T> {\r\n    this._index = ite._index;\r\n    this._vector = ite._vector;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * !=演算子のオーバーロード\r\n   */\r\n  public notEqual(ite: iterator<T>): boolean {\r\n    return this._index != ite._index || this._vector != ite._vector;\r\n  }\r\n\r\n  _index: number; // コンテナのインデックス値\r\n  _vector: csmVector<T>; // コンテナ\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './csmvector';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const csmVector = $.csmVector;\r\n  export type csmVector<T> = $.csmVector<T>;\r\n  export const iterator = $.iterator;\r\n  export type iterator<T> = $.iterator<T>;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\n/**\r\n * 文字列クラス。\r\n */\r\nexport class csmString {\r\n  /**\r\n   * 文字列を後方に追加する\r\n   *\r\n   * @param c 追加する文字列\r\n   * @return 更新された文字列\r\n   */\r\n  public append(c: string, length?: number): csmString {\r\n    this.s += length !== undefined ? c.substr(0, length) : c;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 文字サイズを拡張して文字を埋める\r\n   * @param length    拡張する文字数\r\n   * @param v         埋める文字\r\n   * @return 更新された文字列\r\n   */\r\n  public expansion(length: number, v: string): csmString {\r\n    for (let i = 0; i < length; i++) {\r\n      this.append(v);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 文字列の長さをバイト数で取得する\r\n   */\r\n  public getBytes(): number {\r\n    return encodeURIComponent(this.s).replace(/%../g, 'x').length;\r\n  }\r\n\r\n  /**\r\n   * 文字列の長さを返す\r\n   */\r\n  public getLength(): number {\r\n    return this.s.length;\r\n  }\r\n\r\n  /**\r\n   * 文字列比較 <\r\n   * @param s 比較する文字列\r\n   * @return true:    比較する文字列より小さい\r\n   * @return false:   比較する文字列より大きい\r\n   */\r\n  public isLess(s: csmString): boolean {\r\n    return this.s < s.s;\r\n  }\r\n\r\n  /**\r\n   * 文字列比較 >\r\n   * @param s 比較する文字列\r\n   * @return true:    比較する文字列より大きい\r\n   * @return false:   比較する文字列より小さい\r\n   */\r\n  public isGreat(s: csmString): boolean {\r\n    return this.s > s.s;\r\n  }\r\n\r\n  /**\r\n   * 文字列比較 ==\r\n   * @param s 比較する文字列\r\n   * @return true:    比較する文字列と等しい\r\n   * @return false:   比較する文字列と異なる\r\n   */\r\n  public isEqual(s: string): boolean {\r\n    return this.s == s;\r\n  }\r\n\r\n  /**\r\n   * 文字列が空かどうか\r\n   * @return true: 空の文字列\r\n   * @return false: 値が設定されている\r\n   */\r\n  public isEmpty(): boolean {\r\n    return this.s.length == 0;\r\n  }\r\n\r\n  /**\r\n   * 引数付きコンストラクタ\r\n   */\r\n  public constructor(s: string) {\r\n    this.s = s;\r\n  }\r\n\r\n  s: string;\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './csmstring';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const csmString = $.csmString;\r\n  export type csmString = $.csmString;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { csmString } from '../type/csmstring';\r\n\r\n/**\r\n * パラメータ名・パーツ名・Drawable名を保持\r\n *\r\n * パラメータ名・パーツ名・Drawable名を保持するクラス。\r\n */\r\nexport class CubismId {\r\n  /**\r\n   * ID名を取得する\r\n   */\r\n  public getString(): csmString {\r\n    return this._id;\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor(id: string | csmString) {\r\n    if (typeof id === 'string') {\r\n      this._id = new csmString(id);\r\n      return;\r\n    }\r\n\r\n    this._id = id;\r\n  }\r\n\r\n  /**\r\n   * idを比較\r\n   * @param c 比較するid\r\n   * @return 同じならばtrue,異なっていればfalseを返す\r\n   */\r\n  public isEqual(c: string | csmString | CubismId): boolean {\r\n    if (typeof c === 'string') {\r\n      return this._id.isEqual(c);\r\n    } else if (c instanceof csmString) {\r\n      return this._id.isEqual(c.s);\r\n    } else if (c instanceof CubismId) {\r\n      return this._id.isEqual(c._id.s);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * idを比較\r\n   * @param c 比較するid\r\n   * @return 同じならばtrue,異なっていればfalseを返す\r\n   */\r\n  public isNotEqual(c: string | csmString | CubismId): boolean {\r\n    if (typeof c == 'string') {\r\n      return !this._id.isEqual(c);\r\n    } else if (c instanceof csmString) {\r\n      return !this._id.isEqual(c.s);\r\n    } else if (c instanceof CubismId) {\r\n      return !this._id.isEqual(c._id.s);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private _id: csmString; // ID名\r\n}\r\n\r\nexport declare type CubismIdHandle = CubismId;\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismid';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismId = $.CubismId;\r\n  export type CubismId = $.CubismId;\r\n  export type CubismIdHandle = $.CubismIdHandle;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { csmString } from '../type/csmstring';\r\nimport { csmVector } from '../type/csmvector';\r\nimport { CubismId } from './cubismid';\r\n\r\n/**\r\n * ID名の管理\r\n *\r\n * ID名を管理する。\r\n */\r\nexport class CubismIdManager {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    this._ids = new csmVector<CubismId>();\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    for (let i = 0; i < this._ids.getSize(); ++i) {\r\n      this._ids.set(i, void 0);\r\n    }\r\n    this._ids = null;\r\n  }\r\n\r\n  /**\r\n   * ID名をリストから登録\r\n   *\r\n   * @param ids ID名リスト\r\n   * @param count IDの個数\r\n   */\r\n  public registerIds(ids: string[] | csmString[]): void {\r\n    for (let i = 0; i < ids.length; i++) {\r\n      this.registerId(ids[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ID名を登録\r\n   *\r\n   * @param id ID名\r\n   */\r\n  public registerId(id: string | csmString): CubismId {\r\n    let result: CubismId = null;\r\n\r\n    if ('string' == typeof id) {\r\n      if ((result = this.findId(id)) != null) {\r\n        return result;\r\n      }\r\n\r\n      result = new CubismId(id);\r\n      this._ids.pushBack(result);\r\n    } else {\r\n      return this.registerId(id.s);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * ID名からIDを取得する\r\n   *\r\n   * @param id ID名\r\n   */\r\n  public getId(id: csmString | string): CubismId {\r\n    return this.registerId(id);\r\n  }\r\n\r\n  /**\r\n   * ID名からIDの確認\r\n   *\r\n   * @return true 存在する\r\n   * @return false 存在しない\r\n   */\r\n  public isExist(id: csmString | string): boolean {\r\n    if ('string' == typeof id) {\r\n      return this.findId(id) != null;\r\n    }\r\n    return this.isExist(id.s);\r\n  }\r\n\r\n  /**\r\n   * ID名からIDを検索する。\r\n   *\r\n   * @param id ID名\r\n   * @return 登録されているID。なければNULL。\r\n   */\r\n  private findId(id: string): CubismId {\r\n    for (let i = 0; i < this._ids.getSize(); ++i) {\r\n      if (this._ids.at(i).getString().isEqual(id)) {\r\n        return this._ids.at(i);\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  private _ids: csmVector<CubismId>; // 登録されているIDのリスト\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismidmanager';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismIdManager = $.CubismIdManager;\r\n  export type CubismIdManager = $.CubismIdManager;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\n/**\r\n * 4x4の行列\r\n *\r\n * 4x4行列の便利クラス。\r\n */\r\nexport class CubismMatrix44 {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    this._tr = new Float32Array(16); // 4 * 4のサイズ\r\n    this.loadIdentity();\r\n  }\r\n\r\n  /**\r\n   * 受け取った２つの行列の乗算を行う。\r\n   *\r\n   * @param a 行列a\r\n   * @param b 行列b\r\n   * @return 乗算結果の行列\r\n   */\r\n  public static multiply(\r\n    a: Float32Array,\r\n    b: Float32Array,\r\n    dst: Float32Array\r\n  ): void {\r\n    const c: Float32Array = new Float32Array([\r\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\r\n      0.0,\r\n    ]);\r\n\r\n    const n = 4;\r\n\r\n    for (let i = 0; i < n; ++i) {\r\n      for (let j = 0; j < n; ++j) {\r\n        for (let k = 0; k < n; ++k) {\r\n          c[j + i * 4] += a[k + i * 4] * b[j + k * 4];\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < 16; ++i) {\r\n      dst[i] = c[i];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 単位行列に初期化する\r\n   */\r\n  public loadIdentity(): void {\r\n    const c: Float32Array = new Float32Array([\r\n      1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,\r\n      1.0,\r\n    ]);\r\n\r\n    this.setMatrix(c);\r\n  }\r\n\r\n  /**\r\n   * 行列を設定\r\n   *\r\n   * @param tr 16個の浮動小数点数で表される4x4の行列\r\n   */\r\n  public setMatrix(tr: Float32Array): void {\r\n    for (let i = 0; i < 16; ++i) {\r\n      this._tr[i] = tr[i];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 行列を浮動小数点数の配列で取得\r\n   *\r\n   * @return 16個の浮動小数点数で表される4x4の行列\r\n   */\r\n  public getArray(): Float32Array {\r\n    return this._tr;\r\n  }\r\n\r\n  /**\r\n   * X軸の拡大率を取得\r\n   * @return X軸の拡大率\r\n   */\r\n  public getScaleX(): number {\r\n    return this._tr[0];\r\n  }\r\n\r\n  /**\r\n   * Y軸の拡大率を取得する\r\n   *\r\n   * @return Y軸の拡大率\r\n   */\r\n  public getScaleY(): number {\r\n    return this._tr[5];\r\n  }\r\n\r\n  /**\r\n   * X軸の移動量を取得\r\n   * @return X軸の移動量\r\n   */\r\n  public getTranslateX(): number {\r\n    return this._tr[12];\r\n  }\r\n\r\n  /**\r\n   * Y軸の移動量を取得\r\n   * @return Y軸の移動量\r\n   */\r\n  public getTranslateY(): number {\r\n    return this._tr[13];\r\n  }\r\n\r\n  /**\r\n   * X軸の値を現在の行列で計算\r\n   *\r\n   * @param src X軸の値\r\n   * @return 現在の行列で計算されたX軸の値\r\n   */\r\n  public transformX(src: number): number {\r\n    return this._tr[0] * src + this._tr[12];\r\n  }\r\n\r\n  /**\r\n   * Y軸の値を現在の行列で計算\r\n   *\r\n   * @param src Y軸の値\r\n   * @return 現在の行列で計算されたY軸の値\r\n   */\r\n  public transformY(src: number): number {\r\n    return this._tr[5] * src + this._tr[13];\r\n  }\r\n\r\n  /**\r\n   * X軸の値を現在の行列で逆計算\r\n   */\r\n  public invertTransformX(src: number): number {\r\n    return (src - this._tr[12]) / this._tr[0];\r\n  }\r\n\r\n  /**\r\n   * Y軸の値を現在の行列で逆計算\r\n   */\r\n  public invertTransformY(src: number): number {\r\n    return (src - this._tr[13]) / this._tr[5];\r\n  }\r\n\r\n  /**\r\n   * 現在の行列の位置を起点にして移動\r\n   *\r\n   * 現在の行列の位置を起点にして相対的に移動する。\r\n   *\r\n   * @param x X軸の移動量\r\n   * @param y Y軸の移動量\r\n   */\r\n  public translateRelative(x: number, y: number): void {\r\n    const tr1: Float32Array = new Float32Array([\r\n      1.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      1.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      1.0,\r\n      0.0,\r\n      x,\r\n      y,\r\n      0.0,\r\n      1.0,\r\n    ]);\r\n\r\n    CubismMatrix44.multiply(tr1, this._tr, this._tr);\r\n  }\r\n\r\n  /**\r\n   * 現在の行列の位置を移動\r\n   *\r\n   * 現在の行列の位置を指定した位置へ移動する\r\n   *\r\n   * @param x X軸の移動量\r\n   * @param y y軸の移動量\r\n   */\r\n  public translate(x: number, y: number): void {\r\n    this._tr[12] = x;\r\n    this._tr[13] = y;\r\n  }\r\n\r\n  /**\r\n   * 現在の行列のX軸の位置を指定した位置へ移動する\r\n   *\r\n   * @param x X軸の移動量\r\n   */\r\n  public translateX(x: number): void {\r\n    this._tr[12] = x;\r\n  }\r\n\r\n  /**\r\n   * 現在の行列のY軸の位置を指定した位置へ移動する\r\n   *\r\n   * @param y Y軸の移動量\r\n   */\r\n  public translateY(y: number): void {\r\n    this._tr[13] = y;\r\n  }\r\n\r\n  /**\r\n   * 現在の行列の拡大率を相対的に設定する\r\n   *\r\n   * @param x X軸の拡大率\r\n   * @param y Y軸の拡大率\r\n   */\r\n  public scaleRelative(x: number, y: number): void {\r\n    const tr1: Float32Array = new Float32Array([\r\n      x,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      y,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      1.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      1.0,\r\n    ]);\r\n\r\n    CubismMatrix44.multiply(tr1, this._tr, this._tr);\r\n  }\r\n\r\n  /**\r\n   * 現在の行列の拡大率を指定した倍率に設定する\r\n   *\r\n   * @param x X軸の拡大率\r\n   * @param y Y軸の拡大率\r\n   */\r\n  public scale(x: number, y: number): void {\r\n    this._tr[0] = x;\r\n    this._tr[5] = y;\r\n  }\r\n\r\n  /**\r\n   * 現在の行列に行列を乗算\r\n   *\r\n   * @param m 行列\r\n   */\r\n  public multiplyByMatrix(m: CubismMatrix44): void {\r\n    CubismMatrix44.multiply(m.getArray(), this._tr, this._tr);\r\n  }\r\n\r\n  /**\r\n   * オブジェクトのコピーを生成する\r\n   */\r\n  public clone(): CubismMatrix44 {\r\n    const cloneMatrix: CubismMatrix44 = new CubismMatrix44();\r\n\r\n    for (let i = 0; i < this._tr.length; i++) {\r\n      cloneMatrix._tr[i] = this._tr[i];\r\n    }\r\n\r\n    return cloneMatrix;\r\n  }\r\n\r\n  protected _tr: Float32Array; // 4x4行列データ\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismmatrix44';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismMatrix44 = $.CubismMatrix44;\r\n  export type CubismMatrix44 = $.CubismMatrix44;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismMatrix44 } from '../math/cubismmatrix44';\r\nimport { CubismModel } from '../model/cubismmodel';\r\n\r\n/**\r\n * モデル描画を処理するレンダラ\r\n *\r\n * サブクラスに環境依存の描画命令を記述する。\r\n */\r\nexport abstract class CubismRenderer {\r\n  /**\r\n   * レンダラのインスタンスを生成して取得する\r\n   *\r\n   * @return レンダラのインスタンス\r\n   */\r\n  public static create(): CubismRenderer {\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * レンダラのインスタンスを解放する\r\n   */\r\n  public static delete(renderer: CubismRenderer): void {\r\n    renderer = null;\r\n  }\r\n\r\n  /**\r\n   * レンダラの初期化処理を実行する\r\n   * 引数に渡したモデルからレンダラの初期化処理に必要な情報を取り出すことができる\r\n   * @param model モデルのインスタンス\r\n   */\r\n  public initialize(model: CubismModel): void {\r\n    this._model = model;\r\n  }\r\n\r\n  /**\r\n   * モデルを描画する\r\n   */\r\n  public drawModel(): void {\r\n    if (this.getModel() == null) return;\r\n\r\n    this.saveProfile();\r\n\r\n    this.doDrawModel();\r\n\r\n    this.restoreProfile();\r\n  }\r\n\r\n  /**\r\n   * Model-View-Projection 行列をセットする\r\n   * 配列は複製されるので、元の配列は外で破棄して良い\r\n   * @param matrix44 Model-View-Projection 行列\r\n   */\r\n  public setMvpMatrix(matrix44: CubismMatrix44): void {\r\n    this._mvpMatrix4x4.setMatrix(matrix44.getArray());\r\n  }\r\n\r\n  /**\r\n   * Model-View-Projection 行列を取得する\r\n   * @return Model-View-Projection 行列\r\n   */\r\n  public getMvpMatrix(): CubismMatrix44 {\r\n    return this._mvpMatrix4x4;\r\n  }\r\n\r\n  /**\r\n   * モデルの色をセットする\r\n   * 各色0.0~1.0の間で指定する（1.0が標準の状態）\r\n   * @param red 赤チャンネルの値\r\n   * @param green 緑チャンネルの値\r\n   * @param blue 青チャンネルの値\r\n   * @param alpha αチャンネルの値\r\n   */\r\n  public setModelColor(\r\n    red: number,\r\n    green: number,\r\n    blue: number,\r\n    alpha: number\r\n  ): void {\r\n    if (red < 0.0) {\r\n      red = 0.0;\r\n    } else if (red > 1.0) {\r\n      red = 1.0;\r\n    }\r\n\r\n    if (green < 0.0) {\r\n      green = 0.0;\r\n    } else if (green > 1.0) {\r\n      green = 1.0;\r\n    }\r\n\r\n    if (blue < 0.0) {\r\n      blue = 0.0;\r\n    } else if (blue > 1.0) {\r\n      blue = 1.0;\r\n    }\r\n\r\n    if (alpha < 0.0) {\r\n      alpha = 0.0;\r\n    } else if (alpha > 1.0) {\r\n      alpha = 1.0;\r\n    }\r\n\r\n    this._modelColor.R = red;\r\n    this._modelColor.G = green;\r\n    this._modelColor.B = blue;\r\n    this._modelColor.A = alpha;\r\n  }\r\n\r\n  /**\r\n   * モデルの色を取得する\r\n   * 各色0.0~1.0の間で指定する(1.0が標準の状態)\r\n   *\r\n   * @return RGBAのカラー情報\r\n   */\r\n  public getModelColor(): CubismTextureColor {\r\n    return JSON.parse(JSON.stringify(this._modelColor));\r\n  }\r\n\r\n  /**\r\n   * 乗算済みαの有効・無効をセットする\r\n   * 有効にするならtrue、無効にするならfalseをセットする\r\n   */\r\n  public setIsPremultipliedAlpha(enable: boolean): void {\r\n    this._isPremultipliedAlpha = enable;\r\n  }\r\n\r\n  /**\r\n   * 乗算済みαの有効・無効を取得する\r\n   * @return true 乗算済みのα有効\r\n   * @return false 乗算済みのα無効\r\n   */\r\n  public isPremultipliedAlpha(): boolean {\r\n    return this._isPremultipliedAlpha;\r\n  }\r\n\r\n  /**\r\n   * カリング（片面描画）の有効・無効をセットする。\r\n   * 有効にするならtrue、無効にするならfalseをセットする\r\n   */\r\n  public setIsCulling(culling: boolean): void {\r\n    this._isCulling = culling;\r\n  }\r\n\r\n  /**\r\n   * カリング（片面描画）の有効・無効を取得する。\r\n   * @return true カリング有効\r\n   * @return false カリング無効\r\n   */\r\n  public isCulling(): boolean {\r\n    return this._isCulling;\r\n  }\r\n\r\n  /**\r\n   * テクスチャの異方性フィルタリングのパラメータをセットする\r\n   * パラメータ値の影響度はレンダラの実装に依存する\r\n   * @param n パラメータの値\r\n   */\r\n  public setAnisotropy(n: number): void {\r\n    this._anisotropy = n;\r\n  }\r\n\r\n  /**\r\n   * テクスチャの異方性フィルタリングのパラメータをセットする\r\n   * @return 異方性フィルタリングのパラメータ\r\n   */\r\n  public getAnisotropy(): number {\r\n    return this._anisotropy;\r\n  }\r\n\r\n  /**\r\n   * レンダリングするモデルを取得する\r\n   * @return レンダリングするモデル\r\n   */\r\n  public getModel(): CubismModel {\r\n    return this._model;\r\n  }\r\n\r\n  /**\r\n   * マスク描画の方式を変更する。\r\n   * falseの場合、マスクを1枚のテクスチャに分割してレンダリングする（デフォルト）\r\n   * 高速だが、マスク個数の上限が36に限定され、質も荒くなる\r\n   * trueの場合、パーツ描画の前にその都度必要なマスクを描き直す\r\n   * レンダリング品質は高いが描画処理負荷は増す\r\n   * @param high 高精細マスクに切り替えるか？\r\n   */\r\n  public useHighPrecisionMask(high: boolean): void {\r\n    this._useHighPrecisionMask = high;\r\n  }\r\n\r\n  /**\r\n   * マスクの描画方式を取得する\r\n   * @return true 高精細方式\r\n   * @return false デフォルト\r\n   */\r\n  public isUsingHighPrecisionMask(): boolean {\r\n    return this._useHighPrecisionMask;\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  protected constructor() {\r\n    this._isCulling = false;\r\n    this._isPremultipliedAlpha = false;\r\n    this._anisotropy = 0.0;\r\n    this._model = null;\r\n    this._modelColor = new CubismTextureColor();\r\n    this._useHighPrecisionMask = false;\r\n\r\n    // 単位行列に初期化\r\n    this._mvpMatrix4x4 = new CubismMatrix44();\r\n    this._mvpMatrix4x4.loadIdentity();\r\n  }\r\n\r\n  /**\r\n   * モデル描画の実装\r\n   */\r\n  public abstract doDrawModel(): void;\r\n\r\n  /**\r\n   * 描画オブジェクト（アートメッシュ）を描画する\r\n   * ポリゴンメッシュとテクスチャ番号をセットで渡す。\r\n   * @param textureNo 描画するテクスチャ番号\r\n   * @param indexCount 描画オブジェクトのインデックス値\r\n   * @param vertexCount ポリゴンメッシュの頂点数\r\n   * @param indexArray ポリゴンメッシュ頂点のインデックス配列\r\n   * @param vertexArray ポリゴンメッシュの頂点配列\r\n   * @param uvArray uv配列\r\n   * @param opacity 不透明度\r\n   * @param colorBlendMode カラーブレンディングのタイプ\r\n   * @param invertedMask マスク使用時のマスクの反転使用\r\n   */\r\n  public abstract drawMesh(\r\n    textureNo: number,\r\n    indexCount: number,\r\n    vertexCount: number,\r\n    indexArray: Uint16Array,\r\n    vertexArray: Float32Array,\r\n    uvArray: Float32Array,\r\n    multiplyColor: CubismTextureColor,\r\n    screenColor: CubismTextureColor,\r\n    opacity: number,\r\n    colorBlendMode: CubismBlendMode,\r\n    invertedMask: boolean\r\n  ): void;\r\n\r\n  /**\r\n   * モデル描画直前のレンダラのステートを保持する\r\n   */\r\n  protected abstract saveProfile(): void;\r\n\r\n  /**\r\n   * モデル描画直前のレンダラのステートを復帰する\r\n   */\r\n  protected abstract restoreProfile(): void;\r\n\r\n  /**\r\n   * レンダラが保持する静的なリソースを開放する\r\n   */\r\n  public static staticRelease: any;\r\n\r\n  protected _mvpMatrix4x4: CubismMatrix44; // Model-View-Projection 行列\r\n  protected _modelColor: CubismTextureColor; // モデル自体のカラー（RGBA）\r\n  protected _isCulling: boolean; // カリングが有効ならtrue\r\n  protected _isPremultipliedAlpha: boolean; // 乗算済みαならtrue\r\n  protected _anisotropy: any; // テクスチャの異方性フィルタリングのパラメータ\r\n  protected _model: CubismModel; // レンダリング対象のモデル\r\n  protected _useHighPrecisionMask: boolean; // falseの場合、マスクを纏めて描画する trueの場合、マスクはパーツ描画ごとに書き直す\r\n}\r\n\r\nexport enum CubismBlendMode {\r\n  CubismBlendMode_Normal = 0, // 通常\r\n  CubismBlendMode_Additive = 1, // 加算\r\n  CubismBlendMode_Multiplicative = 2, // 乗算\r\n}\r\n\r\n/**\r\n * テクスチャの色をRGBAで扱うためのクラス\r\n */\r\nexport class CubismTextureColor {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  constructor() {\r\n    this.R = 1.0;\r\n    this.G = 1.0;\r\n    this.B = 1.0;\r\n    this.A = 1.0;\r\n  }\r\n\r\n  R: number; // 赤チャンネル\r\n  G: number; // 緑チャンネル\r\n  B: number; // 青チャンネル\r\n  A: number; // αチャンネル\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismrenderer';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismBlendMode = $.CubismBlendMode;\r\n  export type CubismBlendMode = $.CubismBlendMode;\r\n  export const CubismRenderer = $.CubismRenderer;\r\n  export type CubismRenderer = $.CubismRenderer;\r\n  export const CubismTextureColor = $.CubismTextureColor;\r\n  export type CubismTextureColor = $.CubismTextureColor;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport {\r\n  CSM_LOG_LEVEL,\r\n  CSM_LOG_LEVEL_DEBUG,\r\n  CSM_LOG_LEVEL_ERROR,\r\n  CSM_LOG_LEVEL_INFO,\r\n  CSM_LOG_LEVEL_VERBOSE,\r\n  CSM_LOG_LEVEL_WARNING,\r\n} from '../cubismframeworkconfig';\r\nimport { CubismFramework, LogLevel } from '../live2dcubismframework';\r\n\r\nexport const CubismLogPrint = (level: LogLevel, fmt: string, args: any[]) => {\r\n  CubismDebug.print(level, '[CSM]' + fmt, args);\r\n};\r\n\r\nexport const CubismLogPrintIn = (level: LogLevel, fmt: string, args: any[]) => {\r\n  CubismLogPrint(level, fmt + '\\n', args);\r\n};\r\n\r\nexport const CSM_ASSERT = (expr: any) => {\r\n  console.assert(expr);\r\n};\r\n\r\nexport let CubismLogVerbose: (fmt: string, ...args: any[]) => void;\r\nexport let CubismLogDebug: (fmt: string, ...args: any[]) => void;\r\nexport let CubismLogInfo: (fmt: string, ...args: any[]) => void;\r\nexport let CubismLogWarning: (fmt: string, ...args: any[]) => void;\r\nexport let CubismLogError: (fmt: string, ...args: any[]) => void;\r\n\r\nif (CSM_LOG_LEVEL <= CSM_LOG_LEVEL_VERBOSE) {\r\n  CubismLogVerbose = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Verbose, '[V]' + fmt, args);\r\n  };\r\n\r\n  CubismLogDebug = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Debug, '[D]' + fmt, args);\r\n  };\r\n\r\n  CubismLogInfo = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Info, '[I]' + fmt, args);\r\n  };\r\n\r\n  CubismLogWarning = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Warning, '[W]' + fmt, args);\r\n  };\r\n\r\n  CubismLogError = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Error, '[E]' + fmt, args);\r\n  };\r\n} else if (CSM_LOG_LEVEL == CSM_LOG_LEVEL_DEBUG) {\r\n  CubismLogDebug = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Debug, '[D]' + fmt, args);\r\n  };\r\n\r\n  CubismLogInfo = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Info, '[I]' + fmt, args);\r\n  };\r\n\r\n  CubismLogWarning = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Warning, '[W]' + fmt, args);\r\n  };\r\n\r\n  CubismLogError = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Error, '[E]' + fmt, args);\r\n  };\r\n} else if (CSM_LOG_LEVEL == CSM_LOG_LEVEL_INFO) {\r\n  CubismLogInfo = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Info, '[I]' + fmt, args);\r\n  };\r\n\r\n  CubismLogWarning = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Warning, '[W]' + fmt, args);\r\n  };\r\n\r\n  CubismLogError = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Error, '[E]' + fmt, args);\r\n  };\r\n} else if (CSM_LOG_LEVEL == CSM_LOG_LEVEL_WARNING) {\r\n  CubismLogWarning = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Warning, '[W]' + fmt, args);\r\n  };\r\n\r\n  CubismLogError = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Error, '[E]' + fmt, args);\r\n  };\r\n} else if (CSM_LOG_LEVEL == CSM_LOG_LEVEL_ERROR) {\r\n  CubismLogError = (fmt: string, ...args: any[]) => {\r\n    CubismLogPrintIn(LogLevel.LogLevel_Error, '[E]' + fmt, args);\r\n  };\r\n}\r\n\r\n/**\r\n * デバッグ用のユーティリティクラス。\r\n * ログの出力、バイトのダンプなど\r\n */\r\nexport class CubismDebug {\r\n  /**\r\n   * ログを出力する。第一引数にログレベルを設定する。\r\n   * CubismFramework.initialize()時にオプションで設定されたログ出力レベルを下回る場合はログに出さない。\r\n   *\r\n   * @param logLevel ログレベルの設定\r\n   * @param format 書式付き文字列\r\n   * @param args 可変長引数\r\n   */\r\n  public static print(logLevel: LogLevel, format: string, args?: any[]): void {\r\n    // オプションで設定されたログ出力レベルを下回る場合はログに出さない\r\n    if (logLevel < CubismFramework.getLoggingLevel()) {\r\n      return;\r\n    }\r\n\r\n    const logPrint: Live2DCubismCore.csmLogFunction =\r\n      CubismFramework.coreLogFunction;\r\n\r\n    if (!logPrint) return;\r\n\r\n    const buffer: string = format.replace(/\\{(\\d+)\\}/g, (m, k) => {\r\n      return args[k];\r\n    });\r\n    logPrint(buffer);\r\n  }\r\n\r\n  /**\r\n   * データから指定した長さだけダンプ出力する。\r\n   * CubismFramework.initialize()時にオプションで設定されたログ出力レベルを下回る場合はログに出さない。\r\n   *\r\n   * @param logLevel ログレベルの設定\r\n   * @param data ダンプするデータ\r\n   * @param length ダンプする長さ\r\n   */\r\n  public static dumpBytes(\r\n    logLevel: LogLevel,\r\n    data: Uint8Array,\r\n    length: number\r\n  ): void {\r\n    for (let i = 0; i < length; i++) {\r\n      if (i % 16 == 0 && i > 0) this.print(logLevel, '\\n');\r\n      else if (i % 8 == 0 && i > 0) this.print(logLevel, '  ');\r\n      this.print(logLevel, '{0} ', [data[i] & 0xff]);\r\n    }\r\n\r\n    this.print(logLevel, '\\n');\r\n  }\r\n\r\n  /**\r\n   * private コンストラクタ\r\n   */\r\n  private constructor() {}\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismdebug';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismDebug = $.CubismDebug;\r\n  export type CubismDebug = $.CubismDebug;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismLogDebug } from '../utils/cubismdebug';\r\n\r\n/**\r\n * Key-Valueのペアを定義するクラス\r\n * csmMapクラスの内部データで使用する。\r\n */\r\nexport class csmPair<_KeyT, _ValT> {\r\n  /**\r\n   * コンストラクタ\r\n   * @param key Keyとしてセットする値\r\n   * @param value Valueとしてセットする値\r\n   */\r\n  public constructor(key?: _KeyT, value?: _ValT) {\r\n    this.first = key == undefined ? null : key;\r\n\r\n    this.second = value == undefined ? null : value;\r\n  }\r\n\r\n  public first: _KeyT; // keyとして用いる変数\r\n  public second: _ValT; // valueとして用いる変数\r\n}\r\n\r\n/**\r\n * マップ型\r\n */\r\nexport class csmMap<_KeyT, _ValT> {\r\n  /**\r\n   * 引数付きコンストラクタ\r\n   * @param size 初期化時点で確保するサイズ\r\n   */\r\n  public constructor(size?: number) {\r\n    if (size != undefined) {\r\n      if (size < 1) {\r\n        this._keyValues = [];\r\n        this._dummyValue = null;\r\n        this._size = 0;\r\n      } else {\r\n        this._keyValues = new Array(size);\r\n        this._size = size;\r\n      }\r\n    } else {\r\n      this._keyValues = [];\r\n      this._dummyValue = null;\r\n      this._size = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * デストラクタ\r\n   */\r\n  public release() {\r\n    this.clear();\r\n  }\r\n\r\n  /**\r\n   * キーを追加する\r\n   * @param key 新たに追加するキー\r\n   */\r\n  public appendKey(key: _KeyT): void {\r\n    // 新しくKey/Valueのペアを作る\r\n    this.prepareCapacity(this._size + 1, false); // 1つ以上入る隙間を作る\r\n    // 新しいkey/valueのインデックスは_size\r\n\r\n    this._keyValues[this._size] = new csmPair<_KeyT, _ValT>(key);\r\n    this._size += 1;\r\n  }\r\n\r\n  /**\r\n   * 添字演算子[key]のオーバーロード(get)\r\n   * @param key 添字から特定されるValue値\r\n   */\r\n  public getValue(key: _KeyT): _ValT {\r\n    let found = -1;\r\n\r\n    for (let i = 0; i < this._size; i++) {\r\n      if (this._keyValues[i].first == key) {\r\n        found = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (found >= 0) {\r\n      return this._keyValues[found].second;\r\n    } else {\r\n      this.appendKey(key); // 新規キーを追加\r\n      return this._keyValues[this._size - 1].second;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添字演算子[key]のオーバーロード(set)\r\n   * @param key 添字から特定されるValue値\r\n   * @param value 代入するValue値\r\n   */\r\n  public setValue(key: _KeyT, value: _ValT): void {\r\n    let found = -1;\r\n\r\n    for (let i = 0; i < this._size; i++) {\r\n      if (this._keyValues[i].first == key) {\r\n        found = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (found >= 0) {\r\n      this._keyValues[found].second = value;\r\n    } else {\r\n      this.appendKey(key); // 新規キーを追加\r\n      this._keyValues[this._size - 1].second = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 引数で渡したKeyを持つ要素が存在するか\r\n   * @param key 存在を確認するkey\r\n   * @return true 引数で渡したkeyを持つ要素が存在する\r\n   * @return false 引数で渡したkeyを持つ要素が存在しない\r\n   */\r\n  public isExist(key: _KeyT): boolean {\r\n    for (let i = 0; i < this._size; i++) {\r\n      if (this._keyValues[i].first == key) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * keyValueのポインタを全て解放する\r\n   */\r\n  public clear(): void {\r\n    this._keyValues = void 0;\r\n    this._keyValues = null;\r\n    this._keyValues = [];\r\n\r\n    this._size = 0;\r\n  }\r\n\r\n  /**\r\n   * コンテナのサイズを取得する\r\n   *\r\n   * @return コンテナのサイズ\r\n   */\r\n  public getSize(): number {\r\n    return this._size;\r\n  }\r\n\r\n  /**\r\n   * コンテナのキャパシティを確保する\r\n   * @param newSize 新たなキャパシティ。引数の値が現在のサイズ未満の場合は何もしない。\r\n   * @param fitToSize trueなら指定したサイズに合わせる。falseならサイズを2倍確保しておく。\r\n   */\r\n  public prepareCapacity(newSize: number, fitToSize: boolean): void {\r\n    if (newSize > this._keyValues.length) {\r\n      if (this._keyValues.length == 0) {\r\n        if (!fitToSize && newSize < csmMap.DefaultSize)\r\n          newSize = csmMap.DefaultSize;\r\n        this._keyValues.length = newSize;\r\n      } else {\r\n        if (!fitToSize && newSize < this._keyValues.length * 2)\r\n          newSize = this._keyValues.length * 2;\r\n        this._keyValues.length = newSize;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * コンテナの先頭要素を返す\r\n   */\r\n  public begin(): iterator<_KeyT, _ValT> {\r\n    const ite: iterator<_KeyT, _ValT> = new iterator<_KeyT, _ValT>(this, 0);\r\n    return ite;\r\n  }\r\n\r\n  /**\r\n   * コンテナの終端要素を返す\r\n   */\r\n  public end(): iterator<_KeyT, _ValT> {\r\n    const ite: iterator<_KeyT, _ValT> = new iterator<_KeyT, _ValT>(\r\n      this,\r\n      this._size\r\n    ); // 終了\r\n    return ite;\r\n  }\r\n\r\n  /**\r\n   * コンテナから要素を削除する\r\n   *\r\n   * @param ite 削除する要素\r\n   */\r\n  public erase(ite: iterator<_KeyT, _ValT>): iterator<_KeyT, _ValT> {\r\n    const index: number = ite._index;\r\n    if (index < 0 || this._size <= index) {\r\n      return ite; // 削除範囲外\r\n    }\r\n\r\n    // 削除\r\n    this._keyValues.splice(index, 1);\r\n    --this._size;\r\n\r\n    const ite2: iterator<_KeyT, _ValT> = new iterator<_KeyT, _ValT>(\r\n      this,\r\n      index\r\n    ); // 終了\r\n    return ite2;\r\n  }\r\n\r\n  /**\r\n   * コンテナの値を32ビット符号付き整数型でダンプする\r\n   */\r\n  public dumpAsInt() {\r\n    for (let i = 0; i < this._size; i++) {\r\n      CubismLogDebug('{0} ,', this._keyValues[i]);\r\n      CubismLogDebug('\\n');\r\n    }\r\n  }\r\n\r\n  public static readonly DefaultSize = 10; // コンテナの初期化のデフォルトサイズ\r\n  public _keyValues: csmPair<_KeyT, _ValT>[]; // key-valueペアの配列\r\n  public _dummyValue: _ValT; // 空の値を返す為のダミー\r\n  public _size: number; // コンテナの要素数\r\n}\r\n\r\n/**\r\n * csmMap<T>のイテレータ\r\n */\r\nexport class iterator<_KeyT, _ValT> {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  constructor(v?: csmMap<_KeyT, _ValT>, idx?: number) {\r\n    this._map = v != undefined ? v : new csmMap<_KeyT, _ValT>();\r\n\r\n    this._index = idx != undefined ? idx : 0;\r\n  }\r\n\r\n  /**\r\n   * =演算子のオーバーロード\r\n   */\r\n  public set(ite: iterator<_KeyT, _ValT>): iterator<_KeyT, _ValT> {\r\n    this._index = ite._index;\r\n    this._map = ite._map;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 前置き++演算子のオーバーロード\r\n   */\r\n  public preIncrement(): iterator<_KeyT, _ValT> {\r\n    ++this._index;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 前置き--演算子のオーバーロード\r\n   */\r\n  public preDecrement(): iterator<_KeyT, _ValT> {\r\n    --this._index;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 後置き++演算子のオーバーロード\r\n   */\r\n  public increment(): iterator<_KeyT, _ValT> {\r\n    const iteold = new iterator<_KeyT, _ValT>(this._map, this._index++); // 古い値を保存\r\n    return iteold;\r\n  }\r\n\r\n  /**\r\n   * 後置き--演算子のオーバーロード\r\n   */\r\n  public decrement(): iterator<_KeyT, _ValT> {\r\n    const iteold = new iterator<_KeyT, _ValT>(this._map, this._index); // 古い値を保存\r\n    this._map = iteold._map;\r\n    this._index = iteold._index;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * *演算子のオーバーロード\r\n   */\r\n  public ptr(): csmPair<_KeyT, _ValT> {\r\n    return this._map._keyValues[this._index];\r\n  }\r\n\r\n  /**\r\n   * !=演算\r\n   */\r\n  public notEqual(ite: iterator<_KeyT, _ValT>): boolean {\r\n    return this._index != ite._index || this._map != ite._map;\r\n  }\r\n\r\n  _index: number; // コンテナのインデックス値\r\n  _map: csmMap<_KeyT, _ValT>; // コンテナ\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './csmmap';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const csmMap = $.csmMap;\r\n  export type csmMap<K, V> = $.csmMap<K, V>;\r\n  export const csmPair = $.csmPair;\r\n  export type csmPair<K, V> = $.csmPair<K, V>;\r\n  export const iterator = $.iterator;\r\n  export type iterator<K, V> = $.iterator<K, V>;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport {\r\n  JsonArray,\r\n  JsonBoolean,\r\n  JsonFloat,\r\n  JsonMap,\r\n  JsonNullvalue,\r\n  JsonString,\r\n  Value,\r\n} from './cubismjson';\r\n\r\n/**\r\n * CubismJsonで実装されているJsonパーサを使用せず、\r\n * TypeScript標準のJsonパーサなどを使用し出力された結果を\r\n * Cubism SDKで定義されているJSONエレメントの要素に\r\n * 置き換える処理をするクラス。\r\n */\r\nexport class CubismJsonExtension {\r\n  static parseJsonObject(obj: Value, map: JsonMap) {\r\n    Object.keys(obj).forEach((key) => {\r\n      if (typeof obj[key] == 'boolean') {\r\n        map.put(key, new JsonBoolean(obj[key]));\r\n      } else if (typeof obj[key] == 'string') {\r\n        map.put(key, new JsonString(obj[key]));\r\n      } else if (typeof obj[key] == 'number') {\r\n        map.put(key, new JsonFloat(obj[key]));\r\n      } else if (obj[key] instanceof Array) {\r\n        map.put(key, CubismJsonExtension.parseJsonArray(obj[key]));\r\n      } else if (obj[key] instanceof Object) {\r\n        map.put(\r\n          key,\r\n          CubismJsonExtension.parseJsonObject(obj[key], new JsonMap())\r\n        );\r\n      } else if (obj[key] == null) {\r\n        map.put(key, new JsonNullvalue());\r\n      } else {\r\n        // どれにも当てはまらない場合でも処理する\r\n        map.put(key, obj[key]);\r\n      }\r\n    });\r\n    return map;\r\n  }\r\n\r\n  protected static parseJsonArray(obj: Value) {\r\n    const arr = new JsonArray();\r\n    Object.keys(obj).forEach((key) => {\r\n      const convKey = Number(key);\r\n      if (typeof convKey == 'number') {\r\n        if (typeof obj[convKey] == 'boolean') {\r\n          arr.add(new JsonBoolean(obj[convKey]));\r\n        } else if (typeof obj[convKey] == 'string') {\r\n          arr.add(new JsonString(obj[convKey]));\r\n        } else if (typeof obj[convKey] == 'number') {\r\n          arr.add(new JsonFloat(obj[convKey]));\r\n        } else if (obj[key] instanceof Array) {\r\n          arr.add(this.parseJsonArray(obj[key]));\r\n        } else if (obj[key] instanceof Object) {\r\n          arr.add(this.parseJsonObject(obj[key], new JsonMap()));\r\n        } else if (obj[key] == null) {\r\n          arr.add(new JsonNullvalue());\r\n        } else {\r\n          // どれにも当てはまらない場合でも処理する\r\n          arr.add(obj[key]);\r\n        }\r\n      } else if (obj[key] instanceof Array) {\r\n        arr.add(this.parseJsonArray(obj[key]));\r\n      } else if (obj[key] instanceof Object) {\r\n        arr.add(this.parseJsonObject(obj[key], new JsonMap()));\r\n      } else if (obj[key] == null) {\r\n        arr.add(new JsonNullvalue());\r\n      } else {\r\n        // 配列ともObjectとも判定できなかった場合でも処理する\r\n        for (let i = 0; i < obj[key].length; i++) {\r\n          arr.add(obj[key][i]);\r\n        }\r\n      }\r\n    });\r\n    return arr;\r\n  }\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { strtod } from '../live2dcubismframework';\r\nimport { csmMap, iterator as csmMap_iterator } from '../type/csmmap';\r\nimport { csmString } from '../type/csmstring';\r\nimport { csmVector, iterator as csmVector_iterator } from '../type/csmvector';\r\nimport { CubismLogInfo } from './cubismdebug';\r\n\r\n// StaticInitializeNotForClientCall()で初期化する\r\nconst CSM_JSON_ERROR_TYPE_MISMATCH = 'Error: type mismatch';\r\nconst CSM_JSON_ERROR_INDEX_OF_BOUNDS = 'Error: index out of bounds';\r\n\r\n/**\r\n * パースしたJSONエレメントの要素の基底クラス。\r\n */\r\nexport abstract class Value {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {}\r\n\r\n  /**\r\n   * 要素を文字列型で返す(csmString型)\r\n   */\r\n  public abstract getString(defaultValue?: string, indent?: string): string;\r\n\r\n  /**\r\n   * 要素を文字列型で返す(string)\r\n   */\r\n  public getRawString(defaultValue?: string, indent?: string): string {\r\n    return this.getString(defaultValue, indent);\r\n  }\r\n\r\n  /**\r\n   * 要素を数値型で返す(number)\r\n   */\r\n  public toInt(defaultValue = 0): number {\r\n    return defaultValue;\r\n  }\r\n\r\n  /**\r\n   * 要素を数値型で返す(number)\r\n   */\r\n  public toFloat(defaultValue = 0): number {\r\n    return defaultValue;\r\n  }\r\n\r\n  /**\r\n   * 要素を真偽値で返す(boolean)\r\n   */\r\n  public toBoolean(defaultValue = false): boolean {\r\n    return defaultValue;\r\n  }\r\n\r\n  /**\r\n   * サイズを返す\r\n   */\r\n  public getSize(): number {\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * 要素を配列で返す(Value[])\r\n   */\r\n  public getArray(defaultValue: Value[] = null): Value[] {\r\n    return defaultValue;\r\n  }\r\n\r\n  /**\r\n   * 要素をコンテナで返す(array)\r\n   */\r\n  public getVector(defaultValue = new csmVector<Value>()): csmVector<Value> {\r\n    return defaultValue;\r\n  }\r\n\r\n  /**\r\n   * 要素をマップで返す(csmMap<csmString, Value>)\r\n   */\r\n  public getMap(defaultValue?: csmMap<string, Value>): csmMap<string, Value> {\r\n    return defaultValue;\r\n  }\r\n\r\n  /**\r\n   * 添字演算子[index]\r\n   */\r\n  public getValueByIndex(index: number): Value {\r\n    return Value.errorValue.setErrorNotForClientCall(\r\n      CSM_JSON_ERROR_TYPE_MISMATCH\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 添字演算子[string | csmString]\r\n   */\r\n  public getValueByString(s: string | csmString): Value {\r\n    return Value.nullValue.setErrorNotForClientCall(\r\n      CSM_JSON_ERROR_TYPE_MISMATCH\r\n    );\r\n  }\r\n\r\n  /**\r\n   * マップのキー一覧をコンテナで返す\r\n   *\r\n   * @return マップのキーの一覧\r\n   */\r\n  public getKeys(): csmVector<string> {\r\n    return Value.s_dummyKeys;\r\n  }\r\n\r\n  /**\r\n   * Valueの種類がエラー値ならtrue\r\n   */\r\n  public isError(): boolean {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Valueの種類がnullならtrue\r\n   */\r\n  public isNull(): boolean {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Valueの種類が真偽値ならtrue\r\n   */\r\n  public isBool(): boolean {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Valueの種類が数値型ならtrue\r\n   */\r\n  public isFloat(): boolean {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Valueの種類が文字列ならtrue\r\n   */\r\n  public isString(): boolean {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Valueの種類が配列ならtrue\r\n   */\r\n  public isArray(): boolean {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Valueの種類がマップ型ならtrue\r\n   */\r\n  public isMap(): boolean {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 引数の値と等しければtrue\r\n   */\r\n  public equals(value: csmString): boolean;\r\n  public equals(value: string): boolean;\r\n  public equals(value: number): boolean;\r\n  public equals(value: boolean): boolean;\r\n  public equals(value: any): boolean {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Valueの値が静的ならtrue、静的なら解放しない\r\n   */\r\n  public isStatic(): boolean {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Valueにエラー値をセットする\r\n   */\r\n  public setErrorNotForClientCall(errorStr: string): Value {\r\n    return JsonError.errorValue;\r\n  }\r\n\r\n  /**\r\n   * 初期化用メソッド\r\n   */\r\n  public static staticInitializeNotForClientCall(): void {\r\n    JsonBoolean.trueValue = new JsonBoolean(true);\r\n    JsonBoolean.falseValue = new JsonBoolean(false);\r\n    Value.errorValue = new JsonError('ERROR', true);\r\n    Value.nullValue = new JsonNullvalue();\r\n    Value.s_dummyKeys = new csmVector<string>();\r\n  }\r\n\r\n  /**\r\n   * リリース用メソッド\r\n   */\r\n  public static staticReleaseNotForClientCall(): void {\r\n    JsonBoolean.trueValue = null;\r\n    JsonBoolean.falseValue = null;\r\n    Value.errorValue = null;\r\n    Value.nullValue = null;\r\n    Value.s_dummyKeys = null;\r\n  }\r\n\r\n  protected _stringBuffer: string; // 文字列バッファ\r\n\r\n  private static s_dummyKeys: csmVector<string>; // ダミーキー\r\n\r\n  public static errorValue: Value; // 一時的な返り値として返すエラー。 CubismFramework::Disposeするまではdeleteしない\r\n  public static nullValue: Value; // 一時的な返り値として返すNULL。   CubismFramework::Disposeするまではdeleteしない\r\n}\r\n\r\n/**\r\n * Ascii文字のみ対応した最小限の軽量JSONパーサ。\r\n * 仕様はJSONのサブセットとなる。\r\n * 設定ファイル(model3.json)などのロード用\r\n *\r\n * [未対応項目]\r\n * ・日本語などの非ASCII文字\r\n * ・eによる指数表現\r\n */\r\nexport class CubismJson {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor(buffer?: ArrayBuffer, length?: number) {\r\n    this._error = null;\r\n    this._lineCount = 0;\r\n    this._root = null;\r\n\r\n    if (buffer != undefined) {\r\n      this.parseBytes(buffer, length, this._parseCallback);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * バイトデータから直接ロードしてパースする\r\n   *\r\n   * @param buffer バッファ\r\n   * @param size バッファサイズ\r\n   * @return CubismJsonクラスのインスタンス。失敗したらNULL\r\n   */\r\n  public static create(buffer: ArrayBuffer, size: number) {\r\n    const json = new CubismJson();\r\n    const succeeded: boolean = json.parseBytes(\r\n      buffer,\r\n      size,\r\n      json._parseCallback\r\n    );\r\n\r\n    if (!succeeded) {\r\n      CubismJson.delete(json);\r\n      return null;\r\n    } else {\r\n      return json;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * パースしたJSONオブジェクトの解放処理\r\n   *\r\n   * @param instance CubismJsonクラスのインスタンス\r\n   */\r\n  public static delete(instance: CubismJson) {\r\n    instance = null;\r\n  }\r\n\r\n  /**\r\n   * パースしたJSONのルート要素を返す\r\n   */\r\n  public getRoot(): Value {\r\n    return this._root;\r\n  }\r\n\r\n  /**\r\n   *  UnicodeのバイナリをStringに変換\r\n   *\r\n   * @param buffer 変換するバイナリデータ\r\n   * @return 変換後の文字列\r\n   */\r\n  public static arrayBufferToString(buffer: ArrayBuffer): string {\r\n    const uint8Array: Uint8Array = new Uint8Array(buffer);\r\n    let str = '';\r\n\r\n    for (let i = 0, len: number = uint8Array.length; i < len; ++i) {\r\n      str += '%' + this.pad(uint8Array[i].toString(16));\r\n    }\r\n\r\n    str = decodeURIComponent(str);\r\n    return str;\r\n  }\r\n\r\n  /**\r\n   * エンコード、パディング\r\n   */\r\n  private static pad(n: string): string {\r\n    return n.length < 2 ? '0' + n : n;\r\n  }\r\n\r\n  /**\r\n   * JSONのパースを実行する\r\n   * @param buffer    パース対象のデータバイト\r\n   * @param size      データバイトのサイズ\r\n   * return true : 成功\r\n   * return false: 失敗\r\n   */\r\n  public parseBytes(\r\n    buffer: ArrayBuffer,\r\n    size: number,\r\n    parseCallback?: parseJsonObject\r\n  ): boolean {\r\n    const endPos: number[] = new Array<number>(1); // 参照渡しにするため配列\r\n    const decodeBuffer: string = CubismJson.arrayBufferToString(buffer);\r\n\r\n    if (parseCallback == undefined) {\r\n      this._root = this.parseValue(decodeBuffer, size, 0, endPos);\r\n    } else {\r\n      // TypeScript標準のJSONパーサを使う\r\n      this._root = parseCallback(JSON.parse(decodeBuffer), new JsonMap());\r\n    }\r\n\r\n    if (this._error) {\r\n      let strbuf = '\\0';\r\n      strbuf = 'Json parse error : @line ' + (this._lineCount + 1) + '\\n';\r\n      this._root = new JsonString(strbuf);\r\n\r\n      CubismLogInfo('{0}', this._root.getRawString());\r\n      return false;\r\n    } else if (this._root == null) {\r\n      this._root = new JsonError(new csmString(this._error), false); // rootは解放されるのでエラーオブジェクトを別途作成する\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * パース時のエラー値を返す\r\n   */\r\n  public getParseError(): string {\r\n    return this._error;\r\n  }\r\n\r\n  /**\r\n   * ルート要素の次の要素がファイルの終端だったらtrueを返す\r\n   */\r\n  public checkEndOfFile(): boolean {\r\n    return this._root.getArray()[1].equals('EOF');\r\n  }\r\n\r\n  /**\r\n   * JSONエレメントからValue(float,String,Value*,Array,null,true,false)をパースする\r\n   * エレメントの書式に応じて内部でParseString(), ParseObject(), ParseArray()を呼ぶ\r\n   *\r\n   * @param   buffer      JSONエレメントのバッファ\r\n   * @param   length      パースする長さ\r\n   * @param   begin       パースを開始する位置\r\n   * @param   outEndPos   パース終了時の位置\r\n   * @return      パースから取得したValueオブジェクト\r\n   */\r\n  protected parseValue(\r\n    buffer: string,\r\n    length: number,\r\n    begin: number,\r\n    outEndPos: number[]\r\n  ) {\r\n    if (this._error) return null;\r\n\r\n    let o: Value = null;\r\n    let i: number = begin;\r\n    let f: number;\r\n\r\n    for (; i < length; i++) {\r\n      const c: string = buffer[i];\r\n      switch (c) {\r\n        case '-':\r\n        case '.':\r\n        case '0':\r\n        case '1':\r\n        case '2':\r\n        case '3':\r\n        case '4':\r\n        case '5':\r\n        case '6':\r\n        case '7':\r\n        case '8':\r\n        case '9': {\r\n          const afterString: string[] = new Array(1); // 参照渡しにするため\r\n          f = strtod(buffer.slice(i), afterString);\r\n          outEndPos[0] = buffer.indexOf(afterString[0]);\r\n          return new JsonFloat(f);\r\n        }\r\n        case '\"':\r\n          return new JsonString(\r\n            this.parseString(buffer, length, i + 1, outEndPos)\r\n          ); // \\\"の次の文字から\r\n        case '[':\r\n          o = this.parseArray(buffer, length, i + 1, outEndPos);\r\n          return o;\r\n        case '{':\r\n          o = this.parseObject(buffer, length, i + 1, outEndPos);\r\n          return o;\r\n        case 'n': // null以外にない\r\n          if (i + 3 < length) {\r\n            o = new JsonNullvalue(); // 解放できるようにする\r\n            outEndPos[0] = i + 4;\r\n          } else {\r\n            this._error = 'parse null';\r\n          }\r\n          return o;\r\n        case 't': // true以外にない\r\n          if (i + 3 < length) {\r\n            o = JsonBoolean.trueValue;\r\n            outEndPos[0] = i + 4;\r\n          } else {\r\n            this._error = 'parse true';\r\n          }\r\n          return o;\r\n        case 'f': // false以外にない\r\n          if (i + 4 < length) {\r\n            o = JsonBoolean.falseValue;\r\n            outEndPos[0] = i + 5;\r\n          } else {\r\n            this._error = \"illegal ',' position\";\r\n          }\r\n          return o;\r\n        case ',': // Array separator\r\n          this._error = \"illegal ',' position\";\r\n          return null;\r\n        case ']': // 不正な｝だがスキップする。配列の最後に不要な , があると思われる\r\n          outEndPos[0] = i; // 同じ文字を再処理\r\n          return null;\r\n        case '\\n':\r\n          this._lineCount++;\r\n        case ' ':\r\n        case '\\t':\r\n        case '\\r':\r\n        default:\r\n          // スキップ\r\n          break;\r\n      }\r\n    }\r\n\r\n    this._error = 'illegal end of value';\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 次の「\"」までの文字列をパースする。\r\n   *\r\n   * @param   string  ->  パース対象の文字列\r\n   * @param   length  ->  パースする長さ\r\n   * @param   begin   ->  パースを開始する位置\r\n   * @param  outEndPos   ->  パース終了時の位置\r\n   * @return      パースした文F字列要素\r\n   */\r\n  protected parseString(\r\n    string: string,\r\n    length: number,\r\n    begin: number,\r\n    outEndPos: number[]\r\n  ): string {\r\n    if (this._error) return null;\r\n\r\n    let i = begin;\r\n    let c: string, c2: string;\r\n    const ret: csmString = new csmString('');\r\n    let bufStart: number = begin; // sbufに登録されていない文字の開始位置\r\n\r\n    for (; i < length; i++) {\r\n      c = string[i];\r\n\r\n      switch (c) {\r\n        case '\"': {\r\n          // 終端の”、エスケープ文字は別に処理されるのでここに来ない\r\n          outEndPos[0] = i + 1; // ”の次の文字\r\n          ret.append(string.slice(bufStart), i - bufStart); // 前の文字までを登録する\r\n          return ret.s;\r\n        }\r\n        case '//': {\r\n          // エスケープの場合\r\n          i++; // ２文字をセットで扱う\r\n\r\n          if (i - 1 > bufStart) {\r\n            ret.append(string.slice(bufStart), i - bufStart); // 前の文字までを登録する\r\n          }\r\n          bufStart = i + 1; // エスケープ（２文字)の次の文字から\r\n\r\n          if (i < length) {\r\n            c2 = string[i];\r\n\r\n            switch (c2) {\r\n              case '\\\\':\r\n                ret.expansion(1, '\\\\');\r\n                break;\r\n              case '\"':\r\n                ret.expansion(1, '\"');\r\n                break;\r\n              case '/':\r\n                ret.expansion(1, '/');\r\n                break;\r\n              case 'b':\r\n                ret.expansion(1, '\\b');\r\n                break;\r\n              case 'f':\r\n                ret.expansion(1, '\\f');\r\n                break;\r\n              case 'n':\r\n                ret.expansion(1, '\\n');\r\n                break;\r\n              case 'r':\r\n                ret.expansion(1, '\\r');\r\n                break;\r\n              case 't':\r\n                ret.expansion(1, '\\t');\r\n                break;\r\n              case 'u':\r\n                this._error = 'parse string/unicord escape not supported';\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          } else {\r\n            this._error = 'parse string/escape error';\r\n          }\r\n        }\r\n        default: {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    this._error = 'parse string/illegal end';\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * JSONのオブジェクトエレメントをパースしてValueオブジェクトを返す\r\n   *\r\n   * @param buffer    JSONエレメントのバッファ\r\n   * @param length    パースする長さ\r\n   * @param begin     パースを開始する位置\r\n   * @param outEndPos パース終了時の位置\r\n   * @return パースから取得したValueオブジェクト\r\n   */\r\n  protected parseObject(\r\n    buffer: string,\r\n    length: number,\r\n    begin: number,\r\n    outEndPos: number[]\r\n  ): Value {\r\n    if (this._error) return null;\r\n    const ret: JsonMap = new JsonMap();\r\n\r\n    // Key: Value\r\n    let key = '';\r\n    let i: number = begin;\r\n    let c = '';\r\n    const localRetEndPos2: number[] = Array(1);\r\n    let ok = false;\r\n\r\n    // , が続く限りループ\r\n    for (; i < length; i++) {\r\n      FOR_LOOP: for (; i < length; i++) {\r\n        c = buffer[i];\r\n\r\n        switch (c) {\r\n          case '\"':\r\n            key = this.parseString(buffer, length, i + 1, localRetEndPos2);\r\n            if (this._error) {\r\n              return null;\r\n            }\r\n\r\n            i = localRetEndPos2[0];\r\n            ok = true;\r\n            break FOR_LOOP; //-- loopから出る\r\n          case '}': // 閉じカッコ\r\n            outEndPos[0] = i + 1;\r\n            return ret; // 空\r\n          case ':':\r\n            this._error = \"illegal ':' position\";\r\n            break;\r\n          case '\\n':\r\n            this._lineCount++;\r\n          default:\r\n            break; // スキップする文字\r\n        }\r\n      }\r\n      if (!ok) {\r\n        this._error = 'key not found';\r\n        return null;\r\n      }\r\n\r\n      ok = false;\r\n\r\n      // : をチェック\r\n      FOR_LOOP2: for (; i < length; i++) {\r\n        c = buffer[i];\r\n\r\n        switch (c) {\r\n          case ':':\r\n            ok = true;\r\n            i++;\r\n            break FOR_LOOP2;\r\n          case '}':\r\n            this._error = \"illegal '}' position\";\r\n            break;\r\n          case '\\n':\r\n            this._lineCount++;\r\n          // case ' ': case '\\t' : case '\\r':\r\n          default:\r\n            break; // スキップする文字\r\n        }\r\n      }\r\n\r\n      if (!ok) {\r\n        this._error = \"':' not found\";\r\n        return null;\r\n      }\r\n\r\n      // 値をチェック\r\n      const value: Value = this.parseValue(buffer, length, i, localRetEndPos2);\r\n      if (this._error) {\r\n        return null;\r\n      }\r\n\r\n      i = localRetEndPos2[0];\r\n\r\n      // ret.put(key, value);\r\n      ret.put(key, value);\r\n\r\n      FOR_LOOP3: for (; i < length; i++) {\r\n        c = buffer[i];\r\n\r\n        switch (c) {\r\n          case ',':\r\n            break FOR_LOOP3;\r\n          case '}':\r\n            outEndPos[0] = i + 1;\r\n            return ret; // 正常終了\r\n          case '\\n':\r\n            this._lineCount++;\r\n          default:\r\n            break; // スキップ\r\n        }\r\n      }\r\n    }\r\n\r\n    this._error = 'illegal end of perseObject';\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 次の「\"」までの文字列をパースする。\r\n   * @param buffer    JSONエレメントのバッファ\r\n   * @param length    パースする長さ\r\n   * @param begin     パースを開始する位置\r\n   * @param outEndPos パース終了時の位置\r\n   * @return パースから取得したValueオブジェクト\r\n   */\r\n  protected parseArray(\r\n    buffer: string,\r\n    length: number,\r\n    begin: number,\r\n    outEndPos: number[]\r\n  ): Value {\r\n    if (this._error) return null;\r\n    let ret: JsonArray = new JsonArray();\r\n\r\n    // key : value\r\n    let i: number = begin;\r\n    let c: string;\r\n    const localRetEndpos2: number[] = new Array(1);\r\n\r\n    // , が続く限りループ\r\n    for (; i < length; i++) {\r\n      // : をチェック\r\n      const value: Value = this.parseValue(buffer, length, i, localRetEndpos2);\r\n\r\n      if (this._error) {\r\n        return null;\r\n      }\r\n      i = localRetEndpos2[0];\r\n\r\n      if (value) {\r\n        ret.add(value);\r\n      }\r\n\r\n      // FOR_LOOP3:\r\n      // boolean breakflag = false;\r\n      FOR_LOOP: for (; i < length; i++) {\r\n        c = buffer[i];\r\n\r\n        switch (c) {\r\n          case ',':\r\n            // breakflag = true;\r\n            // break; // 次のKEY, VAlUEへ\r\n            break FOR_LOOP;\r\n          case ']':\r\n            outEndPos[0] = i + 1;\r\n            return ret; // 終了\r\n          case '\\n':\r\n            ++this._lineCount;\r\n          //case ' ': case '\\t': case '\\r':\r\n          default:\r\n            break; // スキップ\r\n        }\r\n      }\r\n    }\r\n\r\n    ret = void 0;\r\n    this._error = 'illegal end of parseObject';\r\n    return null;\r\n  }\r\n\r\n  _parseCallback: parseJsonObject = CubismJsonExtension.parseJsonObject; // パース時に使う処理のコールバック関数\r\n\r\n  _error: string; // パース時のエラー\r\n  _lineCount: number; // エラー報告に用いる行数カウント\r\n  _root: Value; // パースされたルート要素\r\n}\r\n\r\ninterface parseJsonObject {\r\n  (obj: Value, map: JsonMap): JsonMap;\r\n}\r\n\r\n/**\r\n * パースしたJSONの要素をfloat値として扱う\r\n */\r\nexport class JsonFloat extends Value {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  constructor(v: number) {\r\n    super();\r\n\r\n    this._value = v;\r\n  }\r\n\r\n  /**\r\n   * Valueの種類が数値型ならtrue\r\n   */\r\n  public isFloat(): boolean {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 要素を文字列で返す(csmString型)\r\n   */\r\n  public getString(defaultValue: string, indent: string): string {\r\n    const strbuf = '\\0';\r\n    this._value = parseFloat(strbuf);\r\n    this._stringBuffer = strbuf;\r\n\r\n    return this._stringBuffer;\r\n  }\r\n\r\n  /**\r\n   * 要素を数値型で返す(number)\r\n   */\r\n  public toInt(defaultValue = 0): number {\r\n    return parseInt(this._value.toString());\r\n  }\r\n\r\n  /**\r\n   * 要素を数値型で返す(number)\r\n   */\r\n  public toFloat(defaultValue = 0.0): number {\r\n    return this._value;\r\n  }\r\n\r\n  /**\r\n   * 引数の値と等しければtrue\r\n   */\r\n  public equals(value: csmString): boolean;\r\n  public equals(value: string): boolean;\r\n  public equals(value: number): boolean;\r\n  public equals(value: boolean): boolean;\r\n  public equals(value: any): boolean {\r\n    if ('number' === typeof value) {\r\n      // int\r\n      if (Math.round(value)) {\r\n        return false;\r\n      }\r\n      // float\r\n      else {\r\n        return value == this._value;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private _value: number; // JSON要素の値\r\n}\r\n\r\n/**\r\n * パースしたJSONの要素を真偽値として扱う\r\n */\r\nexport class JsonBoolean extends Value {\r\n  /**\r\n   * Valueの種類が真偽値ならtrue\r\n   */\r\n  public isBool(): boolean {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 要素を真偽値で返す(boolean)\r\n   */\r\n  public toBoolean(defaultValue = false): boolean {\r\n    return this._boolValue;\r\n  }\r\n\r\n  /**\r\n   * 要素を文字列で返す(csmString型)\r\n   */\r\n  public getString(defaultValue: string, indent: string): string {\r\n    this._stringBuffer = this._boolValue ? 'true' : 'false';\r\n\r\n    return this._stringBuffer;\r\n  }\r\n\r\n  /**\r\n   * 引数の値と等しければtrue\r\n   */\r\n  public equals(value: csmString): boolean;\r\n  public equals(value: string): boolean;\r\n  public equals(value: number): boolean;\r\n  public equals(value: boolean): boolean;\r\n  public equals(value: any): boolean {\r\n    if ('boolean' === typeof value) {\r\n      return value == this._boolValue;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Valueの値が静的ならtrue, 静的なら解放しない\r\n   */\r\n  public isStatic(): boolean {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 引数付きコンストラクタ\r\n   */\r\n  public constructor(v: boolean) {\r\n    super();\r\n\r\n    this._boolValue = v;\r\n  }\r\n\r\n  static trueValue: JsonBoolean; // true\r\n  static falseValue: JsonBoolean; // false\r\n\r\n  private _boolValue: boolean; // JSON要素の値\r\n}\r\n\r\n/**\r\n * パースしたJSONの要素を文字列として扱う\r\n */\r\nexport class JsonString extends Value {\r\n  /**\r\n   * 引数付きコンストラクタ\r\n   */\r\n  public constructor(s: string);\r\n  public constructor(s: csmString);\r\n  public constructor(s: any) {\r\n    super();\r\n\r\n    if ('string' === typeof s) {\r\n      this._stringBuffer = s;\r\n    }\r\n\r\n    if (s instanceof csmString) {\r\n      this._stringBuffer = s.s;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Valueの種類が文字列ならtrue\r\n   */\r\n  public isString(): boolean {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 要素を文字列で返す(csmString型)\r\n   */\r\n  public getString(defaultValue: string, indent: string): string {\r\n    return this._stringBuffer;\r\n  }\r\n\r\n  /**\r\n   * 引数の値と等しければtrue\r\n   */\r\n  public equals(value: csmString): boolean;\r\n  public equals(value: string): boolean;\r\n  public equals(value: number): boolean;\r\n  public equals(value: boolean): boolean;\r\n  public equals(value: any): boolean {\r\n    if ('string' === typeof value) {\r\n      return this._stringBuffer == value;\r\n    }\r\n\r\n    if (value instanceof csmString) {\r\n      return this._stringBuffer == value.s;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * JSONパース時のエラー結果。文字列型のようにふるまう\r\n */\r\nexport class JsonError extends JsonString {\r\n  /**\r\n   * Valueの値が静的ならtrue、静的なら解放しない\r\n   */\r\n  public isStatic(): boolean {\r\n    return this._isStatic;\r\n  }\r\n\r\n  /**\r\n   * エラー情報をセットする\r\n   */\r\n  public setErrorNotForClientCall(s: string): Value {\r\n    this._stringBuffer = s;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 引数付きコンストラクタ\r\n   */\r\n  public constructor(s: csmString | string, isStatic: boolean) {\r\n    if ('string' === typeof s) {\r\n      super(s);\r\n    } else {\r\n      super(s);\r\n    }\r\n    this._isStatic = isStatic;\r\n  }\r\n\r\n  /**\r\n   * Valueの種類がエラー値ならtrue\r\n   */\r\n  public isError(): boolean {\r\n    return true;\r\n  }\r\n\r\n  protected _isStatic: boolean; // 静的なValueかどうか\r\n}\r\n\r\n/**\r\n * パースしたJSONの要素をNULL値として持つ\r\n */\r\nexport class JsonNullvalue extends Value {\r\n  /**\r\n   * Valueの種類がNULL値ならtrue\r\n   */\r\n  public isNull(): boolean {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 要素を文字列で返す(csmString型)\r\n   */\r\n  public getString(defaultValue: string, indent: string): string {\r\n    return this._stringBuffer;\r\n  }\r\n\r\n  /**\r\n   * Valueの値が静的ならtrue, 静的なら解放しない\r\n   */\r\n  public isStatic(): boolean {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Valueにエラー値をセットする\r\n   */\r\n  public setErrorNotForClientCall(s: string): Value {\r\n    this._stringBuffer = s;\r\n    return JsonError.nullValue;\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    super();\r\n\r\n    this._stringBuffer = 'NullValue';\r\n  }\r\n}\r\n\r\n/**\r\n * パースしたJSONの要素を配列として持つ\r\n */\r\nexport class JsonArray extends Value {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    super();\r\n    this._array = new csmVector<Value>();\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    for (\r\n      let ite: csmVector_iterator<Value> = this._array.begin();\r\n      ite.notEqual(this._array.end());\r\n      ite.preIncrement()\r\n    ) {\r\n      let v: Value = ite.ptr();\r\n\r\n      if (v && !v.isStatic()) {\r\n        v = void 0;\r\n        v = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Valueの種類が配列ならtrue\r\n   */\r\n  public isArray(): boolean {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 添字演算子[index]\r\n   */\r\n  public getValueByIndex(index: number): Value {\r\n    if (index < 0 || this._array.getSize() <= index) {\r\n      return Value.errorValue.setErrorNotForClientCall(\r\n        CSM_JSON_ERROR_INDEX_OF_BOUNDS\r\n      );\r\n    }\r\n\r\n    const v: Value = this._array.at(index);\r\n\r\n    if (v == null) {\r\n      return Value.nullValue;\r\n    }\r\n\r\n    return v;\r\n  }\r\n\r\n  /**\r\n   * 添字演算子[string | csmString]\r\n   */\r\n  public getValueByString(s: string | csmString): Value {\r\n    return Value.errorValue.setErrorNotForClientCall(\r\n      CSM_JSON_ERROR_TYPE_MISMATCH\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 要素を文字列で返す(csmString型)\r\n   */\r\n  public getString(defaultValue: string, indent: string): string {\r\n    const stringBuffer: string = indent + '[\\n';\r\n\r\n    for (\r\n      let ite: csmVector_iterator<Value> = this._array.begin();\r\n      ite.notEqual(this._array.end());\r\n      ite.increment()\r\n    ) {\r\n      const v: Value = ite.ptr();\r\n      this._stringBuffer += indent + '' + v.getString(indent + ' ') + '\\n';\r\n    }\r\n\r\n    this._stringBuffer = stringBuffer + indent + ']\\n';\r\n\r\n    return this._stringBuffer;\r\n  }\r\n\r\n  /**\r\n   * 配列要素を追加する\r\n   * @param v 追加する要素\r\n   */\r\n  public add(v: Value): void {\r\n    this._array.pushBack(v);\r\n  }\r\n\r\n  /**\r\n   * 要素をコンテナで返す(csmVector<Value>)\r\n   */\r\n  public getVector(defaultValue: csmVector<Value> = null): csmVector<Value> {\r\n    return this._array;\r\n  }\r\n\r\n  /**\r\n   * 要素の数を返す\r\n   */\r\n  public getSize(): number {\r\n    return this._array.getSize();\r\n  }\r\n\r\n  private _array: csmVector<Value>; // JSON要素の値\r\n}\r\n\r\n/**\r\n * パースしたJSONの要素をマップとして持つ\r\n */\r\nexport class JsonMap extends Value {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    super();\r\n    this._map = new csmMap<string, Value>();\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    const ite: csmMap_iterator<string, Value> = this._map.begin();\r\n\r\n    while (ite.notEqual(this._map.end())) {\r\n      let v: Value = ite.ptr().second;\r\n\r\n      if (v && !v.isStatic()) {\r\n        v = void 0;\r\n        v = null;\r\n      }\r\n\r\n      ite.preIncrement();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Valueの値がMap型ならtrue\r\n   */\r\n  public isMap(): boolean {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 添字演算子[string | csmString]\r\n   */\r\n  public getValueByString(s: string | csmString): Value {\r\n    if (s instanceof csmString) {\r\n      const ret: Value = this._map.getValue(s.s);\r\n      if (ret == null) {\r\n        return Value.nullValue;\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    for (\r\n      let iter: csmMap_iterator<string, Value> = this._map.begin();\r\n      iter.notEqual(this._map.end());\r\n      iter.preIncrement()\r\n    ) {\r\n      if (iter.ptr().first == s) {\r\n        if (iter.ptr().second == null) {\r\n          return Value.nullValue;\r\n        }\r\n        return iter.ptr().second;\r\n      }\r\n    }\r\n\r\n    return Value.nullValue;\r\n  }\r\n\r\n  /**\r\n   * 添字演算子[index]\r\n   */\r\n  public getValueByIndex(index: number): Value {\r\n    return Value.errorValue.setErrorNotForClientCall(\r\n      CSM_JSON_ERROR_TYPE_MISMATCH\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 要素を文字列で返す(csmString型)\r\n   */\r\n  public getString(defaultValue: string, indent: string) {\r\n    this._stringBuffer = indent + '{\\n';\r\n\r\n    const ite: csmMap_iterator<string, Value> = this._map.begin();\r\n    while (ite.notEqual(this._map.end())) {\r\n      const key = ite.ptr().first;\r\n      const v: Value = ite.ptr().second;\r\n\r\n      this._stringBuffer +=\r\n        indent + ' ' + key + ' : ' + v.getString(indent + '   ') + ' \\n';\r\n      ite.preIncrement();\r\n    }\r\n\r\n    this._stringBuffer += indent + '}\\n';\r\n\r\n    return this._stringBuffer;\r\n  }\r\n\r\n  /**\r\n   * 要素をMap型で返す\r\n   */\r\n  public getMap(defaultValue?: csmMap<string, Value>): csmMap<string, Value> {\r\n    return this._map;\r\n  }\r\n\r\n  /**\r\n   * Mapに要素を追加する\r\n   */\r\n  public put(key: string, v: Value): void {\r\n    this._map.setValue(key, v);\r\n  }\r\n\r\n  /**\r\n   * Mapからキーのリストを取得する\r\n   */\r\n  public getKeys(): csmVector<string> {\r\n    if (!this._keys) {\r\n      this._keys = new csmVector<string>();\r\n\r\n      const ite: csmMap_iterator<string, Value> = this._map.begin();\r\n\r\n      while (ite.notEqual(this._map.end())) {\r\n        const key: string = ite.ptr().first;\r\n        this._keys.pushBack(key);\r\n        ite.preIncrement();\r\n      }\r\n    }\r\n    return this._keys;\r\n  }\r\n\r\n  /**\r\n   * Mapの要素数を取得する\r\n   */\r\n  public getSize(): number {\r\n    return this._keys.getSize();\r\n  }\r\n\r\n  private _map: csmMap<string, Value>; // JSON要素の値\r\n  private _keys: csmVector<string>; // JSON要素の値\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismjson';\r\nimport { CubismJsonExtension } from './cubismjsonextension';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismJson = $.CubismJson;\r\n  export type CubismJson = $.CubismJson;\r\n  export const JsonArray = $.JsonArray;\r\n  export type JsonArray = $.JsonArray;\r\n  export const JsonBoolean = $.JsonBoolean;\r\n  export type JsonBoolean = $.JsonBoolean;\r\n  export const JsonError = $.JsonError;\r\n  export type JsonError = $.JsonError;\r\n  export const JsonFloat = $.JsonFloat;\r\n  export type JsonFloat = $.JsonFloat;\r\n  export const JsonMap = $.JsonMap;\r\n  export type JsonMap = $.JsonMap;\r\n  export const JsonNullvalue = $.JsonNullvalue;\r\n  export type JsonNullvalue = $.JsonNullvalue;\r\n  export const JsonString = $.JsonString;\r\n  export type JsonString = $.JsonString;\r\n  export const Value = $.Value;\r\n  export type Value = $.Value;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismIdManager } from './id/cubismidmanager';\r\nimport { CubismRenderer } from './rendering/cubismrenderer';\r\nimport {\r\n  CSM_ASSERT,\r\n  CubismLogInfo,\r\n  CubismLogWarning,\r\n} from './utils/cubismdebug';\r\nimport { Value } from './utils/cubismjson';\r\n\r\nexport function strtod(s: string, endPtr: string[]): number {\r\n  let index = 0;\r\n  for (let i = 1; ; i++) {\r\n    const testC: string = s.slice(i - 1, i);\r\n\r\n    // 指数・マイナスの可能性があるのでスキップする\r\n    if (testC == 'e' || testC == '-' || testC == 'E') {\r\n      continue;\r\n    } // 文字列の範囲を広げていく\r\n\r\n    const test: string = s.substring(0, i);\r\n    const number = Number(test);\r\n    if (isNaN(number)) {\r\n      // 数値として認識できなくなったので終了\r\n      break;\r\n    } // 最後に数値としてできたindexを格納しておく\r\n\r\n    index = i;\r\n  }\r\n  let d = parseFloat(s); // パースした数値\r\n\r\n  if (isNaN(d)) {\r\n    // 数値として認識できなくなったので終了\r\n    d = NaN;\r\n  }\r\n\r\n  endPtr[0] = s.slice(index); // 後続の文字列\r\n  return d;\r\n}\r\n\r\n// ファイルスコープの変数を初期化\r\n\r\nlet s_isStarted = false;\r\nlet s_isInitialized = false;\r\nlet s_option: Option = null;\r\nlet s_cubismIdManager: CubismIdManager = null;\r\n\r\n/**\r\n * Framework内で使う定数の宣言\r\n */\r\nexport const Constant = Object.freeze<Record<string, number>>({\r\n  vertexOffset: 0, // メッシュ頂点のオフセット値\r\n  vertexStep: 2, // メッシュ頂点のステップ値\r\n});\r\n\r\nexport function csmDelete<T>(address: T): void {\r\n  if (!address) {\r\n    return;\r\n  }\r\n\r\n  address = void 0;\r\n}\r\n\r\n/**\r\n * Live2D Cubism SDK Original Workflow SDKのエントリポイント\r\n * 利用開始時はCubismFramework.initialize()を呼び、CubismFramework.dispose()で終了する。\r\n */\r\nexport class CubismFramework {\r\n  /**\r\n   * Cubism FrameworkのAPIを使用可能にする。\r\n   *  APIを実行する前に必ずこの関数を実行すること。\r\n   *  一度準備が完了して以降は、再び実行しても内部処理がスキップされます。\r\n   *\r\n   * @param    option      Optionクラスのインスタンス\r\n   *\r\n   * @return   準備処理が完了したらtrueが返ります。\r\n   */\r\n  public static startUp(option: Option = null): boolean {\r\n    if (s_isStarted) {\r\n      CubismLogInfo('CubismFramework.startUp() is already done.');\r\n      return s_isStarted;\r\n    }\r\n\r\n    s_option = option;\r\n\r\n    if (s_option != null) {\r\n      Live2DCubismCore.Logging.csmSetLogFunction(s_option.logFunction);\r\n    }\r\n\r\n    s_isStarted = true;\r\n\r\n    // Live2D Cubism Coreバージョン情報を表示\r\n    if (s_isStarted) {\r\n      const version: number = Live2DCubismCore.Version.csmGetVersion();\r\n      const major: number = (version & 0xff000000) >> 24;\r\n      const minor: number = (version & 0x00ff0000) >> 16;\r\n      const patch: number = version & 0x0000ffff;\r\n      const versionNumber: number = version;\r\n\r\n      CubismLogInfo(\r\n        `Live2D Cubism Core version: {0}.{1}.{2} ({3})`,\r\n        ('00' + major).slice(-2),\r\n        ('00' + minor).slice(-2),\r\n        ('0000' + patch).slice(-4),\r\n        versionNumber\r\n      );\r\n    }\r\n\r\n    CubismLogInfo('CubismFramework.startUp() is complete.');\r\n\r\n    return s_isStarted;\r\n  }\r\n\r\n  /**\r\n   * StartUp()で初期化したCubismFrameworkの各パラメータをクリアします。\r\n   * Dispose()したCubismFrameworkを再利用する際に利用してください。\r\n   */\r\n  public static cleanUp(): void {\r\n    s_isStarted = false;\r\n    s_isInitialized = false;\r\n    s_option = null;\r\n    s_cubismIdManager = null;\r\n  }\r\n\r\n  /**\r\n   * Cubism Framework内のリソースを初期化してモデルを表示可能な状態にします。<br>\r\n   *     再度Initialize()するには先にDispose()を実行する必要があります。\r\n   *\r\n   * @param memorySize 初期化時メモリ量 [byte(s)]\r\n   *    複数モデル表示時などにモデルが更新されない際に使用してください。\r\n   *    指定する際は必ず1024*1024*16 byte(16MB)以上の値を指定してください。\r\n   *    それ以外はすべて1024*1024*16 byteに丸めます。\r\n   */\r\n  public static initialize(memorySize = 0): void {\r\n    CSM_ASSERT(s_isStarted);\r\n    if (!s_isStarted) {\r\n      CubismLogWarning('CubismFramework is not started.');\r\n      return;\r\n    }\r\n\r\n    // --- s_isInitializedによる連続初期化ガード ---\r\n    // 連続してリソース確保が行われないようにする。\r\n    // 再度Initialize()するには先にDispose()を実行する必要がある。\r\n    if (s_isInitialized) {\r\n      CubismLogWarning(\r\n        'CubismFramework.initialize() skipped, already initialized.'\r\n      );\r\n      return;\r\n    }\r\n\r\n    //---- static 初期化 ----\r\n    Value.staticInitializeNotForClientCall();\r\n\r\n    s_cubismIdManager = new CubismIdManager();\r\n\r\n    // --- HACK: 初期化時メモリ量の拡張(単位byte) ---\r\n    // 複数モデル表示時などにモデルが更新されない際に使用してください。\r\n    // 指定する際は必ず1024*1024*16 byte(16MB)以上の値を指定してください。\r\n    // それ以外はすべて1024*1024*16 byteに丸めます。\r\n    Live2DCubismCore.Memory.initializeAmountOfMemory(memorySize);\r\n\r\n    s_isInitialized = true;\r\n\r\n    CubismLogInfo('CubismFramework.initialize() is complete.');\r\n  }\r\n\r\n  /**\r\n   * Cubism Framework内の全てのリソースを解放します。\r\n   *      ただし、外部で確保されたリソースについては解放しません。\r\n   *      外部で適切に破棄する必要があります。\r\n   */\r\n  public static dispose(): void {\r\n    CSM_ASSERT(s_isStarted);\r\n    if (!s_isStarted) {\r\n      CubismLogWarning('CubismFramework is not started.');\r\n      return;\r\n    }\r\n\r\n    // --- s_isInitializedによる未初期化解放ガード ---\r\n    // dispose()するには先にinitialize()を実行する必要がある。\r\n    if (!s_isInitialized) {\r\n      // false...リソース未確保の場合\r\n      CubismLogWarning('CubismFramework.dispose() skipped, not initialized.');\r\n      return;\r\n    }\r\n\r\n    Value.staticReleaseNotForClientCall();\r\n\r\n    s_cubismIdManager.release();\r\n    s_cubismIdManager = null;\r\n\r\n    // レンダラの静的リソース（シェーダプログラム他）を解放する\r\n    CubismRenderer.staticRelease();\r\n\r\n    s_isInitialized = false;\r\n\r\n    CubismLogInfo('CubismFramework.dispose() is complete.');\r\n  }\r\n\r\n  /**\r\n   * Cubism FrameworkのAPIを使用する準備が完了したかどうか\r\n   * @return APIを使用する準備が完了していればtrueが返ります。\r\n   */\r\n  public static isStarted(): boolean {\r\n    return s_isStarted;\r\n  }\r\n\r\n  /**\r\n   * Cubism Frameworkのリソース初期化がすでに行われているかどうか\r\n   * @return リソース確保が完了していればtrueが返ります\r\n   */\r\n  public static isInitialized(): boolean {\r\n    return s_isInitialized;\r\n  }\r\n\r\n  /**\r\n   * Core APIにバインドしたログ関数を実行する\r\n   *\r\n   * @praram message ログメッセージ\r\n   */\r\n  public static coreLogFunction(message: string): void {\r\n    // Return if logging not possible.\r\n    if (!Live2DCubismCore.Logging.csmGetLogFunction()) {\r\n      return;\r\n    }\r\n\r\n    Live2DCubismCore.Logging.csmGetLogFunction()(message);\r\n  }\r\n\r\n  /**\r\n   * 現在のログ出力レベル設定の値を返す。\r\n   *\r\n   * @return  現在のログ出力レベル設定の値\r\n   */\r\n  public static getLoggingLevel(): LogLevel {\r\n    if (s_option != null) {\r\n      return s_option.loggingLevel;\r\n    }\r\n    return LogLevel.LogLevel_Off;\r\n  }\r\n\r\n  /**\r\n   * IDマネージャのインスタンスを取得する\r\n   * @return CubismManagerクラスのインスタンス\r\n   */\r\n  public static getIdManager(): CubismIdManager {\r\n    return s_cubismIdManager;\r\n  }\r\n\r\n  /**\r\n   * 静的クラスとして使用する\r\n   * インスタンス化させない\r\n   */\r\n  private constructor() {}\r\n}\r\n\r\nexport class Option {\r\n  logFunction: Live2DCubismCore.csmLogFunction; // ログ出力の関数オブジェクト\r\n  loggingLevel: LogLevel; // ログ出力レベルの設定\r\n}\r\n\r\n/**\r\n * ログ出力のレベル\r\n */\r\nexport enum LogLevel {\r\n  LogLevel_Verbose = 0, // 詳細ログ\r\n  LogLevel_Debug, // デバッグログ\r\n  LogLevel_Info, // Infoログ\r\n  LogLevel_Warning, // 警告ログ\r\n  LogLevel_Error, // エラーログ\r\n  LogLevel_Off, // ログ出力無効\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './live2dcubismframework';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const Constant = $.Constant;\r\n  export const csmDelete = $.csmDelete;\r\n  export const CubismFramework = $.CubismFramework;\r\n  export type CubismFramework = $.CubismFramework;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\n/**\r\n * @brief パラメータIDのデフォルト値を保持する定数<br>\r\n *         デフォルト値の仕様は以下のマニュアルに基づく<br>\r\n *         https://docs.live2d.com/cubism-editor-manual/standard-parametor-list/\r\n */\r\nexport const CubismDefaultParameterId = Object.freeze<Record<string, string>>({\r\n  // パーツID\r\n  HitAreaPrefix: 'HitArea',\r\n  HitAreaHead: 'Head',\r\n  HitAreaBody: 'Body',\r\n  PartsIdCore: 'Parts01Core',\r\n  PartsArmPrefix: 'Parts01Arm_',\r\n  PartsArmLPrefix: 'Parts01ArmL_',\r\n  PartsArmRPrefix: 'Parts01ArmR_',\r\n  // パラメータID\r\n  ParamAngleX: 'ParamAngleX',\r\n  ParamAngleY: 'ParamAngleY',\r\n  ParamAngleZ: 'ParamAngleZ',\r\n  ParamEyeLOpen: 'ParamEyeLOpen',\r\n  ParamEyeLSmile: 'ParamEyeLSmile',\r\n  ParamEyeROpen: 'ParamEyeROpen',\r\n  ParamEyeRSmile: 'ParamEyeRSmile',\r\n  ParamEyeBallX: 'ParamEyeBallX',\r\n  ParamEyeBallY: 'ParamEyeBallY',\r\n  ParamEyeBallForm: 'ParamEyeBallForm',\r\n  ParamBrowLY: 'ParamBrowLY',\r\n  ParamBrowRY: 'ParamBrowRY',\r\n  ParamBrowLX: 'ParamBrowLX',\r\n  ParamBrowRX: 'ParamBrowRX',\r\n  ParamBrowLAngle: 'ParamBrowLAngle',\r\n  ParamBrowRAngle: 'ParamBrowRAngle',\r\n  ParamBrowLForm: 'ParamBrowLForm',\r\n  ParamBrowRForm: 'ParamBrowRForm',\r\n  ParamMouthForm: 'ParamMouthForm',\r\n  ParamMouthOpenY: 'ParamMouthOpenY',\r\n  ParamCheek: 'ParamCheek',\r\n  ParamBodyAngleX: 'ParamBodyAngleX',\r\n  ParamBodyAngleY: 'ParamBodyAngleY',\r\n  ParamBodyAngleZ: 'ParamBodyAngleZ',\r\n  ParamBreath: 'ParamBreath',\r\n  ParamArmLA: 'ParamArmLA',\r\n  ParamArmRA: 'ParamArmRA',\r\n  ParamArmLB: 'ParamArmLB',\r\n  ParamArmRB: 'ParamArmRB',\r\n  ParamHandL: 'ParamHandL',\r\n  ParamHandR: 'ParamHandR',\r\n  ParamHairFront: 'ParamHairFront',\r\n  ParamHairSide: 'ParamHairSide',\r\n  ParamHairBack: 'ParamHairBack',\r\n  ParamHairFluffy: 'ParamHairFluffy',\r\n  ParamShoulderY: 'ParamShoulderY',\r\n  ParamBustX: 'ParamBustX',\r\n  ParamBustY: 'ParamBustY',\r\n  ParamBaseX: 'ParamBaseX',\r\n  ParamBaseY: 'ParamBaseY',\r\n  ParamNONE: 'NONE:',\r\n});\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismdefaultparameterid';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const HitAreaBody = $.CubismDefaultParameterId.HitAreaBody;\r\n  export const HitAreaHead = $.CubismDefaultParameterId.HitAreaHead;\r\n  export const HitAreaPrefix = $.CubismDefaultParameterId.HitAreaPrefix;\r\n  export const ParamAngleX = $.CubismDefaultParameterId.ParamAngleX;\r\n  export const ParamAngleY = $.CubismDefaultParameterId.ParamAngleY;\r\n  export const ParamAngleZ = $.CubismDefaultParameterId.ParamAngleZ;\r\n  export const ParamArmLA = $.CubismDefaultParameterId.ParamArmLA;\r\n  export const ParamArmLB = $.CubismDefaultParameterId.ParamArmLB;\r\n  export const ParamArmRA = $.CubismDefaultParameterId.ParamArmRA;\r\n  export const ParamArmRB = $.CubismDefaultParameterId.ParamArmRB;\r\n  export const ParamBaseX = $.CubismDefaultParameterId.ParamBaseX;\r\n  export const ParamBaseY = $.CubismDefaultParameterId.ParamBaseY;\r\n  export const ParamBodyAngleX = $.CubismDefaultParameterId.ParamBodyAngleX;\r\n  export const ParamBodyAngleY = $.CubismDefaultParameterId.ParamBodyAngleY;\r\n  export const ParamBodyAngleZ = $.CubismDefaultParameterId.ParamBodyAngleZ;\r\n  export const ParamBreath = $.CubismDefaultParameterId.ParamBreath;\r\n  export const ParamBrowLAngle = $.CubismDefaultParameterId.ParamBrowLAngle;\r\n  export const ParamBrowLForm = $.CubismDefaultParameterId.ParamBrowLForm;\r\n  export const ParamBrowLX = $.CubismDefaultParameterId.ParamBrowLX;\r\n  export const ParamBrowLY = $.CubismDefaultParameterId.ParamBrowLY;\r\n  export const ParamBrowRAngle = $.CubismDefaultParameterId.ParamBrowRAngle;\r\n  export const ParamBrowRForm = $.CubismDefaultParameterId.ParamBrowRForm;\r\n  export const ParamBrowRX = $.CubismDefaultParameterId.ParamBrowRX;\r\n  export const ParamBrowRY = $.CubismDefaultParameterId.ParamBrowRY;\r\n  export const ParamBustX = $.CubismDefaultParameterId.ParamBustX;\r\n  export const ParamBustY = $.CubismDefaultParameterId.ParamBustY;\r\n  export const ParamCheek = $.CubismDefaultParameterId.ParamCheek;\r\n  export const ParamEyeBallForm = $.CubismDefaultParameterId.ParamEyeBallForm;\r\n  export const ParamEyeBallX = $.CubismDefaultParameterId.ParamEyeBallX;\r\n  export const ParamEyeBallY = $.CubismDefaultParameterId.ParamEyeBallY;\r\n  export const ParamEyeLOpen = $.CubismDefaultParameterId.ParamEyeLOpen;\r\n  export const ParamEyeLSmile = $.CubismDefaultParameterId.ParamEyeLSmile;\r\n  export const ParamEyeROpen = $.CubismDefaultParameterId.ParamEyeROpen;\r\n  export const ParamEyeRSmile = $.CubismDefaultParameterId.ParamEyeRSmile;\r\n  export const ParamHairBack = $.CubismDefaultParameterId.ParamHairBack;\r\n  export const ParamHairFluffy = $.CubismDefaultParameterId.ParamHairFluffy;\r\n  export const ParamHairFront = $.CubismDefaultParameterId.ParamHairFront;\r\n  export const ParamHairSide = $.CubismDefaultParameterId.ParamHairSide;\r\n  export const ParamHandL = $.CubismDefaultParameterId.ParamHandL;\r\n  export const ParamHandR = $.CubismDefaultParameterId.ParamHandR;\r\n  export const ParamMouthForm = $.CubismDefaultParameterId.ParamMouthForm;\r\n  export const ParamMouthOpenY = $.CubismDefaultParameterId.ParamMouthOpenY;\r\n  export const ParamNONE = $.CubismDefaultParameterId.ParamNONE;\r\n  export const ParamShoulderY = $.CubismDefaultParameterId.ParamShoulderY;\r\n  export const PartsArmLPrefix = $.CubismDefaultParameterId.PartsArmLPrefix;\r\n  export const PartsArmPrefix = $.CubismDefaultParameterId.PartsArmPrefix;\r\n  export const PartsArmRPrefix = $.CubismDefaultParameterId.PartsArmRPrefix;\r\n  export const PartsIdCore = $.CubismDefaultParameterId.PartsIdCore;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismIdHandle } from './id/cubismid';\r\nimport { csmMap } from './type/csmmap';\r\n\r\n/**\r\n * モデル設定情報を取り扱う関数を宣言した純粋仮想クラス。\r\n *\r\n * このクラスを継承することで、モデル設定情報を取り扱うクラスになる。\r\n */\r\nexport abstract class ICubismModelSetting {\r\n  /**\r\n   * Mocファイルの名前を取得する\r\n   * @return Mocファイルの名前\r\n   */\r\n  public abstract getModelFileName(): string;\r\n\r\n  /**\r\n   * モデルが使用するテクスチャの数を取得する\r\n   * テクスチャの数\r\n   */\r\n  public abstract getTextureCount(): number;\r\n\r\n  /**\r\n   * テクスチャが配置されたディレクトリの名前を取得する\r\n   * @return テクスチャが配置されたディレクトリの名前\r\n   */\r\n  public abstract getTextureDirectory(): string;\r\n\r\n  /**\r\n   * モデルが使用するテクスチャの名前を取得する\r\n   * @param index 配列のインデックス値\r\n   * @return テクスチャの名前\r\n   */\r\n  public abstract getTextureFileName(index: number): string;\r\n\r\n  /**\r\n   * モデルに設定された当たり判定の数を取得する\r\n   * @return モデルに設定された当たり判定の数\r\n   */\r\n  public abstract getHitAreasCount(): number;\r\n\r\n  /**\r\n   * 当たり判定に設定されたIDを取得する\r\n   *\r\n   * @param index 配列のindex\r\n   * @return 当たり判定に設定されたID\r\n   */\r\n  public abstract getHitAreaId(index: number): CubismIdHandle;\r\n\r\n  /**\r\n   * 当たり判定に設定された名前を取得する\r\n   * @param index 配列のインデックス値\r\n   * @return 当たり判定に設定された名前\r\n   */\r\n  public abstract getHitAreaName(index: number): string;\r\n\r\n  /**\r\n   * 物理演算設定ファイルの名前を取得する\r\n   * @return 物理演算設定ファイルの名前\r\n   */\r\n  public abstract getPhysicsFileName(): string;\r\n\r\n  /**\r\n   * パーツ切り替え設定ファイルの名前を取得する\r\n   * @return パーツ切り替え設定ファイルの名前\r\n   */\r\n  public abstract getPoseFileName(): string;\r\n\r\n  /**\r\n   * 表情設定ファイルの数を取得する\r\n   * @return 表情設定ファイルの数\r\n   */\r\n  public abstract getExpressionCount(): number;\r\n\r\n  /**\r\n   * 表情設定ファイルを識別する名前（別名）を取得する\r\n   * @param index 配列のインデックス値\r\n   * @return 表情の名前\r\n   */\r\n  public abstract getExpressionName(index: number): string;\r\n\r\n  /**\r\n   * 表情設定ファイルの名前を取得する\r\n   * @param index 配列のインデックス値\r\n   * @return 表情設定ファイルの名前\r\n   */\r\n  public abstract getExpressionFileName(index: number): string;\r\n\r\n  /**\r\n   * モーショングループの数を取得する\r\n   * @return モーショングループの数\r\n   */\r\n  public abstract getMotionGroupCount(): number;\r\n\r\n  /**\r\n   * モーショングループの名前を取得する\r\n   * @param index 配列のインデックス値\r\n   * @return モーショングループの名前\r\n   */\r\n  public abstract getMotionGroupName(index: number): string;\r\n\r\n  /**\r\n   * モーショングループに含まれるモーションの数を取得する\r\n   * @param groupName モーショングループの名前\r\n   * @return モーショングループの数\r\n   */\r\n  public abstract getMotionCount(groupName: string): number;\r\n\r\n  /**\r\n   * グループ名とインデックス値からモーションファイル名を取得する\r\n   * @param groupName モーショングループの名前\r\n   * @param index     配列のインデックス値\r\n   * @return モーションファイルの名前\r\n   */\r\n  public abstract getMotionFileName(groupName: string, index: number): string;\r\n\r\n  /**\r\n   * モーションに対応するサウンドファイルの名前を取得する\r\n   * @param groupName モーショングループの名前\r\n   * @param index 配列のインデックス値\r\n   * @return サウンドファイルの名前\r\n   */\r\n  public abstract getMotionSoundFileName(\r\n    groupName: string,\r\n    index: number\r\n  ): string;\r\n\r\n  /**\r\n   * モーション開始時のフェードイン処理時間を取得する\r\n   * @param groupName モーショングループの名前\r\n   * @param index 配列のインデックス値\r\n   * @return フェードイン処理時間[秒]\r\n   */\r\n  public abstract getMotionFadeInTimeValue(\r\n    groupName: string,\r\n    index: number\r\n  ): number;\r\n\r\n  /**\r\n   * モーション終了時のフェードアウト処理時間を取得する\r\n   * @param groupName モーショングループの名前\r\n   * @param index 配列のインデックス値\r\n   * @return フェードアウト処理時間[秒]\r\n   */\r\n  public abstract getMotionFadeOutTimeValue(\r\n    groupName: string,\r\n    index: number\r\n  ): number;\r\n\r\n  /**\r\n   * ユーザーデータのファイル名を取得する\r\n   * @return ユーザーデータのファイル名\r\n   */\r\n  public abstract getUserDataFile(): string;\r\n\r\n  /**\r\n   * レイアウト情報を取得する\r\n   * @param outLayoutMap csmMapクラスのインスタンス\r\n   * @return true レイアウト情報が存在する\r\n   * @return false レイアウト情報が存在しない\r\n   */\r\n  public abstract getLayoutMap(outLayoutMap: csmMap<string, number>): boolean;\r\n\r\n  /**\r\n   * 目パチに関連付けられたパラメータの数を取得する\r\n   * @return 目パチに関連付けられたパラメータの数\r\n   */\r\n  public abstract getEyeBlinkParameterCount(): number;\r\n\r\n  /**\r\n   * 目パチに関連付けられたパラメータのIDを取得する\r\n   * @param index 配列のインデックス値\r\n   * @return パラメータID\r\n   */\r\n  public abstract getEyeBlinkParameterId(index: number): CubismIdHandle;\r\n\r\n  /**\r\n   * リップシンクに関連付けられたパラメータの数を取得する\r\n   * @return リップシンクに関連付けられたパラメータの数\r\n   */\r\n  public abstract getLipSyncParameterCount(): number;\r\n\r\n  /**\r\n   * リップシンクに関連付けられたパラメータの数を取得する\r\n   * @param index 配列のインデックス値\r\n   * @return パラメータID\r\n   */\r\n  public abstract getLipSyncParameterId(index: number): CubismIdHandle;\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './icubismmodelsetting';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const ICubismModelSetting = $.ICubismModelSetting;\r\n  export type ICubismModelSetting = $.ICubismModelSetting;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { ICubismModelSetting } from './icubismmodelsetting';\r\nimport { CubismIdHandle } from './id/cubismid';\r\nimport { CubismFramework } from './live2dcubismframework';\r\nimport { csmMap, iterator } from './type/csmmap';\r\nimport { csmVector } from './type/csmvector';\r\nimport { CubismJson, Value } from './utils/cubismjson';\r\n\r\n/**\r\n * Model3Jsonのキー文字列\r\n */\r\n\r\n// JSON Keys\r\nconst Version = 'Version';\r\nconst FileReferences = 'FileReferences';\r\nconst Groups = 'Groups';\r\nconst Layout = 'Layout';\r\nconst HitAreas = 'HitAreas';\r\n\r\nconst Moc = 'Moc';\r\nconst Textures = 'Textures';\r\nconst Physics = 'Physics';\r\nconst Pose = 'Pose';\r\nconst Expressions = 'Expressions';\r\nconst Motions = 'Motions';\r\n\r\nconst UserData = 'UserData';\r\nconst Name = 'Name';\r\nconst FilePath = 'File';\r\nconst Id = 'Id';\r\nconst Ids = 'Ids';\r\nconst Target = 'Target';\r\n\r\n// Motions\r\nconst Idle = 'Idle';\r\nconst TapBody = 'TapBody';\r\nconst PinchIn = 'PinchIn';\r\nconst PinchOut = 'PinchOut';\r\nconst Shake = 'Shake';\r\nconst FlickHead = 'FlickHead';\r\nconst Parameter = 'Parameter';\r\n\r\nconst SoundPath = 'Sound';\r\nconst FadeInTime = 'FadeInTime';\r\nconst FadeOutTime = 'FadeOutTime';\r\n\r\n// Layout\r\nconst CenterX = 'CenterX';\r\nconst CenterY = 'CenterY';\r\nconst X = 'X';\r\nconst Y = 'Y';\r\nconst Width = 'Width';\r\nconst Height = 'Height';\r\n\r\nconst LipSync = 'LipSync';\r\nconst EyeBlink = 'EyeBlink';\r\n\r\nconst InitParameter = 'init_param';\r\nconst InitPartsVisible = 'init_parts_visible';\r\nconst Val = 'val';\r\n\r\nenum FrequestNode {\r\n  FrequestNode_Groups, // getRoot().getValueByString(Groups)\r\n  FrequestNode_Moc, // getRoot().getValueByString(FileReferences).getValueByString(Moc)\r\n  FrequestNode_Motions, // getRoot().getValueByString(FileReferences).getValueByString(Motions)\r\n  FrequestNode_Expressions, // getRoot().getValueByString(FileReferences).getValueByString(Expressions)\r\n  FrequestNode_Textures, // getRoot().getValueByString(FileReferences).getValueByString(Textures)\r\n  FrequestNode_Physics, // getRoot().getValueByString(FileReferences).getValueByString(Physics)\r\n  FrequestNode_Pose, // getRoot().getValueByString(FileReferences).getValueByString(Pose)\r\n  FrequestNode_HitAreas, // getRoot().getValueByString(HitAreas)\r\n}\r\n\r\n/**\r\n * Model3Jsonパーサー\r\n *\r\n * model3.jsonファイルをパースして値を取得する\r\n */\r\nexport class CubismModelSettingJson extends ICubismModelSetting {\r\n  /**\r\n   * 引数付きコンストラクタ\r\n   *\r\n   * @param buffer    Model3Jsonをバイト配列として読み込んだデータバッファ\r\n   * @param size      Model3Jsonのデータサイズ\r\n   */\r\n  public constructor(buffer: ArrayBuffer, size: number) {\r\n    super();\r\n    this._json = CubismJson.create(buffer, size);\r\n\r\n    if (this._json) {\r\n      this._jsonValue = new csmVector<Value>();\r\n\r\n      // 順番はenum FrequestNodeと一致させる\r\n      this._jsonValue.pushBack(this._json.getRoot().getValueByString(Groups));\r\n      this._jsonValue.pushBack(\r\n        this._json\r\n          .getRoot()\r\n          .getValueByString(FileReferences)\r\n          .getValueByString(Moc)\r\n      );\r\n      this._jsonValue.pushBack(\r\n        this._json\r\n          .getRoot()\r\n          .getValueByString(FileReferences)\r\n          .getValueByString(Motions)\r\n      );\r\n      this._jsonValue.pushBack(\r\n        this._json\r\n          .getRoot()\r\n          .getValueByString(FileReferences)\r\n          .getValueByString(Expressions)\r\n      );\r\n      this._jsonValue.pushBack(\r\n        this._json\r\n          .getRoot()\r\n          .getValueByString(FileReferences)\r\n          .getValueByString(Textures)\r\n      );\r\n      this._jsonValue.pushBack(\r\n        this._json\r\n          .getRoot()\r\n          .getValueByString(FileReferences)\r\n          .getValueByString(Physics)\r\n      );\r\n      this._jsonValue.pushBack(\r\n        this._json\r\n          .getRoot()\r\n          .getValueByString(FileReferences)\r\n          .getValueByString(Pose)\r\n      );\r\n      this._jsonValue.pushBack(this._json.getRoot().getValueByString(HitAreas));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    CubismJson.delete(this._json);\r\n\r\n    this._jsonValue = null;\r\n  }\r\n\r\n  /**\r\n   * CubismJsonオブジェクトを取得する\r\n   *\r\n   * @return CubismJson\r\n   */\r\n  public GetJson(): CubismJson {\r\n    return this._json;\r\n  }\r\n\r\n  /**\r\n   * Mocファイルの名前を取得する\r\n   * @return Mocファイルの名前\r\n   */\r\n  public getModelFileName(): string {\r\n    if (!this.isExistModelFile()) {\r\n      return '';\r\n    }\r\n    return this._jsonValue.at(FrequestNode.FrequestNode_Moc).getRawString();\r\n  }\r\n\r\n  /**\r\n   * モデルが使用するテクスチャの数を取得する\r\n   * テクスチャの数\r\n   */\r\n  public getTextureCount(): number {\r\n    if (!this.isExistTextureFiles()) {\r\n      return 0;\r\n    }\r\n\r\n    return this._jsonValue.at(FrequestNode.FrequestNode_Textures).getSize();\r\n  }\r\n\r\n  /**\r\n   * テクスチャが配置されたディレクトリの名前を取得する\r\n   * @return テクスチャが配置されたディレクトリの名前\r\n   */\r\n  public getTextureDirectory(): string {\r\n    const texturePath = this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Textures)\r\n      .getValueByIndex(0)\r\n      .getRawString();\r\n\r\n    const pathArray = texturePath.split('/');\r\n    // 最後の要素はテクスチャ名なので不要\r\n    const arrayLength = pathArray.length - 1;\r\n    let textureDirectoryStr = '';\r\n\r\n    // 分割したパスを結合\r\n    for (let i = 0; i < arrayLength; i++) {\r\n      textureDirectoryStr += pathArray[i];\r\n      if (i < arrayLength - 1) {\r\n        textureDirectoryStr += '/';\r\n      }\r\n    }\r\n\r\n    return textureDirectoryStr;\r\n  }\r\n\r\n  /**\r\n   * モデルが使用するテクスチャの名前を取得する\r\n   * @param index 配列のインデックス値\r\n   * @return テクスチャの名前\r\n   */\r\n  public getTextureFileName(index: number): string {\r\n    return this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Textures)\r\n      .getValueByIndex(index)\r\n      .getRawString();\r\n  }\r\n\r\n  /**\r\n   * モデルに設定された当たり判定の数を取得する\r\n   * @return モデルに設定された当たり判定の数\r\n   */\r\n  public getHitAreasCount(): number {\r\n    if (!this.isExistHitAreas()) {\r\n      return 0;\r\n    }\r\n\r\n    return this._jsonValue.at(FrequestNode.FrequestNode_HitAreas).getSize();\r\n  }\r\n\r\n  /**\r\n   * 当たり判定に設定されたIDを取得する\r\n   *\r\n   * @param index 配列のindex\r\n   * @return 当たり判定に設定されたID\r\n   */\r\n  public getHitAreaId(index: number): CubismIdHandle {\r\n    return CubismFramework.getIdManager().getId(\r\n      this._jsonValue\r\n        .at(FrequestNode.FrequestNode_HitAreas)\r\n        .getValueByIndex(index)\r\n        .getValueByString(Id)\r\n        .getRawString()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 当たり判定に設定された名前を取得する\r\n   * @param index 配列のインデックス値\r\n   * @return 当たり判定に設定された名前\r\n   */\r\n  public getHitAreaName(index: number): string {\r\n    return this._jsonValue\r\n      .at(FrequestNode.FrequestNode_HitAreas)\r\n      .getValueByIndex(index)\r\n      .getValueByString(Name)\r\n      .getRawString();\r\n  }\r\n\r\n  /**\r\n   * 物理演算設定ファイルの名前を取得する\r\n   * @return 物理演算設定ファイルの名前\r\n   */\r\n  public getPhysicsFileName(): string {\r\n    if (!this.isExistPhysicsFile()) {\r\n      return '';\r\n    }\r\n\r\n    return this._jsonValue.at(FrequestNode.FrequestNode_Physics).getRawString();\r\n  }\r\n\r\n  /**\r\n   * パーツ切り替え設定ファイルの名前を取得する\r\n   * @return パーツ切り替え設定ファイルの名前\r\n   */\r\n  public getPoseFileName(): string {\r\n    if (!this.isExistPoseFile()) {\r\n      return '';\r\n    }\r\n\r\n    return this._jsonValue.at(FrequestNode.FrequestNode_Pose).getRawString();\r\n  }\r\n\r\n  /**\r\n   * 表情設定ファイルの数を取得する\r\n   * @return 表情設定ファイルの数\r\n   */\r\n  public getExpressionCount(): number {\r\n    if (!this.isExistExpressionFile()) {\r\n      return 0;\r\n    }\r\n\r\n    return this._jsonValue.at(FrequestNode.FrequestNode_Expressions).getSize();\r\n  }\r\n\r\n  /**\r\n   * 表情設定ファイルを識別する名前（別名）を取得する\r\n   * @param index 配列のインデックス値\r\n   * @return 表情の名前\r\n   */\r\n  public getExpressionName(index: number): string {\r\n    return this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Expressions)\r\n      .getValueByIndex(index)\r\n      .getValueByString(Name)\r\n      .getRawString();\r\n  }\r\n\r\n  /**\r\n   * 表情設定ファイルの名前を取得する\r\n   * @param index 配列のインデックス値\r\n   * @return 表情設定ファイルの名前\r\n   */\r\n  public getExpressionFileName(index: number): string {\r\n    return this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Expressions)\r\n      .getValueByIndex(index)\r\n      .getValueByString(FilePath)\r\n      .getRawString();\r\n  }\r\n\r\n  /**\r\n   * モーショングループの数を取得する\r\n   * @return モーショングループの数\r\n   */\r\n  public getMotionGroupCount(): number {\r\n    if (!this.isExistMotionGroups()) {\r\n      return 0;\r\n    }\r\n\r\n    return this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Motions)\r\n      .getKeys()\r\n      .getSize();\r\n  }\r\n\r\n  /**\r\n   * モーショングループの名前を取得する\r\n   * @param index 配列のインデックス値\r\n   * @return モーショングループの名前\r\n   */\r\n  public getMotionGroupName(index: number): string {\r\n    if (!this.isExistMotionGroups()) {\r\n      return null;\r\n    }\r\n\r\n    return this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Motions)\r\n      .getKeys()\r\n      .at(index);\r\n  }\r\n\r\n  /**\r\n   * モーショングループに含まれるモーションの数を取得する\r\n   * @param groupName モーショングループの名前\r\n   * @return モーショングループの数\r\n   */\r\n  public getMotionCount(groupName: string): number {\r\n    if (!this.isExistMotionGroupName(groupName)) {\r\n      return 0;\r\n    }\r\n\r\n    return this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Motions)\r\n      .getValueByString(groupName)\r\n      .getSize();\r\n  }\r\n\r\n  /**\r\n   * グループ名とインデックス値からモーションファイル名を取得する\r\n   * @param groupName モーショングループの名前\r\n   * @param index     配列のインデックス値\r\n   * @return モーションファイルの名前\r\n   */\r\n  public getMotionFileName(groupName: string, index: number): string {\r\n    if (!this.isExistMotionGroupName(groupName)) {\r\n      return '';\r\n    }\r\n\r\n    return this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Motions)\r\n      .getValueByString(groupName)\r\n      .getValueByIndex(index)\r\n      .getValueByString(FilePath)\r\n      .getRawString();\r\n  }\r\n\r\n  /**\r\n   * モーションに対応するサウンドファイルの名前を取得する\r\n   * @param groupName モーショングループの名前\r\n   * @param index 配列のインデックス値\r\n   * @return サウンドファイルの名前\r\n   */\r\n  public getMotionSoundFileName(groupName: string, index: number): string {\r\n    if (!this.isExistMotionSoundFile(groupName, index)) {\r\n      return '';\r\n    }\r\n\r\n    return this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Motions)\r\n      .getValueByString(groupName)\r\n      .getValueByIndex(index)\r\n      .getValueByString(SoundPath)\r\n      .getRawString();\r\n  }\r\n\r\n  /**\r\n   * モーション開始時のフェードイン処理時間を取得する\r\n   * @param groupName モーショングループの名前\r\n   * @param index 配列のインデックス値\r\n   * @return フェードイン処理時間[秒]\r\n   */\r\n  public getMotionFadeInTimeValue(groupName: string, index: number): number {\r\n    if (!this.isExistMotionFadeIn(groupName, index)) {\r\n      return -1.0;\r\n    }\r\n\r\n    return this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Motions)\r\n      .getValueByString(groupName)\r\n      .getValueByIndex(index)\r\n      .getValueByString(FadeInTime)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * モーション終了時のフェードアウト処理時間を取得する\r\n   * @param groupName モーショングループの名前\r\n   * @param index 配列のインデックス値\r\n   * @return フェードアウト処理時間[秒]\r\n   */\r\n  public getMotionFadeOutTimeValue(groupName: string, index: number): number {\r\n    if (!this.isExistMotionFadeOut(groupName, index)) {\r\n      return -1.0;\r\n    }\r\n\r\n    return this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Motions)\r\n      .getValueByString(groupName)\r\n      .getValueByIndex(index)\r\n      .getValueByString(FadeOutTime)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * ユーザーデータのファイル名を取得する\r\n   * @return ユーザーデータのファイル名\r\n   */\r\n  public getUserDataFile(): string {\r\n    if (!this.isExistUserDataFile()) {\r\n      return '';\r\n    }\r\n\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(FileReferences)\r\n      .getValueByString(UserData)\r\n      .getRawString();\r\n  }\r\n\r\n  /**\r\n   * レイアウト情報を取得する\r\n   * @param outLayoutMap csmMapクラスのインスタンス\r\n   * @return true レイアウト情報が存在する\r\n   * @return false レイアウト情報が存在しない\r\n   */\r\n  public getLayoutMap(outLayoutMap: csmMap<string, number>): boolean {\r\n    // 存在しない要素にアクセスするとエラーになるためValueがnullの場合はnullを代入する\r\n    const map: csmMap<string, Value> = this._json\r\n      .getRoot()\r\n      .getValueByString(Layout)\r\n      .getMap();\r\n\r\n    if (map == null) {\r\n      return false;\r\n    }\r\n\r\n    let ret = false;\r\n\r\n    for (\r\n      const ite: iterator<string, Value> = map.begin();\r\n      ite.notEqual(map.end());\r\n      ite.preIncrement()\r\n    ) {\r\n      outLayoutMap.setValue(ite.ptr().first, ite.ptr().second.toFloat());\r\n      ret = true;\r\n    }\r\n\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * 目パチに関連付けられたパラメータの数を取得する\r\n   * @return 目パチに関連付けられたパラメータの数\r\n   */\r\n  public getEyeBlinkParameterCount(): number {\r\n    if (!this.isExistEyeBlinkParameters()) {\r\n      return 0;\r\n    }\r\n\r\n    let num = 0;\r\n    for (\r\n      let i = 0;\r\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\r\n      i++\r\n    ) {\r\n      const refI: Value = this._jsonValue\r\n        .at(FrequestNode.FrequestNode_Groups)\r\n        .getValueByIndex(i);\r\n      if (refI.isNull() || refI.isError()) {\r\n        continue;\r\n      }\r\n\r\n      if (refI.getValueByString(Name).getRawString() == EyeBlink) {\r\n        num = refI.getValueByString(Ids).getVector().getSize();\r\n        break;\r\n      }\r\n    }\r\n\r\n    return num;\r\n  }\r\n\r\n  /**\r\n   * 目パチに関連付けられたパラメータのIDを取得する\r\n   * @param index 配列のインデックス値\r\n   * @return パラメータID\r\n   */\r\n  public getEyeBlinkParameterId(index: number): CubismIdHandle {\r\n    if (!this.isExistEyeBlinkParameters()) {\r\n      return null;\r\n    }\r\n\r\n    for (\r\n      let i = 0;\r\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\r\n      i++\r\n    ) {\r\n      const refI: Value = this._jsonValue\r\n        .at(FrequestNode.FrequestNode_Groups)\r\n        .getValueByIndex(i);\r\n      if (refI.isNull() || refI.isError()) {\r\n        continue;\r\n      }\r\n\r\n      if (refI.getValueByString(Name).getRawString() == EyeBlink) {\r\n        return CubismFramework.getIdManager().getId(\r\n          refI.getValueByString(Ids).getValueByIndex(index).getRawString()\r\n        );\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * リップシンクに関連付けられたパラメータの数を取得する\r\n   * @return リップシンクに関連付けられたパラメータの数\r\n   */\r\n  public getLipSyncParameterCount(): number {\r\n    if (!this.isExistLipSyncParameters()) {\r\n      return 0;\r\n    }\r\n\r\n    let num = 0;\r\n    for (\r\n      let i = 0;\r\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\r\n      i++\r\n    ) {\r\n      const refI: Value = this._jsonValue\r\n        .at(FrequestNode.FrequestNode_Groups)\r\n        .getValueByIndex(i);\r\n      if (refI.isNull() || refI.isError()) {\r\n        continue;\r\n      }\r\n\r\n      if (refI.getValueByString(Name).getRawString() == LipSync) {\r\n        num = refI.getValueByString(Ids).getVector().getSize();\r\n        break;\r\n      }\r\n    }\r\n\r\n    return num;\r\n  }\r\n\r\n  /**\r\n   * リップシンクに関連付けられたパラメータの数を取得する\r\n   * @param index 配列のインデックス値\r\n   * @return パラメータID\r\n   */\r\n  public getLipSyncParameterId(index: number): CubismIdHandle {\r\n    if (!this.isExistLipSyncParameters()) {\r\n      return null;\r\n    }\r\n\r\n    for (\r\n      let i = 0;\r\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\r\n      i++\r\n    ) {\r\n      const refI: Value = this._jsonValue\r\n        .at(FrequestNode.FrequestNode_Groups)\r\n        .getValueByIndex(i);\r\n      if (refI.isNull() || refI.isError()) {\r\n        continue;\r\n      }\r\n\r\n      if (refI.getValueByString(Name).getRawString() == LipSync) {\r\n        return CubismFramework.getIdManager().getId(\r\n          refI.getValueByString(Ids).getValueByIndex(index).getRawString()\r\n        );\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * モデルファイルのキーが存在するかどうかを確認する\r\n   * @return true キーが存在する\r\n   * @return false キーが存在しない\r\n   */\r\n  private isExistModelFile(): boolean {\r\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Moc);\r\n    return !node.isNull() && !node.isError();\r\n  }\r\n\r\n  /**\r\n   * テクスチャファイルのキーが存在するかどうかを確認する\r\n   * @return true キーが存在する\r\n   * @return false キーが存在しない\r\n   */\r\n  private isExistTextureFiles(): boolean {\r\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Textures);\r\n    return !node.isNull() && !node.isError();\r\n  }\r\n\r\n  /**\r\n   * 当たり判定のキーが存在するかどうかを確認する\r\n   * @return true キーが存在する\r\n   * @return false キーが存在しない\r\n   */\r\n  private isExistHitAreas(): boolean {\r\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_HitAreas);\r\n    return !node.isNull() && !node.isError();\r\n  }\r\n\r\n  /**\r\n   * 物理演算ファイルのキーが存在するかどうかを確認する\r\n   * @return true キーが存在する\r\n   * @return false キーが存在しない\r\n   */\r\n  private isExistPhysicsFile(): boolean {\r\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Physics);\r\n    return !node.isNull() && !node.isError();\r\n  }\r\n\r\n  /**\r\n   * ポーズ設定ファイルのキーが存在するかどうかを確認する\r\n   * @return true キーが存在する\r\n   * @return false キーが存在しない\r\n   */\r\n  private isExistPoseFile(): boolean {\r\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Pose);\r\n    return !node.isNull() && !node.isError();\r\n  }\r\n\r\n  /**\r\n   * 表情設定ファイルのキーが存在するかどうかを確認する\r\n   * @return true キーが存在する\r\n   * @return false キーが存在しない\r\n   */\r\n  private isExistExpressionFile(): boolean {\r\n    const node: Value = this._jsonValue.at(\r\n      FrequestNode.FrequestNode_Expressions\r\n    );\r\n    return !node.isNull() && !node.isError();\r\n  }\r\n\r\n  /**\r\n   * モーショングループのキーが存在するかどうかを確認する\r\n   * @return true キーが存在する\r\n   * @return false キーが存在しない\r\n   */\r\n  private isExistMotionGroups(): boolean {\r\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Motions);\r\n    return !node.isNull() && !node.isError();\r\n  }\r\n\r\n  /**\r\n   * 引数で指定したモーショングループのキーが存在するかどうかを確認する\r\n   * @param groupName  グループ名\r\n   * @return true キーが存在する\r\n   * @return false キーが存在しない\r\n   */\r\n  private isExistMotionGroupName(groupName: string): boolean {\r\n    const node: Value = this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Motions)\r\n      .getValueByString(groupName);\r\n    return !node.isNull() && !node.isError();\r\n  }\r\n\r\n  /**\r\n   * 引数で指定したモーションに対応するサウンドファイルのキーが存在するかどうかを確認する\r\n   * @param groupName  グループ名\r\n   * @param index 配列のインデックス値\r\n   * @return true キーが存在する\r\n   * @return false キーが存在しない\r\n   */\r\n  private isExistMotionSoundFile(groupName: string, index: number): boolean {\r\n    const node: Value = this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Motions)\r\n      .getValueByString(groupName)\r\n      .getValueByIndex(index)\r\n      .getValueByString(SoundPath);\r\n    return !node.isNull() && !node.isError();\r\n  }\r\n\r\n  /**\r\n   * 引数で指定したモーションに対応するフェードイン時間のキーが存在するかどうかを確認する\r\n   * @param groupName  グループ名\r\n   * @param index 配列のインデックス値\r\n   * @return true キーが存在する\r\n   * @return false キーが存在しない\r\n   */\r\n  private isExistMotionFadeIn(groupName: string, index: number): boolean {\r\n    const node: Value = this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Motions)\r\n      .getValueByString(groupName)\r\n      .getValueByIndex(index)\r\n      .getValueByString(FadeInTime);\r\n    return !node.isNull() && !node.isError();\r\n  }\r\n\r\n  /**\r\n   * 引数で指定したモーションに対応するフェードアウト時間のキーが存在するかどうかを確認する\r\n   * @param groupName  グループ名\r\n   * @param index 配列のインデックス値\r\n   * @return true キーが存在する\r\n   * @return false キーが存在しない\r\n   */\r\n  private isExistMotionFadeOut(groupName: string, index: number): boolean {\r\n    const node: Value = this._jsonValue\r\n      .at(FrequestNode.FrequestNode_Motions)\r\n      .getValueByString(groupName)\r\n      .getValueByIndex(index)\r\n      .getValueByString(FadeOutTime);\r\n    return !node.isNull() && !node.isError();\r\n  }\r\n\r\n  /**\r\n   * UserDataのファイル名が存在するかどうかを確認する\r\n   * @return true キーが存在する\r\n   * @return false キーが存在しない\r\n   */\r\n  private isExistUserDataFile(): boolean {\r\n    const node: Value = this._json\r\n      .getRoot()\r\n      .getValueByString(FileReferences)\r\n      .getValueByString(UserData);\r\n    return !node.isNull() && !node.isError();\r\n  }\r\n\r\n  /**\r\n   * 目ぱちに対応付けられたパラメータが存在するかどうかを確認する\r\n   * @return true キーが存在する\r\n   * @return false キーが存在しない\r\n   */\r\n  private isExistEyeBlinkParameters(): boolean {\r\n    if (\r\n      this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() ||\r\n      this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    for (\r\n      let i = 0;\r\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\r\n      ++i\r\n    ) {\r\n      if (\r\n        this._jsonValue\r\n          .at(FrequestNode.FrequestNode_Groups)\r\n          .getValueByIndex(i)\r\n          .getValueByString(Name)\r\n          .getRawString() == EyeBlink\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * リップシンクに対応付けられたパラメータが存在するかどうかを確認する\r\n   * @return true キーが存在する\r\n   * @return false キーが存在しない\r\n   */\r\n  private isExistLipSyncParameters(): boolean {\r\n    if (\r\n      this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() ||\r\n      this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()\r\n    ) {\r\n      return false;\r\n    }\r\n    for (\r\n      let i = 0;\r\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\r\n      ++i\r\n    ) {\r\n      if (\r\n        this._jsonValue\r\n          .at(FrequestNode.FrequestNode_Groups)\r\n          .getValueByIndex(i)\r\n          .getValueByString(Name)\r\n          .getRawString() == LipSync\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private _json: CubismJson;\r\n  private _jsonValue: csmVector<Value>;\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismmodelsettingjson';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismModelSettingJson = $.CubismModelSettingJson;\r\n  export type CubismModelSettingJson = $.CubismModelSettingJson;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismIdHandle } from '../id/cubismid';\r\nimport { CubismModel } from '../model/cubismmodel';\r\nimport { csmVector } from '../type/csmvector';\r\n\r\n/**\r\n * 呼吸機能\r\n *\r\n * 呼吸機能を提供する。\r\n */\r\nexport class CubismBreath {\r\n  /**\r\n   * インスタンスの作成\r\n   */\r\n  public static create(): CubismBreath {\r\n    return new CubismBreath();\r\n  }\r\n\r\n  /**\r\n   * インスタンスの破棄\r\n   * @param instance 対象のCubismBreath\r\n   */\r\n  public static delete(instance: CubismBreath): void {\r\n    if (instance != null) {\r\n      instance = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 呼吸のパラメータの紐づけ\r\n   * @param breathParameters 呼吸を紐づけたいパラメータのリスト\r\n   */\r\n  public setParameters(breathParameters: csmVector<BreathParameterData>): void {\r\n    this._breathParameters = breathParameters;\r\n  }\r\n\r\n  /**\r\n   * 呼吸に紐づいているパラメータの取得\r\n   * @return 呼吸に紐づいているパラメータのリスト\r\n   */\r\n  public getParameters(): csmVector<BreathParameterData> {\r\n    return this._breathParameters;\r\n  }\r\n\r\n  /**\r\n   * モデルのパラメータの更新\r\n   * @param model 対象のモデル\r\n   * @param deltaTimeSeconds デルタ時間[秒]\r\n   */\r\n  public updateParameters(model: CubismModel, deltaTimeSeconds: number): void {\r\n    this._currentTime += deltaTimeSeconds;\r\n\r\n    const t: number = this._currentTime * 2.0 * 3.14159;\r\n\r\n    for (let i = 0; i < this._breathParameters.getSize(); ++i) {\r\n      const data: BreathParameterData = this._breathParameters.at(i);\r\n\r\n      model.addParameterValueById(\r\n        data.parameterId,\r\n        data.offset + data.peak * Math.sin(t / data.cycle),\r\n        data.weight\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    this._currentTime = 0.0;\r\n  }\r\n\r\n  _breathParameters: csmVector<BreathParameterData>; // 呼吸にひもづいているパラメータのリスト\r\n  _currentTime: number; // 積算時間[秒]\r\n}\r\n\r\n/**\r\n * 呼吸のパラメータ情報\r\n */\r\nexport class BreathParameterData {\r\n  /**\r\n   * コンストラクタ\r\n   * @param parameterId   呼吸をひもづけるパラメータID\r\n   * @param offset        呼吸を正弦波としたときの、波のオフセット\r\n   * @param peak          呼吸を正弦波としたときの、波の高さ\r\n   * @param cycle         呼吸を正弦波としたときの、波の周期\r\n   * @param weight        パラメータへの重み\r\n   */\r\n  constructor(\r\n    parameterId?: CubismIdHandle,\r\n    offset?: number,\r\n    peak?: number,\r\n    cycle?: number,\r\n    weight?: number\r\n  ) {\r\n    this.parameterId = parameterId == undefined ? null : parameterId;\r\n    this.offset = offset == undefined ? 0.0 : offset;\r\n    this.peak = peak == undefined ? 0.0 : peak;\r\n    this.cycle = cycle == undefined ? 0.0 : cycle;\r\n    this.weight = weight == undefined ? 0.0 : weight;\r\n  }\r\n\r\n  parameterId: CubismIdHandle; // 呼吸をひもづけるパラメータID\\\r\n  offset: number; // 呼吸を正弦波としたときの、波のオフセット\r\n  peak: number; // 呼吸を正弦波としたときの、波の高さ\r\n  cycle: number; // 呼吸を正弦波としたときの、波の周期\r\n  weight: number; // パラメータへの重み\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismbreath';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const BreathParameterData = $.BreathParameterData;\r\n  export type BreathParameterData = $.BreathParameterData;\r\n  export const CubismBreath = $.CubismBreath;\r\n  export type CubismBreath = $.CubismBreath;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { ICubismModelSetting } from '../icubismmodelsetting';\r\nimport { CubismIdHandle } from '../id/cubismid';\r\nimport { CubismModel } from '../model/cubismmodel';\r\nimport { csmVector } from '../type/csmvector';\r\n\r\n/**\r\n * 自動まばたき機能\r\n *\r\n * 自動まばたき機能を提供する。\r\n */\r\nexport class CubismEyeBlink {\r\n  /**\r\n   * インスタンスを作成する\r\n   * @param modelSetting モデルの設定情報\r\n   * @return 作成されたインスタンス\r\n   * @note 引数がNULLの場合、パラメータIDが設定されていない空のインスタンスを作成する。\r\n   */\r\n  public static create(\r\n    modelSetting: ICubismModelSetting = null\r\n  ): CubismEyeBlink {\r\n    return new CubismEyeBlink(modelSetting);\r\n  }\r\n\r\n  /**\r\n   * インスタンスの破棄\r\n   * @param eyeBlink 対象のCubismEyeBlink\r\n   */\r\n  public static delete(eyeBlink: CubismEyeBlink): void {\r\n    if (eyeBlink != null) {\r\n      eyeBlink = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * まばたきの間隔の設定\r\n   * @param blinkingInterval まばたきの間隔の時間[秒]\r\n   */\r\n  public setBlinkingInterval(blinkingInterval: number): void {\r\n    this._blinkingIntervalSeconds = blinkingInterval;\r\n  }\r\n\r\n  /**\r\n   * まばたきのモーションの詳細設定\r\n   * @param closing   まぶたを閉じる動作の所要時間[秒]\r\n   * @param closed    まぶたを閉じている動作の所要時間[秒]\r\n   * @param opening   まぶたを開く動作の所要時間[秒]\r\n   */\r\n  public setBlinkingSetting(\r\n    closing: number,\r\n    closed: number,\r\n    opening: number\r\n  ): void {\r\n    this._closingSeconds = closing;\r\n    this._closedSeconds = closed;\r\n    this._openingSeconds = opening;\r\n  }\r\n\r\n  /**\r\n   * まばたきさせるパラメータIDのリストの設定\r\n   * @param parameterIds パラメータのIDのリスト\r\n   */\r\n  public setParameterIds(parameterIds: csmVector<CubismIdHandle>): void {\r\n    this._parameterIds = parameterIds;\r\n  }\r\n\r\n  /**\r\n   * まばたきさせるパラメータIDのリストの取得\r\n   * @return パラメータIDのリスト\r\n   */\r\n  public getParameterIds(): csmVector<CubismIdHandle> {\r\n    return this._parameterIds;\r\n  }\r\n\r\n  /**\r\n   * モデルのパラメータの更新\r\n   * @param model 対象のモデル\r\n   * @param deltaTimeSeconds デルタ時間[秒]\r\n   */\r\n  public updateParameters(model: CubismModel, deltaTimeSeconds: number): void {\r\n    this._userTimeSeconds += deltaTimeSeconds;\r\n    let parameterValue: number;\r\n    let t = 0.0;\r\n\r\n    switch (this._blinkingState) {\r\n      case EyeState.EyeState_Closing:\r\n        t =\r\n          (this._userTimeSeconds - this._stateStartTimeSeconds) /\r\n          this._closingSeconds;\r\n\r\n        if (t >= 1.0) {\r\n          t = 1.0;\r\n          this._blinkingState = EyeState.EyeState_Closed;\r\n          this._stateStartTimeSeconds = this._userTimeSeconds;\r\n        }\r\n\r\n        parameterValue = 1.0 - t;\r\n\r\n        break;\r\n      case EyeState.EyeState_Closed:\r\n        t =\r\n          (this._userTimeSeconds - this._stateStartTimeSeconds) /\r\n          this._closedSeconds;\r\n\r\n        if (t >= 1.0) {\r\n          this._blinkingState = EyeState.EyeState_Opening;\r\n          this._stateStartTimeSeconds = this._userTimeSeconds;\r\n        }\r\n\r\n        parameterValue = 0.0;\r\n\r\n        break;\r\n      case EyeState.EyeState_Opening:\r\n        t =\r\n          (this._userTimeSeconds - this._stateStartTimeSeconds) /\r\n          this._openingSeconds;\r\n\r\n        if (t >= 1.0) {\r\n          t = 1.0;\r\n          this._blinkingState = EyeState.EyeState_Interval;\r\n          this._nextBlinkingTime = this.determinNextBlinkingTiming();\r\n        }\r\n\r\n        parameterValue = t;\r\n\r\n        break;\r\n      case EyeState.EyeState_Interval:\r\n        if (this._nextBlinkingTime < this._userTimeSeconds) {\r\n          this._blinkingState = EyeState.EyeState_Closing;\r\n          this._stateStartTimeSeconds = this._userTimeSeconds;\r\n        }\r\n\r\n        parameterValue = 1.0;\r\n\r\n        break;\r\n      case EyeState.EyeState_First:\r\n      default:\r\n        this._blinkingState = EyeState.EyeState_Interval;\r\n        this._nextBlinkingTime = this.determinNextBlinkingTiming();\r\n\r\n        parameterValue = 1.0;\r\n        break;\r\n    }\r\n\r\n    if (!CubismEyeBlink.CloseIfZero) {\r\n      parameterValue = -parameterValue;\r\n    }\r\n\r\n    for (let i = 0; i < this._parameterIds.getSize(); ++i) {\r\n      model.setParameterValueById(this._parameterIds.at(i), parameterValue);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   * @param modelSetting モデルの設定情報\r\n   */\r\n  public constructor(modelSetting: ICubismModelSetting) {\r\n    this._blinkingState = EyeState.EyeState_First;\r\n    this._nextBlinkingTime = 0.0;\r\n    this._stateStartTimeSeconds = 0.0;\r\n    this._blinkingIntervalSeconds = 4.0;\r\n    this._closingSeconds = 0.1;\r\n    this._closedSeconds = 0.05;\r\n    this._openingSeconds = 0.15;\r\n    this._userTimeSeconds = 0.0;\r\n    this._parameterIds = new csmVector<CubismIdHandle>();\r\n\r\n    if (modelSetting == null) {\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < modelSetting.getEyeBlinkParameterCount(); ++i) {\r\n      this._parameterIds.pushBack(modelSetting.getEyeBlinkParameterId(i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 次の瞬きのタイミングの決定\r\n   *\r\n   * @return 次のまばたきを行う時刻[秒]\r\n   */\r\n  public determinNextBlinkingTiming(): number {\r\n    const r: number = Math.random();\r\n    return (\r\n      this._userTimeSeconds + r * (2.0 * this._blinkingIntervalSeconds - 1.0)\r\n    );\r\n  }\r\n\r\n  _blinkingState: number; // 現在の状態\r\n  _parameterIds: csmVector<CubismIdHandle>; // 操作対象のパラメータのIDのリスト\r\n  _nextBlinkingTime: number; // 次のまばたきの時刻[秒]\r\n  _stateStartTimeSeconds: number; // 現在の状態が開始した時刻[秒]\r\n  _blinkingIntervalSeconds: number; // まばたきの間隔[秒]\r\n  _closingSeconds: number; // まぶたを閉じる動作の所要時間[秒]\r\n  _closedSeconds: number; // まぶたを閉じている動作の所要時間[秒]\r\n  _openingSeconds: number; // まぶたを開く動作の所要時間[秒]\r\n  _userTimeSeconds: number; // デルタ時間の積算値[秒]\r\n\r\n  /**\r\n   * IDで指定された目のパラメータが、0のときに閉じるなら true 、1の時に閉じるなら false 。\r\n   */\r\n  static readonly CloseIfZero: boolean = true;\r\n}\r\n\r\n/**\r\n * まばたきの状態\r\n *\r\n * まばたきの状態を表す列挙型\r\n */\r\nexport enum EyeState {\r\n  EyeState_First = 0, // 初期状態\r\n  EyeState_Interval, // まばたきしていない状態\r\n  EyeState_Closing, // まぶたが閉じていく途中の状態\r\n  EyeState_Closed, // まぶたが閉じている状態\r\n  EyeState_Opening, // まぶたが開いていく途中の状態\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismeyeblink';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismEyeBlink = $.CubismEyeBlink;\r\n  export type CubismEyeBlink = $.CubismEyeBlink;\r\n  export const EyeState = $.EyeState;\r\n  export type EyeState = $.EyeState;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismIdHandle } from '../id/cubismid';\r\nimport { CubismFramework } from '../live2dcubismframework';\r\nimport { CubismModel } from '../model/cubismmodel';\r\nimport { csmVector, iterator } from '../type/csmvector';\r\nimport { CubismJson, Value } from '../utils/cubismjson';\r\n\r\nconst Epsilon = 0.001;\r\nconst DefaultFadeInSeconds = 0.5;\r\n\r\n// Pose.jsonのタグ\r\nconst FadeIn = 'FadeInTime';\r\nconst Link = 'Link';\r\nconst Groups = 'Groups';\r\nconst Id = 'Id';\r\n\r\n/**\r\n * パーツの不透明度の設定\r\n *\r\n * パーツの不透明度の管理と設定を行う。\r\n */\r\nexport class CubismPose {\r\n  /**\r\n   * インスタンスの作成\r\n   * @param pose3json pose3.jsonのデータ\r\n   * @param size pose3.jsonのデータのサイズ[byte]\r\n   * @return 作成されたインスタンス\r\n   */\r\n  public static create(pose3json: ArrayBuffer, size: number): CubismPose {\r\n    const ret: CubismPose = new CubismPose();\r\n    const json: CubismJson = CubismJson.create(pose3json, size);\r\n    const root: Value = json.getRoot();\r\n\r\n    // フェード時間の指定\r\n    if (!root.getValueByString(FadeIn).isNull()) {\r\n      ret._fadeTimeSeconds = root\r\n        .getValueByString(FadeIn)\r\n        .toFloat(DefaultFadeInSeconds);\r\n\r\n      if (ret._fadeTimeSeconds <= 0.0) {\r\n        ret._fadeTimeSeconds = DefaultFadeInSeconds;\r\n      }\r\n    }\r\n\r\n    // パーツグループ\r\n    const poseListInfo: Value = root.getValueByString(Groups);\r\n    const poseCount: number = poseListInfo.getSize();\r\n\r\n    for (let poseIndex = 0; poseIndex < poseCount; ++poseIndex) {\r\n      const idListInfo: Value = poseListInfo.getValueByIndex(poseIndex);\r\n      const idCount: number = idListInfo.getSize();\r\n      let groupCount = 0;\r\n\r\n      for (let groupIndex = 0; groupIndex < idCount; ++groupIndex) {\r\n        const partInfo: Value = idListInfo.getValueByIndex(groupIndex);\r\n        const partData: PartData = new PartData();\r\n        const parameterId: CubismIdHandle =\r\n          CubismFramework.getIdManager().getId(\r\n            partInfo.getValueByString(Id).getRawString()\r\n          );\r\n\r\n        partData.partId = parameterId;\r\n\r\n        // リンクするパーツの設定\r\n        if (!partInfo.getValueByString(Link).isNull()) {\r\n          const linkListInfo: Value = partInfo.getValueByString(Link);\r\n          const linkCount: number = linkListInfo.getSize();\r\n\r\n          for (let linkIndex = 0; linkIndex < linkCount; ++linkIndex) {\r\n            const linkPart: PartData = new PartData();\r\n            const linkId: CubismIdHandle = CubismFramework.getIdManager().getId(\r\n              linkListInfo.getValueByIndex(linkIndex).getString()\r\n            );\r\n\r\n            linkPart.partId = linkId;\r\n\r\n            partData.link.pushBack(linkPart);\r\n          }\r\n        }\r\n\r\n        ret._partGroups.pushBack(partData.clone());\r\n\r\n        ++groupCount;\r\n      }\r\n\r\n      ret._partGroupCounts.pushBack(groupCount);\r\n    }\r\n\r\n    CubismJson.delete(json);\r\n\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * インスタンスを破棄する\r\n   * @param pose 対象のCubismPose\r\n   */\r\n  public static delete(pose: CubismPose): void {\r\n    if (pose != null) {\r\n      pose = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * モデルのパラメータの更新\r\n   * @param model 対象のモデル\r\n   * @param deltaTimeSeconds デルタ時間[秒]\r\n   */\r\n  public updateParameters(model: CubismModel, deltaTimeSeconds: number): void {\r\n    // 前回のモデルと同じでない場合は初期化が必要\r\n    if (model != this._lastModel) {\r\n      // パラメータインデックスの初期化\r\n      this.reset(model);\r\n    }\r\n\r\n    this._lastModel = model;\r\n\r\n    // 設定から時間を変更すると、経過時間がマイナスになる事があるので、経過時間0として対応\r\n    if (deltaTimeSeconds < 0.0) {\r\n      deltaTimeSeconds = 0.0;\r\n    }\r\n\r\n    let beginIndex = 0;\r\n\r\n    for (let i = 0; i < this._partGroupCounts.getSize(); i++) {\r\n      const partGroupCount: number = this._partGroupCounts.at(i);\r\n\r\n      this.doFade(model, deltaTimeSeconds, beginIndex, partGroupCount);\r\n\r\n      beginIndex += partGroupCount;\r\n    }\r\n\r\n    this.copyPartOpacities(model);\r\n  }\r\n\r\n  /**\r\n   * 表示を初期化\r\n   * @param model 対象のモデル\r\n   * @note 不透明度の初期値が0でないパラメータは、不透明度を１に設定する\r\n   */\r\n  public reset(model: CubismModel): void {\r\n    let beginIndex = 0;\r\n\r\n    for (let i = 0; i < this._partGroupCounts.getSize(); ++i) {\r\n      const groupCount: number = this._partGroupCounts.at(i);\r\n\r\n      for (let j: number = beginIndex; j < beginIndex + groupCount; ++j) {\r\n        this._partGroups.at(j).initialize(model);\r\n\r\n        const partsIndex: number = this._partGroups.at(j).partIndex;\r\n        const paramIndex: number = this._partGroups.at(j).parameterIndex;\r\n\r\n        if (partsIndex < 0) {\r\n          continue;\r\n        }\r\n\r\n        model.setPartOpacityByIndex(partsIndex, j == beginIndex ? 1.0 : 0.0);\r\n        model.setParameterValueByIndex(paramIndex, j == beginIndex ? 1.0 : 0.0);\r\n\r\n        for (let k = 0; k < this._partGroups.at(j).link.getSize(); ++k) {\r\n          this._partGroups.at(j).link.at(k).initialize(model);\r\n        }\r\n      }\r\n\r\n      beginIndex += groupCount;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * パーツの不透明度をコピー\r\n   *\r\n   * @param model 対象のモデル\r\n   */\r\n  public copyPartOpacities(model: CubismModel): void {\r\n    for (\r\n      let groupIndex = 0;\r\n      groupIndex < this._partGroups.getSize();\r\n      ++groupIndex\r\n    ) {\r\n      const partData: PartData = this._partGroups.at(groupIndex);\r\n\r\n      if (partData.link.getSize() == 0) {\r\n        continue; // 連動するパラメータはない\r\n      }\r\n\r\n      const partIndex: number = this._partGroups.at(groupIndex).partIndex;\r\n      const opacity: number = model.getPartOpacityByIndex(partIndex);\r\n\r\n      for (\r\n        let linkIndex = 0;\r\n        linkIndex < partData.link.getSize();\r\n        ++linkIndex\r\n      ) {\r\n        const linkPart: PartData = partData.link.at(linkIndex);\r\n        const linkPartIndex: number = linkPart.partIndex;\r\n\r\n        if (linkPartIndex < 0) {\r\n          continue;\r\n        }\r\n\r\n        model.setPartOpacityByIndex(linkPartIndex, opacity);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * パーツのフェード操作を行う。\r\n   * @param model 対象のモデル\r\n   * @param deltaTimeSeconds デルタ時間[秒]\r\n   * @param beginIndex フェード操作を行うパーツグループの先頭インデックス\r\n   * @param partGroupCount フェード操作を行うパーツグループの個数\r\n   */\r\n  public doFade(\r\n    model: CubismModel,\r\n    deltaTimeSeconds: number,\r\n    beginIndex: number,\r\n    partGroupCount: number\r\n  ): void {\r\n    let visiblePartIndex = -1;\r\n    let newOpacity = 1.0;\r\n\r\n    const phi = 0.5;\r\n    const backOpacityThreshold = 0.15;\r\n\r\n    // 現在、表示状態になっているパーツを取得\r\n    for (let i: number = beginIndex; i < beginIndex + partGroupCount; ++i) {\r\n      const partIndex: number = this._partGroups.at(i).partIndex;\r\n      const paramIndex: number = this._partGroups.at(i).parameterIndex;\r\n\r\n      if (model.getParameterValueByIndex(paramIndex) > Epsilon) {\r\n        if (visiblePartIndex >= 0) {\r\n          break;\r\n        }\r\n\r\n        visiblePartIndex = i;\r\n        newOpacity = model.getPartOpacityByIndex(partIndex);\r\n\r\n        // 新しい不透明度を計算\r\n        newOpacity += deltaTimeSeconds / this._fadeTimeSeconds;\r\n\r\n        if (newOpacity > 1.0) {\r\n          newOpacity = 1.0;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (visiblePartIndex < 0) {\r\n      visiblePartIndex = 0;\r\n      newOpacity = 1.0;\r\n    }\r\n\r\n    // 表示パーツ、非表示パーツの不透明度を設定する\r\n    for (let i: number = beginIndex; i < beginIndex + partGroupCount; ++i) {\r\n      const partsIndex: number = this._partGroups.at(i).partIndex;\r\n\r\n      // 表示パーツの設定\r\n      if (visiblePartIndex == i) {\r\n        model.setPartOpacityByIndex(partsIndex, newOpacity); // 先に設定\r\n      }\r\n      // 非表示パーツの設定\r\n      else {\r\n        let opacity: number = model.getPartOpacityByIndex(partsIndex);\r\n        let a1: number; // 計算によって求められる不透明度\r\n\r\n        if (newOpacity < phi) {\r\n          a1 = (newOpacity * (phi - 1)) / phi + 1.0; // (0,1),(phi,phi)を通る直線式\r\n        } else {\r\n          a1 = ((1 - newOpacity) * phi) / (1.0 - phi); // (1,0),(phi,phi)を通る直線式\r\n        }\r\n\r\n        // 背景の見える割合を制限する場合\r\n        const backOpacity: number = (1.0 - a1) * (1.0 - newOpacity);\r\n\r\n        if (backOpacity > backOpacityThreshold) {\r\n          a1 = 1.0 - backOpacityThreshold / (1.0 - newOpacity);\r\n        }\r\n\r\n        if (opacity > a1) {\r\n          opacity = a1; // 計算の不透明度よりも大きければ（濃ければ）不透明度を上げる\r\n        }\r\n\r\n        model.setPartOpacityByIndex(partsIndex, opacity);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    this._fadeTimeSeconds = DefaultFadeInSeconds;\r\n    this._lastModel = null;\r\n    this._partGroups = new csmVector<PartData>();\r\n    this._partGroupCounts = new csmVector<number>();\r\n  }\r\n\r\n  _partGroups: csmVector<PartData>; // パーツグループ\r\n  _partGroupCounts: csmVector<number>; // それぞれのパーツグループの個数\r\n  _fadeTimeSeconds: number; // フェード時間[秒]\r\n  _lastModel: CubismModel; // 前回操作したモデル\r\n}\r\n\r\n/**\r\n * パーツにまつわるデータを管理\r\n */\r\nexport class PartData {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  constructor(v?: PartData) {\r\n    this.parameterIndex = 0;\r\n    this.partIndex = 0;\r\n    this.link = new csmVector<PartData>();\r\n\r\n    if (v != undefined) {\r\n      this.partId = v.partId;\r\n\r\n      for (\r\n        const ite: iterator<PartData> = v.link.begin();\r\n        ite.notEqual(v.link.end());\r\n        ite.preIncrement()\r\n      ) {\r\n        this.link.pushBack(ite.ptr().clone());\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * =演算子のオーバーロード\r\n   */\r\n  public assignment(v: PartData): PartData {\r\n    this.partId = v.partId;\r\n\r\n    for (\r\n      const ite: iterator<PartData> = v.link.begin();\r\n      ite.notEqual(v.link.end());\r\n      ite.preIncrement()\r\n    ) {\r\n      this.link.pushBack(ite.ptr().clone());\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 初期化\r\n   * @param model 初期化に使用するモデル\r\n   */\r\n  public initialize(model: CubismModel): void {\r\n    this.parameterIndex = model.getParameterIndex(this.partId);\r\n    this.partIndex = model.getPartIndex(this.partId);\r\n\r\n    model.setParameterValueByIndex(this.parameterIndex, 1);\r\n  }\r\n\r\n  /**\r\n   * オブジェクトのコピーを生成する\r\n   */\r\n  public clone(): PartData {\r\n    const clonePartData: PartData = new PartData();\r\n\r\n    clonePartData.partId = this.partId;\r\n    clonePartData.parameterIndex = this.parameterIndex;\r\n    clonePartData.partIndex = this.partIndex;\r\n    clonePartData.link = new csmVector<PartData>();\r\n\r\n    for (\r\n      let ite: iterator<PartData> = this.link.begin();\r\n      ite.notEqual(this.link.end());\r\n      ite.increment()\r\n    ) {\r\n      clonePartData.link.pushBack(ite.ptr().clone());\r\n    }\r\n\r\n    return clonePartData;\r\n  }\r\n\r\n  partId: CubismIdHandle; // パーツID\r\n  parameterIndex: number; // パラメータのインデックス\r\n  partIndex: number; // パーツのインデックス\r\n  link: csmVector<PartData>; // 連動するパラメータ\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismpose';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismPose = $.CubismPose;\r\n  export type CubismPose = $.CubismPose;\r\n  export const PartData = $.PartData;\r\n  export type PartData = $.PartData;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { csmMap, iterator } from '../type/csmmap';\r\nimport { CubismMatrix44 } from './cubismmatrix44';\r\n\r\n/**\r\n * モデル座標設定用の4x4行列\r\n *\r\n * モデル座標設定用の4x4行列クラス\r\n */\r\nexport class CubismModelMatrix extends CubismMatrix44 {\r\n  /**\r\n   * コンストラクタ\r\n   *\r\n   * @param w 横幅\r\n   * @param h 縦幅\r\n   */\r\n  constructor(w?: number, h?: number) {\r\n    super();\r\n\r\n    this._width = w !== undefined ? w : 0.0;\r\n    this._height = h !== undefined ? h : 0.0;\r\n\r\n    this.setHeight(2.0);\r\n  }\r\n\r\n  /**\r\n   * 横幅を設定\r\n   *\r\n   * @param w 横幅\r\n   */\r\n  public setWidth(w: number): void {\r\n    const scaleX: number = w / this._width;\r\n    const scaleY: number = scaleX;\r\n    this.scale(scaleX, scaleY);\r\n  }\r\n\r\n  /**\r\n   * 縦幅を設定\r\n   * @param h 縦幅\r\n   */\r\n  public setHeight(h: number): void {\r\n    const scaleX: number = h / this._height;\r\n    const scaleY: number = scaleX;\r\n    this.scale(scaleX, scaleY);\r\n  }\r\n\r\n  /**\r\n   * 位置を設定\r\n   *\r\n   * @param x X軸の位置\r\n   * @param y Y軸の位置\r\n   */\r\n  public setPosition(x: number, y: number): void {\r\n    this.translate(x, y);\r\n  }\r\n\r\n  /**\r\n   * 中心位置を設定\r\n   *\r\n   * @param x X軸の中心位置\r\n   * @param y Y軸の中心位置\r\n   *\r\n   * @note widthかheightを設定したあとでないと、拡大率が正しく取得できないためずれる。\r\n   */\r\n  public setCenterPosition(x: number, y: number) {\r\n    this.centerX(x);\r\n    this.centerY(y);\r\n  }\r\n\r\n  /**\r\n   * 上辺の位置を設定する\r\n   *\r\n   * @param y 上辺のY軸位置\r\n   */\r\n  public top(y: number): void {\r\n    this.setY(y);\r\n  }\r\n\r\n  /**\r\n   * 下辺の位置を設定する\r\n   *\r\n   * @param y 下辺のY軸位置\r\n   */\r\n  public bottom(y: number) {\r\n    const h: number = this._height * this.getScaleY();\r\n\r\n    this.translateY(y - h);\r\n  }\r\n\r\n  /**\r\n   * 左辺の位置を設定\r\n   *\r\n   * @param x 左辺のX軸位置\r\n   */\r\n  public left(x: number): void {\r\n    this.setX(x);\r\n  }\r\n\r\n  /**\r\n   * 右辺の位置を設定\r\n   *\r\n   * @param x 右辺のX軸位置\r\n   */\r\n  public right(x: number): void {\r\n    const w = this._width * this.getScaleX();\r\n\r\n    this.translateX(x - w);\r\n  }\r\n\r\n  /**\r\n   * X軸の中心位置を設定\r\n   *\r\n   * @param x X軸の中心位置\r\n   */\r\n  public centerX(x: number): void {\r\n    const w = this._width * this.getScaleX();\r\n\r\n    this.translateX(x - w / 2.0);\r\n  }\r\n\r\n  /**\r\n   * X軸の位置を設定\r\n   *\r\n   * @param x X軸の位置\r\n   */\r\n  public setX(x: number): void {\r\n    this.translateX(x);\r\n  }\r\n\r\n  /**\r\n   * Y軸の中心位置を設定\r\n   *\r\n   * @param y Y軸の中心位置\r\n   */\r\n  public centerY(y: number): void {\r\n    const h: number = this._height * this.getScaleY();\r\n\r\n    this.translateY(y - h / 2.0);\r\n  }\r\n\r\n  /**\r\n   * Y軸の位置を設定する\r\n   *\r\n   * @param y Y軸の位置\r\n   */\r\n  public setY(y: number): void {\r\n    this.translateY(y);\r\n  }\r\n\r\n  /**\r\n   * レイアウト情報から位置を設定\r\n   *\r\n   * @param layout レイアウト情報\r\n   */\r\n  public setupFromLayout(layout: csmMap<string, number>): void {\r\n    const keyWidth = 'width';\r\n    const keyHeight = 'height';\r\n    const keyX = 'x';\r\n    const keyY = 'y';\r\n    const keyCenterX = 'center_x';\r\n    const keyCenterY = 'center_y';\r\n    const keyTop = 'top';\r\n    const keyBottom = 'bottom';\r\n    const keyLeft = 'left';\r\n    const keyRight = 'right';\r\n\r\n    for (\r\n      const ite: iterator<string, number> = layout.begin();\r\n      ite.notEqual(layout.end());\r\n      ite.preIncrement()\r\n    ) {\r\n      const key: string = ite.ptr().first;\r\n      const value: number = ite.ptr().second;\r\n\r\n      if (key == keyWidth) {\r\n        this.setWidth(value);\r\n      } else if (key == keyHeight) {\r\n        this.setHeight(value);\r\n      }\r\n    }\r\n\r\n    for (\r\n      const ite: iterator<string, number> = layout.begin();\r\n      ite.notEqual(layout.end());\r\n      ite.preIncrement()\r\n    ) {\r\n      const key: string = ite.ptr().first;\r\n      const value: number = ite.ptr().second;\r\n\r\n      if (key == keyX) {\r\n        this.setX(value);\r\n      } else if (key == keyY) {\r\n        this.setY(value);\r\n      } else if (key == keyCenterX) {\r\n        this.centerX(value);\r\n      } else if (key == keyCenterY) {\r\n        this.centerY(value);\r\n      } else if (key == keyTop) {\r\n        this.top(value);\r\n      } else if (key == keyBottom) {\r\n        this.bottom(value);\r\n      } else if (key == keyLeft) {\r\n        this.left(value);\r\n      } else if (key == keyRight) {\r\n        this.right(value);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _width: number; // 横幅\r\n  private _height: number; // 縦幅\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismmodelmatrix';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismModelMatrix = $.CubismModelMatrix;\r\n  export type CubismModelMatrix = $.CubismModelMatrix;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\n/**\r\n * 2次元ベクトル型\r\n *\r\n * 2次元ベクトル型の機能を提供する。\r\n */\r\nexport class CubismVector2 {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor(public x?: number, public y?: number) {\r\n    this.x = x == undefined ? 0.0 : x;\r\n\r\n    this.y = y == undefined ? 0.0 : y;\r\n  }\r\n\r\n  /**\r\n   * ベクトルの加算\r\n   *\r\n   * @param vector2 加算するベクトル値\r\n   * @return 加算結果 ベクトル値\r\n   */\r\n  public add(vector2: CubismVector2): CubismVector2 {\r\n    const ret: CubismVector2 = new CubismVector2(0.0, 0.0);\r\n    ret.x = this.x + vector2.x;\r\n    ret.y = this.y + vector2.y;\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * ベクトルの減算\r\n   *\r\n   * @param vector2 減算するベクトル値\r\n   * @return 減算結果 ベクトル値\r\n   */\r\n  public substract(vector2: CubismVector2): CubismVector2 {\r\n    const ret: CubismVector2 = new CubismVector2(0.0, 0.0);\r\n    ret.x = this.x - vector2.x;\r\n    ret.y = this.y - vector2.y;\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * ベクトルの乗算\r\n   *\r\n   * @param vector2 乗算するベクトル値\r\n   * @return 乗算結果 ベクトル値\r\n   */\r\n  public multiply(vector2: CubismVector2): CubismVector2 {\r\n    const ret: CubismVector2 = new CubismVector2(0.0, 0.0);\r\n    ret.x = this.x * vector2.x;\r\n    ret.y = this.y * vector2.y;\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * ベクトルの乗算(スカラー)\r\n   *\r\n   * @param scalar 乗算するスカラー値\r\n   * @return 乗算結果 ベクトル値\r\n   */\r\n  public multiplyByScaler(scalar: number): CubismVector2 {\r\n    return this.multiply(new CubismVector2(scalar, scalar));\r\n  }\r\n\r\n  /**\r\n   * ベクトルの除算\r\n   *\r\n   * @param vector2 除算するベクトル値\r\n   * @return 除算結果 ベクトル値\r\n   */\r\n  public division(vector2: CubismVector2): CubismVector2 {\r\n    const ret: CubismVector2 = new CubismVector2(0.0, 0.0);\r\n    ret.x = this.x / vector2.x;\r\n    ret.y = this.y / vector2.y;\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * ベクトルの除算(スカラー)\r\n   *\r\n   * @param scalar 除算するスカラー値\r\n   * @return 除算結果 ベクトル値\r\n   */\r\n  public divisionByScalar(scalar: number): CubismVector2 {\r\n    return this.division(new CubismVector2(scalar, scalar));\r\n  }\r\n\r\n  /**\r\n   * ベクトルの長さを取得する\r\n   *\r\n   * @return ベクトルの長さ\r\n   */\r\n  public getLength(): number {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y);\r\n  }\r\n\r\n  /**\r\n   * ベクトルの距離の取得\r\n   *\r\n   * @param a 点\r\n   * @return ベクトルの距離\r\n   */\r\n  public getDistanceWith(a: CubismVector2): number {\r\n    return Math.sqrt(\r\n      (this.x - a.x) * (this.x - a.x) + (this.y - a.y) * (this.y - a.y)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * ドット積の計算\r\n   *\r\n   * @param a 値\r\n   * @return 結果\r\n   */\r\n  public dot(a: CubismVector2): number {\r\n    return this.x * a.x + this.y * a.y;\r\n  }\r\n\r\n  /**\r\n   * 正規化の適用\r\n   */\r\n  public normalize(): void {\r\n    const length: number = Math.pow(this.x * this.x + this.y * this.y, 0.5);\r\n\r\n    this.x = this.x / length;\r\n    this.y = this.y / length;\r\n  }\r\n\r\n  /**\r\n   * 等しさの確認（等しいか？）\r\n   *\r\n   * 値が等しいか？\r\n   *\r\n   * @param rhs 確認する値\r\n   * @return true 値は等しい\r\n   * @return false 値は等しくない\r\n   */\r\n  public isEqual(rhs: CubismVector2): boolean {\r\n    return this.x == rhs.x && this.y == rhs.y;\r\n  }\r\n\r\n  /**\r\n   * 等しさの確認（等しくないか？）\r\n   *\r\n   * 値が等しくないか？\r\n   *\r\n   * @param rhs 確認する値\r\n   * @return true 値は等しくない\r\n   * @return false 値は等しい\r\n   */\r\n  public isNotEqual(rhs: CubismVector2): boolean {\r\n    return !this.isEqual(rhs);\r\n  }\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismvector2';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismVector2 = $.CubismVector2;\r\n  export type CubismVector2 = $.CubismVector2;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismVector2 } from './cubismvector2';\r\n\r\n/**\r\n * 数値計算などに使用するユーティリティクラス\r\n */\r\nexport class CubismMath {\r\n  static readonly Epsilon: number = 0.00001;\r\n\r\n  /**\r\n   * 第一引数の値を最小値と最大値の範囲に収めた値を返す\r\n   *\r\n   * @param value 収められる値\r\n   * @param min   範囲の最小値\r\n   * @param max   範囲の最大値\r\n   * @return 最小値と最大値の範囲に収めた値\r\n   */\r\n  static range(value: number, min: number, max: number): number {\r\n    if (value < min) {\r\n      value = min;\r\n    } else if (value > max) {\r\n      value = max;\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * サイン関数の値を求める\r\n   *\r\n   * @param x 角度値（ラジアン）\r\n   * @return サイン関数sin(x)の値\r\n   */\r\n  static sin(x: number): number {\r\n    return Math.sin(x);\r\n  }\r\n\r\n  /**\r\n   * コサイン関数の値を求める\r\n   *\r\n   * @param x 角度値(ラジアン)\r\n   * @return コサイン関数cos(x)の値\r\n   */\r\n  static cos(x: number): number {\r\n    return Math.cos(x);\r\n  }\r\n\r\n  /**\r\n   * 値の絶対値を求める\r\n   *\r\n   * @param x 絶対値を求める値\r\n   * @return 値の絶対値\r\n   */\r\n  static abs(x: number): number {\r\n    return Math.abs(x);\r\n  }\r\n\r\n  /**\r\n   * 平方根(ルート)を求める\r\n   * @param x -> 平方根を求める値\r\n   * @return 値の平方根\r\n   */\r\n  static sqrt(x: number): number {\r\n    return Math.sqrt(x);\r\n  }\r\n\r\n  /**\r\n   * 立方根を求める\r\n   * @param x -> 立方根を求める値\r\n   * @return 値の立方根\r\n   */\r\n  static cbrt(x: number): number {\r\n    if (x === 0) {\r\n      return x;\r\n    }\r\n\r\n    let cx: number = x;\r\n    const isNegativeNumber: boolean = cx < 0;\r\n\r\n    if (isNegativeNumber) {\r\n      cx = -cx;\r\n    }\r\n\r\n    let ret: number;\r\n    if (cx === Infinity) {\r\n      ret = Infinity;\r\n    } else {\r\n      ret = Math.exp(Math.log(cx) / 3);\r\n      ret = (cx / (ret * ret) + 2 * ret) / 3;\r\n    }\r\n    return isNegativeNumber ? -ret : ret;\r\n  }\r\n\r\n  /**\r\n   * イージング処理されたサインを求める\r\n   * フェードイン・アウト時のイージングに利用できる\r\n   *\r\n   * @param value イージングを行う値\r\n   * @return イージング処理されたサイン値\r\n   */\r\n  static getEasingSine(value: number): number {\r\n    if (value < 0.0) {\r\n      return 0.0;\r\n    } else if (value > 1.0) {\r\n      return 1.0;\r\n    }\r\n\r\n    return 0.5 - 0.5 * this.cos(value * Math.PI);\r\n  }\r\n\r\n  /**\r\n   * 大きい方の値を返す\r\n   *\r\n   * @param left 左辺の値\r\n   * @param right 右辺の値\r\n   * @return 大きい方の値\r\n   */\r\n  static max(left: number, right: number): number {\r\n    return left > right ? left : right;\r\n  }\r\n\r\n  /**\r\n   * 小さい方の値を返す\r\n   *\r\n   * @param left  左辺の値\r\n   * @param right 右辺の値\r\n   * @return 小さい方の値\r\n   */\r\n  static min(left: number, right: number): number {\r\n    return left > right ? right : left;\r\n  }\r\n\r\n  /**\r\n   * 角度値をラジアン値に変換する\r\n   *\r\n   * @param degrees   角度値\r\n   * @return 角度値から変換したラジアン値\r\n   */\r\n  static degreesToRadian(degrees: number): number {\r\n    return (degrees / 180.0) * Math.PI;\r\n  }\r\n\r\n  /**\r\n   * ラジアン値を角度値に変換する\r\n   *\r\n   * @param radian    ラジアン値\r\n   * @return ラジアン値から変換した角度値\r\n   */\r\n  static radianToDegrees(radian: number): number {\r\n    return (radian * 180.0) / Math.PI;\r\n  }\r\n\r\n  /**\r\n   * ２つのベクトルからラジアン値を求める\r\n   *\r\n   * @param from  始点ベクトル\r\n   * @param to    終点ベクトル\r\n   * @return ラジアン値から求めた方向ベクトル\r\n   */\r\n  static directionToRadian(from: CubismVector2, to: CubismVector2): number {\r\n    const q1: number = Math.atan2(to.y, to.x);\r\n    const q2: number = Math.atan2(from.y, from.x);\r\n\r\n    let ret: number = q1 - q2;\r\n\r\n    while (ret < -Math.PI) {\r\n      ret += Math.PI * 2.0;\r\n    }\r\n\r\n    while (ret > Math.PI) {\r\n      ret -= Math.PI * 2.0;\r\n    }\r\n\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * ２つのベクトルから角度値を求める\r\n   *\r\n   * @param from  始点ベクトル\r\n   * @param to    終点ベクトル\r\n   * @return 角度値から求めた方向ベクトル\r\n   */\r\n  static directionToDegrees(from: CubismVector2, to: CubismVector2): number {\r\n    const radian: number = this.directionToRadian(from, to);\r\n    let degree: number = this.radianToDegrees(radian);\r\n\r\n    if (to.x - from.x > 0.0) {\r\n      degree = -degree;\r\n    }\r\n\r\n    return degree;\r\n  }\r\n\r\n  /**\r\n   * ラジアン値を方向ベクトルに変換する。\r\n   *\r\n   * @param totalAngle    ラジアン値\r\n   * @return ラジアン値から変換した方向ベクトル\r\n   */\r\n\r\n  static radianToDirection(totalAngle: number): CubismVector2 {\r\n    const ret: CubismVector2 = new CubismVector2();\r\n\r\n    ret.x = this.sin(totalAngle);\r\n    ret.y = this.cos(totalAngle);\r\n\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * 三次方程式の三次項の係数が0になったときに補欠的に二次方程式の解をもとめる。\r\n   * a * x^2 + b * x + c = 0\r\n   *\r\n   * @param   a -> 二次項の係数値\r\n   * @param   b -> 一次項の係数値\r\n   * @param   c -> 定数項の値\r\n   * @return  二次方程式の解\r\n   */\r\n  static quadraticEquation(a: number, b: number, c: number): number {\r\n    if (this.abs(a) < CubismMath.Epsilon) {\r\n      if (this.abs(b) < CubismMath.Epsilon) {\r\n        return -c;\r\n      }\r\n      return -c / b;\r\n    }\r\n\r\n    return -(b + this.sqrt(b * b - 4.0 * a * c)) / (2.0 * a);\r\n  }\r\n\r\n  /**\r\n   * カルダノの公式によってベジェのt値に該当する３次方程式の解を求める。\r\n   * 重解になったときには0.0～1.0の値になる解を返す。\r\n   *\r\n   * a * x^3 + b * x^2 + c * x + d = 0\r\n   *\r\n   * @param   a -> 三次項の係数値\r\n   * @param   b -> 二次項の係数値\r\n   * @param   c -> 一次項の係数値\r\n   * @param   d -> 定数項の値\r\n   * @return  0.0～1.0の間にある解\r\n   */\r\n  static cardanoAlgorithmForBezier(\r\n    a: number,\r\n    b: number,\r\n    c: number,\r\n    d: number\r\n  ): number {\r\n    if (this.sqrt(a) < CubismMath.Epsilon) {\r\n      return this.range(this.quadraticEquation(b, c, d), 0.0, 1.0);\r\n    }\r\n\r\n    const ba: number = b / a;\r\n    const ca: number = c / a;\r\n    const da: number = d / a;\r\n\r\n    const p: number = (3.0 * ca - ba * ba) / 3.0;\r\n    const p3: number = p / 3.0;\r\n    const q: number = (2.0 * ba * ba * ba - 9.0 * ba * ca + 27.0 * da) / 27.0;\r\n    const q2: number = q / 2.0;\r\n    const discriminant: number = q2 * q2 + p3 * p3 * p3;\r\n\r\n    const center = 0.5;\r\n    const threshold: number = center + 0.01;\r\n\r\n    if (discriminant < 0.0) {\r\n      const mp3: number = -p / 3.0;\r\n      const mp33: number = mp3 * mp3 * mp3;\r\n      const r: number = this.sqrt(mp33);\r\n      const t: number = -q / (2.0 * r);\r\n      const cosphi: number = this.range(t, -1.0, 1.0);\r\n      const phi: number = Math.acos(cosphi);\r\n      const crtr: number = this.cbrt(r);\r\n      const t1: number = 2.0 * crtr;\r\n\r\n      const root1: number = t1 * this.cos(phi / 3.0) - ba / 3.0;\r\n      if (this.abs(root1 - center) < threshold) {\r\n        return this.range(root1, 0.0, 1.0);\r\n      }\r\n\r\n      const root2: number =\r\n        t1 * this.cos((phi + 2.0 * Math.PI) / 3.0) - ba / 3.0;\r\n      if (this.abs(root2 - center) < threshold) {\r\n        return this.range(root2, 0.0, 1.0);\r\n      }\r\n\r\n      const root3: number =\r\n        t1 * this.cos((phi + 4.0 * Math.PI) / 3.0) - ba / 3.0;\r\n      return this.range(root3, 0.0, 1.0);\r\n    }\r\n\r\n    if (discriminant == 0.0) {\r\n      let u1: number;\r\n      if (q2 < 0.0) {\r\n        u1 = this.cbrt(-q2);\r\n      } else {\r\n        u1 = -this.cbrt(q2);\r\n      }\r\n\r\n      const root1: number = 2.0 * u1 - ba / 3.0;\r\n      if (this.abs(root1 - center) < threshold) {\r\n        return this.range(root1, 0.0, 1.0);\r\n      }\r\n\r\n      const root2: number = -u1 - ba / 3.0;\r\n      return this.range(root2, 0.0, 1.0);\r\n    }\r\n\r\n    const sd: number = this.sqrt(discriminant);\r\n    const u1: number = this.cbrt(sd - q2);\r\n    const v1: number = this.cbrt(sd + q2);\r\n    const root1: number = u1 - v1 - ba / 3.0;\r\n    return this.range(root1, 0.0, 1.0);\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  private constructor() {}\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismmath';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismMath = $.CubismMath;\r\n  export type CubismMath = $.CubismMath;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismMath } from './cubismmath';\r\n\r\nconst FrameRate = 30;\r\nconst Epsilon = 0.01;\r\n\r\n/**\r\n * 顔の向きの制御機能\r\n *\r\n * 顔の向きの制御機能を提供するクラス。\r\n */\r\nexport class CubismTargetPoint {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    this._faceTargetX = 0.0;\r\n    this._faceTargetY = 0.0;\r\n    this._faceX = 0.0;\r\n    this._faceY = 0.0;\r\n    this._faceVX = 0.0;\r\n    this._faceVY = 0.0;\r\n    this._lastTimeSeconds = 0.0;\r\n    this._userTimeSeconds = 0.0;\r\n  }\r\n\r\n  /**\r\n   * 更新処理\r\n   */\r\n  public update(deltaTimeSeconds: number): void {\r\n    // デルタ時間を加算する\r\n    this._userTimeSeconds += deltaTimeSeconds;\r\n\r\n    // 首を中央から左右に振るときの平均的な速さは 秒速度。加速・減速を考慮して、その２倍を最高速度とする\r\n    // 顔の振り具合を、中央（0.0）から、左右は（+-1.0）とする\r\n    const faceParamMaxV: number = 40.0 / 10.0; // 7.5秒間に40分移動(5.3/sc)\r\n    const maxV: number = (faceParamMaxV * 1.0) / FrameRate; // 1frameあたりに変化できる速度の上限\r\n\r\n    if (this._lastTimeSeconds == 0.0) {\r\n      this._lastTimeSeconds = this._userTimeSeconds;\r\n      return;\r\n    }\r\n\r\n    const deltaTimeWeight: number =\r\n      (this._userTimeSeconds - this._lastTimeSeconds) * FrameRate;\r\n    this._lastTimeSeconds = this._userTimeSeconds;\r\n\r\n    // 最高速度になるまでの時間を\r\n    const timeToMaxSpeed = 0.15;\r\n    const frameToMaxSpeed: number = timeToMaxSpeed * FrameRate; // sec * frame/sec\r\n    const maxA: number = (deltaTimeWeight * maxV) / frameToMaxSpeed; // 1frameあたりの加速度\r\n\r\n    // 目指す向きは、（dx, dy）方向のベクトルとなる\r\n    const dx: number = this._faceTargetX - this._faceX;\r\n    const dy: number = this._faceTargetY - this._faceY;\r\n\r\n    if (CubismMath.abs(dx) <= Epsilon && CubismMath.abs(dy) <= Epsilon) {\r\n      return; // 変化なし\r\n    }\r\n\r\n    // 速度の最大よりも大きい場合は、速度を落とす\r\n    const d: number = CubismMath.sqrt(dx * dx + dy * dy);\r\n\r\n    // 進行方向の最大速度ベクトル\r\n    const vx: number = (maxV * dx) / d;\r\n    const vy: number = (maxV * dy) / d;\r\n\r\n    // 現在の速度から、新規速度への変化（加速度）を求める\r\n    let ax: number = vx - this._faceVX;\r\n    let ay: number = vy - this._faceVY;\r\n\r\n    const a: number = CubismMath.sqrt(ax * ax + ay * ay);\r\n\r\n    // 加速のとき\r\n    if (a < -maxA || a > maxA) {\r\n      ax *= maxA / a;\r\n      ay *= maxA / a;\r\n    }\r\n\r\n    // 加速度を元の速度に足して、新速度とする\r\n    this._faceVX += ax;\r\n    this._faceVY += ay;\r\n\r\n    // 目的の方向に近づいたとき、滑らかに減速するための処理\r\n    // 設定された加速度で止まる事の出来る距離と速度の関係から\r\n    // 現在とりうる最高速度を計算し、それ以上の時は速度を落とす\r\n    // ※本来、人間は筋力で力（加速度）を調整できるため、より自由度が高いが、簡単な処理で済ませている\r\n    {\r\n      // 加速度、速度、距離の関係式。\r\n      //            2  6           2               3\r\n      //      sqrt(a  t  + 16 a h t  - 8 a h) - a t\r\n      // v = --------------------------------------\r\n      //                    2\r\n      //                 4 t  - 2\r\n      // (t=1)\r\n      // \t時刻tは、あらかじめ加速度、速度を1/60(フレームレート、単位なし)で\r\n      // \t考えているので、t＝１として消してよい（※未検証）\r\n\r\n      const maxV: number =\r\n        0.5 *\r\n        (CubismMath.sqrt(maxA * maxA + 16.0 * maxA * d - 8.0 * maxA * d) -\r\n          maxA);\r\n      const curV: number = CubismMath.sqrt(\r\n        this._faceVX * this._faceVX + this._faceVY * this._faceVY\r\n      );\r\n\r\n      if (curV > maxV) {\r\n        // 現在の速度 > 最高速度のとき、最高速度まで減速\r\n        this._faceVX *= maxV / curV;\r\n        this._faceVY *= maxV / curV;\r\n      }\r\n    }\r\n\r\n    this._faceX += this._faceVX;\r\n    this._faceY += this._faceVY;\r\n  }\r\n\r\n  /**\r\n   * X軸の顔の向きの値を取得\r\n   *\r\n   * @return X軸の顔の向きの値（-1.0 ~ 1.0）\r\n   */\r\n  public getX(): number {\r\n    return this._faceX;\r\n  }\r\n\r\n  /**\r\n   * Y軸の顔の向きの値を取得\r\n   *\r\n   * @return Y軸の顔の向きの値（-1.0 ~ 1.0）\r\n   */\r\n  public getY(): number {\r\n    return this._faceY;\r\n  }\r\n\r\n  /**\r\n   * 顔の向きの目標値を設定\r\n   *\r\n   * @param x X軸の顔の向きの値（-1.0 ~ 1.0）\r\n   * @param y Y軸の顔の向きの値（-1.0 ~ 1.0）\r\n   */\r\n  public set(x: number, y: number): void {\r\n    this._faceTargetX = x;\r\n    this._faceTargetY = y;\r\n  }\r\n\r\n  private _faceTargetX: number; // 顔の向きのX目標値（この値に近づいていく）\r\n  private _faceTargetY: number; // 顔の向きのY目標値（この値に近づいていく）\r\n  private _faceX: number; // 顔の向きX（-1.0 ~ 1.0）\r\n  private _faceY: number; // 顔の向きY（-1.0 ~ 1.0）\r\n  private _faceVX: number; // 顔の向きの変化速度X\r\n  private _faceVY: number; // 顔の向きの変化速度Y\r\n  private _lastTimeSeconds: number; // 最後の実行時間[秒]\r\n  private _userTimeSeconds: number; // デルタ時間の積算値[秒]\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismtargetpoint';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismTargetPoint = $.CubismTargetPoint;\r\n  export type CubismTargetPoint = $.CubismTargetPoint;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismMath } from '../math/cubismmath';\r\nimport { CubismModel } from '../model/cubismmodel';\r\nimport { csmString } from '../type/csmstring';\r\nimport { csmVector } from '../type/csmvector';\r\nimport { CSM_ASSERT } from '../utils/cubismdebug';\r\nimport { CubismMotionQueueEntry } from './cubismmotionqueueentry';\r\n\r\n/** モーション再生終了コールバック関数定義 */\r\nexport type FinishedMotionCallback = (self: ACubismMotion) => void;\r\n\r\n/**\r\n * モーションの抽象基底クラス\r\n *\r\n * モーションの抽象基底クラス。MotionQueueManagerによってモーションの再生を管理する。\r\n */\r\nexport abstract class ACubismMotion {\r\n  /**\r\n   * インスタンスの破棄\r\n   */\r\n  public static delete(motion: ACubismMotion): void {\r\n    motion.release();\r\n    motion = null;\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    this._fadeInSeconds = -1.0;\r\n    this._fadeOutSeconds = -1.0;\r\n    this._weight = 1.0;\r\n    this._offsetSeconds = 0.0; // 再生の開始時刻\r\n    this._firedEventValues = new csmVector<csmString>();\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    this._weight = 0.0;\r\n  }\r\n\r\n  /**\r\n   * モデルのパラメータ\r\n   * @param model 対象のモデル\r\n   * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション\r\n   * @param userTimeSeconds デルタ時間の積算値[秒]\r\n   */\r\n  public updateParameters(\r\n    model: CubismModel,\r\n    motionQueueEntry: CubismMotionQueueEntry,\r\n    userTimeSeconds: number\r\n  ): void {\r\n    if (!motionQueueEntry.isAvailable() || motionQueueEntry.isFinished()) {\r\n      return;\r\n    }\r\n\r\n    if (!motionQueueEntry.isStarted()) {\r\n      motionQueueEntry.setIsStarted(true);\r\n      motionQueueEntry.setStartTime(userTimeSeconds - this._offsetSeconds); // モーションの開始時刻を記録\r\n      motionQueueEntry.setFadeInStartTime(userTimeSeconds); // フェードインの開始時刻\r\n\r\n      const duration: number = this.getDuration();\r\n\r\n      if (motionQueueEntry.getEndTime() < 0) {\r\n        // 開始していないうちに終了設定している場合がある。\r\n        motionQueueEntry.setEndTime(\r\n          duration <= 0 ? -1 : motionQueueEntry.getStartTime() + duration\r\n        );\r\n        // duration == -1 の場合はループする\r\n      }\r\n    }\r\n\r\n    let fadeWeight: number = this._weight; // 現在の値と掛け合わせる割合\r\n\r\n    //---- フェードイン・アウトの処理 ----\r\n    // 単純なサイン関数でイージングする\r\n    const fadeIn: number =\r\n      this._fadeInSeconds == 0.0\r\n        ? 1.0\r\n        : CubismMath.getEasingSine(\r\n            (userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /\r\n              this._fadeInSeconds\r\n          );\r\n\r\n    const fadeOut: number =\r\n      this._fadeOutSeconds == 0.0 || motionQueueEntry.getEndTime() < 0.0\r\n        ? 1.0\r\n        : CubismMath.getEasingSine(\r\n            (motionQueueEntry.getEndTime() - userTimeSeconds) /\r\n              this._fadeOutSeconds\r\n          );\r\n\r\n    fadeWeight = fadeWeight * fadeIn * fadeOut;\r\n\r\n    motionQueueEntry.setState(userTimeSeconds, fadeWeight);\r\n\r\n    CSM_ASSERT(0.0 <= fadeWeight && fadeWeight <= 1.0);\r\n\r\n    //---- 全てのパラメータIDをループする ----\r\n    this.doUpdateParameters(\r\n      model,\r\n      userTimeSeconds,\r\n      fadeWeight,\r\n      motionQueueEntry\r\n    );\r\n\r\n    // 後処理\r\n    // 終了時刻を過ぎたら終了フラグを立てる(CubismMotionQueueManager)\r\n    if (\r\n      motionQueueEntry.getEndTime() > 0 &&\r\n      motionQueueEntry.getEndTime() < userTimeSeconds\r\n    ) {\r\n      motionQueueEntry.setIsFinished(true); // 終了\r\n    }\r\n  }\r\n\r\n  /**\r\n   * フェードインの時間を設定する\r\n   * @param fadeInSeconds フェードインにかかる時間[秒]\r\n   */\r\n  public setFadeInTime(fadeInSeconds: number): void {\r\n    this._fadeInSeconds = fadeInSeconds;\r\n  }\r\n\r\n  /**\r\n   * フェードアウトの時間を設定する\r\n   * @param fadeOutSeconds フェードアウトにかかる時間[秒]\r\n   */\r\n  public setFadeOutTime(fadeOutSeconds: number): void {\r\n    this._fadeOutSeconds = fadeOutSeconds;\r\n  }\r\n\r\n  /**\r\n   * フェードアウトにかかる時間の取得\r\n   * @return フェードアウトにかかる時間[秒]\r\n   */\r\n  public getFadeOutTime(): number {\r\n    return this._fadeOutSeconds;\r\n  }\r\n\r\n  /**\r\n   * フェードインにかかる時間の取得\r\n   * @return フェードインにかかる時間[秒]\r\n   */\r\n  public getFadeInTime(): number {\r\n    return this._fadeInSeconds;\r\n  }\r\n\r\n  /**\r\n   * モーション適用の重みの設定\r\n   * @param weight 重み（0.0 - 1.0）\r\n   */\r\n  public setWeight(weight: number): void {\r\n    this._weight = weight;\r\n  }\r\n\r\n  /**\r\n   * モーション適用の重みの取得\r\n   * @return 重み（0.0 - 1.0）\r\n   */\r\n  public getWeight(): number {\r\n    return this._weight;\r\n  }\r\n\r\n  /**\r\n   * モーションの長さの取得\r\n   * @return モーションの長さ[秒]\r\n   *\r\n   * @note ループの時は「-1」。\r\n   *       ループでない場合は、オーバーライドする。\r\n   *       正の値の時は取得される時間で終了する。\r\n   *       「-1」の時は外部から停止命令がない限り終わらない処理となる。\r\n   */\r\n  public getDuration(): number {\r\n    return -1.0;\r\n  }\r\n\r\n  /**\r\n   * モーションのループ1回分の長さの取得\r\n   * @return モーションのループ一回分の長さ[秒]\r\n   *\r\n   * @note ループしない場合は、getDuration()と同じ値を返す\r\n   *       ループ一回分の長さが定義できない場合(プログラム的に動き続けるサブクラスなど)の場合は「-1」を返す\r\n   */\r\n  public getLoopDuration(): number {\r\n    return -1.0;\r\n  }\r\n\r\n  /**\r\n   * モーション再生の開始時刻の設定\r\n   * @param offsetSeconds モーション再生の開始時刻[秒]\r\n   */\r\n  public setOffsetTime(offsetSeconds: number): void {\r\n    this._offsetSeconds = offsetSeconds;\r\n  }\r\n\r\n  /**\r\n   * モデルのパラメータ更新\r\n   *\r\n   * イベント発火のチェック。\r\n   * 入力する時間は呼ばれるモーションタイミングを０とした秒数で行う。\r\n   *\r\n   * @param beforeCheckTimeSeconds 前回のイベントチェック時間[秒]\r\n   * @param motionTimeSeconds 今回の再生時間[秒]\r\n   */\r\n  public getFiredEvent(\r\n    beforeCheckTimeSeconds: number,\r\n    motionTimeSeconds: number\r\n  ): csmVector<csmString> {\r\n    return this._firedEventValues;\r\n  }\r\n\r\n  /**\r\n   * モーションを更新して、モデルにパラメータ値を反映する\r\n   * @param model 対象のモデル\r\n   * @param userTimeSeconds デルタ時間の積算値[秒]\r\n   * @param weight モーションの重み\r\n   * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション\r\n   * @return true モデルへパラメータ値の反映あり\r\n   * @return false モデルへのパラメータ値の反映なし（モーションの変化なし）\r\n   */\r\n  public abstract doUpdateParameters(\r\n    model: CubismModel,\r\n    userTimeSeconds: number,\r\n    weight: number,\r\n    motionQueueEntry: CubismMotionQueueEntry\r\n  ): void;\r\n\r\n  /**\r\n   * モーション再生終了コールバックの登録\r\n   *\r\n   * モーション再生終了コールバックを登録する。\r\n   * isFinishedフラグを設定するタイミングで呼び出される。\r\n   * 以下の状態の際には呼び出されない:\r\n   *   1. 再生中のモーションが「ループ」として設定されているとき\r\n   *   2. コールバックが登録されていない時\r\n   *\r\n   * @param onFinishedMotionHandler モーション再生終了コールバック関数\r\n   */\r\n  public setFinishedMotionHandler = (\r\n    onFinishedMotionHandler: FinishedMotionCallback\r\n  ) => (this._onFinishedMotion = onFinishedMotionHandler);\r\n\r\n  /**\r\n   * モーション再生終了コールバックの取得\r\n   *\r\n   * モーション再生終了コールバックを取得する。\r\n   *\r\n   * @return 登録されているモーション再生終了コールバック関数\r\n   */\r\n  public getFinishedMotionHandler = () => this._onFinishedMotion;\r\n\r\n  public _fadeInSeconds: number; // フェードインにかかる時間[秒]\r\n  public _fadeOutSeconds: number; // フェードアウトにかかる時間[秒]\r\n  public _weight: number; // モーションの重み\r\n  public _offsetSeconds: number; // モーション再生の開始時間[秒]\r\n\r\n  public _firedEventValues: csmVector<csmString>;\r\n\r\n  // モーション再生終了コールバック関数\r\n  public _onFinishedMotion?: FinishedMotionCallback;\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './acubismmotion';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const ACubismMotion = $.ACubismMotion;\r\n  export type ACubismMotion = $.ACubismMotion;\r\n  export type FinishedMotionCallback = $.FinishedMotionCallback;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismIdHandle } from '../id/cubismid';\r\nimport { CubismFramework } from '../live2dcubismframework';\r\nimport { CubismModel } from '../model/cubismmodel';\r\nimport { csmVector } from '../type/csmvector';\r\nimport { CubismJson, Value } from '../utils/cubismjson';\r\nimport { ACubismMotion } from './acubismmotion';\r\nimport { CubismMotionQueueEntry } from './cubismmotionqueueentry';\r\n\r\n// exp3.jsonのキーとデフォルト\r\nconst ExpressionKeyFadeIn = 'FadeInTime';\r\nconst ExpressionKeyFadeOut = 'FadeOutTime';\r\nconst ExpressionKeyParameters = 'Parameters';\r\nconst ExpressionKeyId = 'Id';\r\nconst ExpressionKeyValue = 'Value';\r\nconst ExpressionKeyBlend = 'Blend';\r\nconst BlendValueAdd = 'Add';\r\nconst BlendValueMultiply = 'Multiply';\r\nconst BlendValueOverwrite = 'Overwrite';\r\nconst DefaultFadeTime = 1.0;\r\n\r\n/**\r\n * 表情のモーション\r\n *\r\n * 表情のモーションクラス。\r\n */\r\nexport class CubismExpressionMotion extends ACubismMotion {\r\n  /**\r\n   * インスタンスを作成する。\r\n   * @param buffer expファイルが読み込まれているバッファ\r\n   * @param size バッファのサイズ\r\n   * @return 作成されたインスタンス\r\n   */\r\n  public static create(\r\n    buffer: ArrayBuffer,\r\n    size: number\r\n  ): CubismExpressionMotion {\r\n    const expression: CubismExpressionMotion = new CubismExpressionMotion();\r\n\r\n    const json: CubismJson = CubismJson.create(buffer, size);\r\n    const root: Value = json.getRoot();\r\n\r\n    expression.setFadeInTime(\r\n      root.getValueByString(ExpressionKeyFadeIn).toFloat(DefaultFadeTime)\r\n    ); // フェードイン\r\n    expression.setFadeOutTime(\r\n      root.getValueByString(ExpressionKeyFadeOut).toFloat(DefaultFadeTime)\r\n    ); // フェードアウト\r\n\r\n    // 各パラメータについて\r\n    const parameterCount = root\r\n      .getValueByString(ExpressionKeyParameters)\r\n      .getSize();\r\n    expression._parameters.prepareCapacity(parameterCount);\r\n\r\n    for (let i = 0; i < parameterCount; ++i) {\r\n      const param: Value = root\r\n        .getValueByString(ExpressionKeyParameters)\r\n        .getValueByIndex(i);\r\n      const parameterId: CubismIdHandle = CubismFramework.getIdManager().getId(\r\n        param.getValueByString(ExpressionKeyId).getRawString()\r\n      ); // パラメータID\r\n\r\n      const value: number = param\r\n        .getValueByString(ExpressionKeyValue)\r\n        .toFloat(); // 値\r\n\r\n      // 計算方法の設定\r\n      let blendType: ExpressionBlendType;\r\n\r\n      if (\r\n        param.getValueByString(ExpressionKeyBlend).isNull() ||\r\n        param.getValueByString(ExpressionKeyBlend).getString() == BlendValueAdd\r\n      ) {\r\n        blendType = ExpressionBlendType.ExpressionBlendType_Add;\r\n      } else if (\r\n        param.getValueByString(ExpressionKeyBlend).getString() ==\r\n        BlendValueMultiply\r\n      ) {\r\n        blendType = ExpressionBlendType.ExpressionBlendType_Multiply;\r\n      } else if (\r\n        param.getValueByString(ExpressionKeyBlend).getString() ==\r\n        BlendValueOverwrite\r\n      ) {\r\n        blendType = ExpressionBlendType.ExpressionBlendType_Overwrite;\r\n      } else {\r\n        // その他 仕様にない値を設定した時は加算モードにすることで復旧\r\n        blendType = ExpressionBlendType.ExpressionBlendType_Add;\r\n      }\r\n\r\n      // 設定オブジェクトを作成してリストに追加する\r\n      const item: ExpressionParameter = new ExpressionParameter();\r\n\r\n      item.parameterId = parameterId;\r\n      item.blendType = blendType;\r\n      item.value = value;\r\n\r\n      expression._parameters.pushBack(item);\r\n    }\r\n\r\n    CubismJson.delete(json); // JSONデータは不要になったら削除する\r\n    return expression;\r\n  }\r\n\r\n  /**\r\n   * モデルのパラメータの更新の実行\r\n   * @param model 対象のモデル\r\n   * @param userTimeSeconds デルタ時間の積算値[秒]\r\n   * @param weight モーションの重み\r\n   * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション\r\n   */\r\n  public doUpdateParameters(\r\n    model: CubismModel,\r\n    userTimeSeconds: number,\r\n    weight: number,\r\n    motionQueueEntry: CubismMotionQueueEntry\r\n  ): void {\r\n    for (let i = 0; i < this._parameters.getSize(); ++i) {\r\n      const parameter: ExpressionParameter = this._parameters.at(i);\r\n\r\n      switch (parameter.blendType) {\r\n        case ExpressionBlendType.ExpressionBlendType_Add: {\r\n          model.addParameterValueById(\r\n            parameter.parameterId,\r\n            parameter.value,\r\n            weight\r\n          );\r\n          break;\r\n        }\r\n        case ExpressionBlendType.ExpressionBlendType_Multiply: {\r\n          model.multiplyParameterValueById(\r\n            parameter.parameterId,\r\n            parameter.value,\r\n            weight\r\n          );\r\n          break;\r\n        }\r\n        case ExpressionBlendType.ExpressionBlendType_Overwrite: {\r\n          model.setParameterValueById(\r\n            parameter.parameterId,\r\n            parameter.value,\r\n            weight\r\n          );\r\n          break;\r\n        }\r\n        default:\r\n          // 仕様にない値を設定した時はすでに加算モードになっている\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  constructor() {\r\n    super();\r\n\r\n    this._parameters = new csmVector<ExpressionParameter>();\r\n  }\r\n\r\n  _parameters: csmVector<ExpressionParameter>; // 表情のパラメータ情報リスト\r\n}\r\n\r\n/**\r\n * 表情パラメータ値の計算方式\r\n */\r\nexport enum ExpressionBlendType {\r\n  ExpressionBlendType_Add = 0, // 加算\r\n  ExpressionBlendType_Multiply = 1, // 乗算\r\n  ExpressionBlendType_Overwrite = 2, // 上書き\r\n}\r\n\r\n/**\r\n * 表情のパラメータ情報\r\n */\r\nexport class ExpressionParameter {\r\n  parameterId: CubismIdHandle; // パラメータID\r\n  blendType: ExpressionBlendType; // パラメータの演算種類\r\n  value: number; // 値\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismexpressionmotion';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismExpressionMotion = $.CubismExpressionMotion;\r\n  export type CubismExpressionMotion = $.CubismExpressionMotion;\r\n  export const ExpressionBlendType = $.ExpressionBlendType;\r\n  export type ExpressionBlendType = $.ExpressionBlendType;\r\n  export const ExpressionParameter = $.ExpressionParameter;\r\n  export type ExpressionParameter = $.ExpressionParameter;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismIdHandle } from '../id/cubismid';\r\nimport { csmString } from '../type/csmstring';\r\nimport { csmVector } from '../type/csmvector';\r\n\r\n/**\r\n * @brief モーションカーブの種類\r\n *\r\n * モーションカーブの種類。\r\n */\r\nexport enum CubismMotionCurveTarget {\r\n  CubismMotionCurveTarget_Model, // モデルに対して\r\n  CubismMotionCurveTarget_Parameter, // パラメータに対して\r\n  CubismMotionCurveTarget_PartOpacity, // パーツの不透明度に対して\r\n}\r\n\r\n/**\r\n * @brief モーションカーブのセグメントの種類\r\n *\r\n * モーションカーブのセグメントの種類。\r\n */\r\nexport enum CubismMotionSegmentType {\r\n  CubismMotionSegmentType_Linear = 0, // リニア\r\n  CubismMotionSegmentType_Bezier = 1, // ベジェ曲線\r\n  CubismMotionSegmentType_Stepped = 2, // ステップ\r\n  CubismMotionSegmentType_InverseStepped = 3, // インバースステップ\r\n}\r\n\r\n/**\r\n * @brief モーションカーブの制御点\r\n *\r\n * モーションカーブの制御点。\r\n */\r\nexport class CubismMotionPoint {\r\n  time = 0.0; // 時間[秒]\r\n  value = 0.0; // 値\r\n}\r\n\r\n/**\r\n * モーションカーブのセグメントの評価関数\r\n *\r\n * @param   points      モーションカーブの制御点リスト\r\n * @param   time        評価する時間[秒]\r\n */\r\nexport interface csmMotionSegmentEvaluationFunction {\r\n  (points: CubismMotionPoint[], time: number): number;\r\n}\r\n\r\n/**\r\n * @brief モーションカーブのセグメント\r\n *\r\n * モーションカーブのセグメント。\r\n */\r\nexport class CubismMotionSegment {\r\n  /**\r\n   * @brief コンストラクタ\r\n   *\r\n   * コンストラクタ。\r\n   */\r\n  public constructor() {\r\n    this.evaluate = null;\r\n    this.basePointIndex = 0;\r\n    this.segmentType = 0;\r\n  }\r\n\r\n  evaluate: csmMotionSegmentEvaluationFunction; // 使用する評価関数\r\n  basePointIndex: number; // 最初のセグメントへのインデックス\r\n  segmentType: number; // セグメントの種類\r\n}\r\n\r\n/**\r\n * @brief モーションカーブ\r\n *\r\n * モーションカーブ。\r\n */\r\nexport class CubismMotionCurve {\r\n  public constructor() {\r\n    this.type = CubismMotionCurveTarget.CubismMotionCurveTarget_Model;\r\n    this.segmentCount = 0;\r\n    this.baseSegmentIndex = 0;\r\n    this.fadeInTime = 0.0;\r\n    this.fadeOutTime = 0.0;\r\n  }\r\n\r\n  type: CubismMotionCurveTarget; // カーブの種類\r\n  id: CubismIdHandle; // カーブのID\r\n  segmentCount: number; // セグメントの個数\r\n  baseSegmentIndex: number; // 最初のセグメントのインデックス\r\n  fadeInTime: number; // フェードインにかかる時間[秒]\r\n  fadeOutTime: number; // フェードアウトにかかる時間[秒]\r\n}\r\n\r\n/**\r\n * イベント。\r\n */\r\nexport class CubismMotionEvent {\r\n  fireTime = 0.0;\r\n  value: csmString;\r\n}\r\n\r\n/**\r\n * @brief モーションデータ\r\n *\r\n * モーションデータ。\r\n */\r\nexport class CubismMotionData {\r\n  public constructor() {\r\n    this.duration = 0.0;\r\n    this.loop = false;\r\n    this.curveCount = 0;\r\n    this.eventCount = 0;\r\n    this.fps = 0.0;\r\n\r\n    this.curves = new csmVector<CubismMotionCurve>();\r\n    this.segments = new csmVector<CubismMotionSegment>();\r\n    this.points = new csmVector<CubismMotionPoint>();\r\n    this.events = new csmVector<CubismMotionEvent>();\r\n  }\r\n\r\n  duration: number; // モーションの長さ[秒]\r\n  loop: boolean; // ループするかどうか\r\n  curveCount: number; // カーブの個数\r\n  eventCount: number; // UserDataの個数\r\n  fps: number; // フレームレート\r\n  curves: csmVector<CubismMotionCurve>; // カーブのリスト\r\n  segments: csmVector<CubismMotionSegment>; // セグメントのリスト\r\n  points: csmVector<CubismMotionPoint>; // ポイントのリスト\r\n  events: csmVector<CubismMotionEvent>; // イベントのリスト\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismmotioninternal';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismMotionCurve = $.CubismMotionCurve;\r\n  export type CubismMotionCurve = $.CubismMotionCurve;\r\n  export const CubismMotionCurveTarget = $.CubismMotionCurveTarget;\r\n  export type CubismMotionCurveTarget = $.CubismMotionCurveTarget;\r\n  export const CubismMotionData = $.CubismMotionData;\r\n  export type CubismMotionData = $.CubismMotionData;\r\n  export const CubismMotionEvent = $.CubismMotionEvent;\r\n  export type CubismMotionEvent = $.CubismMotionEvent;\r\n  export const CubismMotionPoint = $.CubismMotionPoint;\r\n  export type CubismMotionPoint = $.CubismMotionPoint;\r\n  export const CubismMotionSegment = $.CubismMotionSegment;\r\n  export type CubismMotionSegment = $.CubismMotionSegment;\r\n  export const CubismMotionSegmentType = $.CubismMotionSegmentType;\r\n  export type CubismMotionSegmentType = $.CubismMotionSegmentType;\r\n  export type csmMotionSegmentEvaluationFunction =\r\n    $.csmMotionSegmentEvaluationFunction;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismIdHandle } from '../id/cubismid';\r\nimport { CubismFramework } from '../live2dcubismframework';\r\nimport { csmString } from '../type/csmstring';\r\nimport { CubismJson, JsonMap } from '../utils/cubismjson';\r\n\r\n// JSON keys\r\nconst Meta = 'Meta';\r\nconst Duration = 'Duration';\r\nconst Loop = 'Loop';\r\nconst AreBeziersRestricted = 'AreBeziersRestricted';\r\nconst CurveCount = 'CurveCount';\r\nconst Fps = 'Fps';\r\nconst TotalSegmentCount = 'TotalSegmentCount';\r\nconst TotalPointCount = 'TotalPointCount';\r\nconst Curves = 'Curves';\r\nconst Target = 'Target';\r\nconst Id = 'Id';\r\nconst FadeInTime = 'FadeInTime';\r\nconst FadeOutTime = 'FadeOutTime';\r\nconst Segments = 'Segments';\r\nconst UserData = 'UserData';\r\nconst UserDataCount = 'UserDataCount';\r\nconst TotalUserDataSize = 'TotalUserDataSize';\r\nconst Time = 'Time';\r\nconst Value = 'Value';\r\n\r\n/**\r\n * motion3.jsonのコンテナ。\r\n */\r\nexport class CubismMotionJson {\r\n  /**\r\n   * コンストラクタ\r\n   * @param buffer motion3.jsonが読み込まれているバッファ\r\n   * @param size バッファのサイズ\r\n   */\r\n  public constructor(buffer: ArrayBuffer, size: number) {\r\n    this._json = CubismJson.create(buffer, size);\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    CubismJson.delete(this._json);\r\n  }\r\n\r\n  /**\r\n   * モーションの長さを取得する\r\n   * @return モーションの長さ[秒]\r\n   */\r\n  public getMotionDuration(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(Duration)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * モーションのループ情報の取得\r\n   * @return true ループする\r\n   * @return false ループしない\r\n   */\r\n  public isMotionLoop(): boolean {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(Loop)\r\n      .toBoolean();\r\n  }\r\n\r\n  public getEvaluationOptionFlag(flagType: number): boolean {\r\n    if (\r\n      EvaluationOptionFlag.EvaluationOptionFlag_AreBeziersRistricted == flagType\r\n    ) {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(Meta)\r\n        .getValueByString(AreBeziersRestricted)\r\n        .toBoolean();\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * モーションカーブの個数の取得\r\n   * @return モーションカーブの個数\r\n   */\r\n  public getMotionCurveCount(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(CurveCount)\r\n      .toInt();\r\n  }\r\n\r\n  /**\r\n   * モーションのフレームレートの取得\r\n   * @return フレームレート[FPS]\r\n   */\r\n  public getMotionFps(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(Fps)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * モーションのセグメントの総合計の取得\r\n   * @return モーションのセグメントの取得\r\n   */\r\n  public getMotionTotalSegmentCount(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(TotalSegmentCount)\r\n      .toInt();\r\n  }\r\n\r\n  /**\r\n   * モーションのカーブの制御店の総合計の取得\r\n   * @return モーションのカーブの制御点の総合計\r\n   */\r\n  public getMotionTotalPointCount(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(TotalPointCount)\r\n      .toInt();\r\n  }\r\n\r\n  /**\r\n   * モーションのフェードイン時間の存在\r\n   * @return true 存在する\r\n   * @return false 存在しない\r\n   */\r\n  public isExistMotionFadeInTime(): boolean {\r\n    return !this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(FadeInTime)\r\n      .isNull();\r\n  }\r\n\r\n  /**\r\n   * モーションのフェードアウト時間の存在\r\n   * @return true 存在する\r\n   * @return false 存在しない\r\n   */\r\n  public isExistMotionFadeOutTime(): boolean {\r\n    return !this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(FadeOutTime)\r\n      .isNull();\r\n  }\r\n\r\n  /**\r\n   * モーションのフェードイン時間の取得\r\n   * @return フェードイン時間[秒]\r\n   */\r\n  public getMotionFadeInTime(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(FadeInTime)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * モーションのフェードアウト時間の取得\r\n   * @return フェードアウト時間[秒]\r\n   */\r\n  public getMotionFadeOutTime(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(FadeOutTime)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * モーションのカーブの種類の取得\r\n   * @param curveIndex カーブのインデックス\r\n   * @return カーブの種類\r\n   */\r\n  public getMotionCurveTarget(curveIndex: number): string {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Curves)\r\n      .getValueByIndex(curveIndex)\r\n      .getValueByString(Target)\r\n      .getRawString();\r\n  }\r\n\r\n  /**\r\n   * モーションのカーブのIDの取得\r\n   * @param curveIndex カーブのインデックス\r\n   * @return カーブのID\r\n   */\r\n  public getMotionCurveId(curveIndex: number): CubismIdHandle {\r\n    return CubismFramework.getIdManager().getId(\r\n      this._json\r\n        .getRoot()\r\n        .getValueByString(Curves)\r\n        .getValueByIndex(curveIndex)\r\n        .getValueByString(Id)\r\n        .getRawString()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * モーションのカーブのフェードイン時間の存在\r\n   * @param curveIndex カーブのインデックス\r\n   * @return true 存在する\r\n   * @return false 存在しない\r\n   */\r\n  public isExistMotionCurveFadeInTime(curveIndex: number): boolean {\r\n    return !this._json\r\n      .getRoot()\r\n      .getValueByString(Curves)\r\n      .getValueByIndex(curveIndex)\r\n      .getValueByString(FadeInTime)\r\n      .isNull();\r\n  }\r\n\r\n  /**\r\n   * モーションのカーブのフェードアウト時間の存在\r\n   * @param curveIndex カーブのインデックス\r\n   * @return true 存在する\r\n   * @return false 存在しない\r\n   */\r\n  public isExistMotionCurveFadeOutTime(curveIndex: number): boolean {\r\n    return !this._json\r\n      .getRoot()\r\n      .getValueByString(Curves)\r\n      .getValueByIndex(curveIndex)\r\n      .getValueByString(FadeOutTime)\r\n      .isNull();\r\n  }\r\n\r\n  /**\r\n   * モーションのカーブのフェードイン時間の取得\r\n   * @param curveIndex カーブのインデックス\r\n   * @return フェードイン時間[秒]\r\n   */\r\n  public getMotionCurveFadeInTime(curveIndex: number): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Curves)\r\n      .getValueByIndex(curveIndex)\r\n      .getValueByString(FadeInTime)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * モーションのカーブのフェードアウト時間の取得\r\n   * @param curveIndex カーブのインデックス\r\n   * @return フェードアウト時間[秒]\r\n   */\r\n  public getMotionCurveFadeOutTime(curveIndex: number): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Curves)\r\n      .getValueByIndex(curveIndex)\r\n      .getValueByString(FadeOutTime)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * モーションのカーブのセグメントの個数を取得する\r\n   * @param curveIndex カーブのインデックス\r\n   * @return モーションのカーブのセグメントの個数\r\n   */\r\n  public getMotionCurveSegmentCount(curveIndex: number): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Curves)\r\n      .getValueByIndex(curveIndex)\r\n      .getValueByString(Segments)\r\n      .getVector()\r\n      .getSize();\r\n  }\r\n\r\n  /**\r\n   * モーションのカーブのセグメントの値の取得\r\n   * @param curveIndex カーブのインデックス\r\n   * @param segmentIndex セグメントのインデックス\r\n   * @return セグメントの値\r\n   */\r\n  public getMotionCurveSegment(\r\n    curveIndex: number,\r\n    segmentIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Curves)\r\n      .getValueByIndex(curveIndex)\r\n      .getValueByString(Segments)\r\n      .getValueByIndex(segmentIndex)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * イベントの個数の取得\r\n   * @return イベントの個数\r\n   */\r\n  public getEventCount(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(UserDataCount)\r\n      .toInt();\r\n  }\r\n\r\n  /**\r\n   *  イベントの総文字数の取得\r\n   * @return イベントの総文字数\r\n   */\r\n  public getTotalEventValueSize(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(TotalUserDataSize)\r\n      .toInt();\r\n  }\r\n\r\n  /**\r\n   * イベントの時間の取得\r\n   * @param userDataIndex イベントのインデックス\r\n   * @return イベントの時間[秒]\r\n   */\r\n  public getEventTime(userDataIndex: number): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(UserData)\r\n      .getValueByIndex(userDataIndex)\r\n      .getValueByString(Time)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * イベントの取得\r\n   * @param userDataIndex イベントのインデックス\r\n   * @return イベントの文字列\r\n   */\r\n  public getEventValue(userDataIndex: number): csmString {\r\n    return new csmString(\r\n      this._json\r\n        .getRoot()\r\n        .getValueByString(UserData)\r\n        .getValueByIndex(userDataIndex)\r\n        .getValueByString(Value)\r\n        .getRawString()\r\n    );\r\n  }\r\n\r\n  _json: CubismJson; // motion3.jsonのデータ\r\n}\r\n\r\n/**\r\n * @brief ベジェカーブの解釈方法のフラグタイプ\r\n */\r\nexport enum EvaluationOptionFlag {\r\n  EvaluationOptionFlag_AreBeziersRistricted = 0, ///< ベジェハンドルの規制状態\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismmotionjson';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismMotionJson = $.CubismMotionJson;\r\n  export type CubismMotionJson = $.CubismMotionJson;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismIdHandle } from '../id/cubismid';\r\nimport { CubismFramework } from '../live2dcubismframework';\r\nimport { CubismMath } from '../math/cubismmath';\r\nimport { CubismModel } from '../model/cubismmodel';\r\nimport { csmString } from '../type/csmstring';\r\nimport { csmVector } from '../type/csmvector';\r\nimport {\r\n  CSM_ASSERT,\r\n  CubismLogDebug,\r\n  CubismLogWarning,\r\n} from '../utils/cubismdebug';\r\nimport { ACubismMotion, FinishedMotionCallback } from './acubismmotion';\r\nimport {\r\n  CubismMotionCurve,\r\n  CubismMotionCurveTarget,\r\n  CubismMotionData,\r\n  CubismMotionEvent,\r\n  CubismMotionPoint,\r\n  CubismMotionSegment,\r\n  CubismMotionSegmentType,\r\n} from './cubismmotioninternal';\r\nimport { CubismMotionJson, EvaluationOptionFlag } from './cubismmotionjson';\r\nimport { CubismMotionQueueEntry } from './cubismmotionqueueentry';\r\n\r\nconst EffectNameEyeBlink = 'EyeBlink';\r\nconst EffectNameLipSync = 'LipSync';\r\nconst TargetNameModel = 'Model';\r\nconst TargetNameParameter = 'Parameter';\r\nconst TargetNamePartOpacity = 'PartOpacity';\r\n\r\n/**\r\n * Cubism SDK R2 以前のモーションを再現させるなら true 、アニメータのモーションを正しく再現するなら false 。\r\n */\r\nconst UseOldBeziersCurveMotion = false;\r\n\r\nfunction lerpPoints(\r\n  a: CubismMotionPoint,\r\n  b: CubismMotionPoint,\r\n  t: number\r\n): CubismMotionPoint {\r\n  const result: CubismMotionPoint = new CubismMotionPoint();\r\n\r\n  result.time = a.time + (b.time - a.time) * t;\r\n  result.value = a.value + (b.value - a.value) * t;\r\n\r\n  return result;\r\n}\r\n\r\nfunction linearEvaluate(points: CubismMotionPoint[], time: number): number {\r\n  let t: number = (time - points[0].time) / (points[1].time - points[0].time);\r\n\r\n  if (t < 0.0) {\r\n    t = 0.0;\r\n  }\r\n\r\n  return points[0].value + (points[1].value - points[0].value) * t;\r\n}\r\n\r\nfunction bezierEvaluate(points: CubismMotionPoint[], time: number): number {\r\n  let t: number = (time - points[0].time) / (points[3].time - points[0].time);\r\n\r\n  if (t < 0.0) {\r\n    t = 0.0;\r\n  }\r\n\r\n  const p01: CubismMotionPoint = lerpPoints(points[0], points[1], t);\r\n  const p12: CubismMotionPoint = lerpPoints(points[1], points[2], t);\r\n  const p23: CubismMotionPoint = lerpPoints(points[2], points[3], t);\r\n\r\n  const p012: CubismMotionPoint = lerpPoints(p01, p12, t);\r\n  const p123: CubismMotionPoint = lerpPoints(p12, p23, t);\r\n\r\n  return lerpPoints(p012, p123, t).value;\r\n}\r\n\r\nfunction bezierEvaluateBinarySearch(\r\n  points: CubismMotionPoint[],\r\n  time: number\r\n): number {\r\n  const x_error = 0.01;\r\n\r\n  const x: number = time;\r\n  let x1: number = points[0].time;\r\n  let x2: number = points[3].time;\r\n  let cx1: number = points[1].time;\r\n  let cx2: number = points[2].time;\r\n\r\n  let ta = 0.0;\r\n  let tb = 1.0;\r\n  let t = 0.0;\r\n  let i = 0;\r\n\r\n  for (let var33 = true; i < 20; ++i) {\r\n    if (x < x1 + x_error) {\r\n      t = ta;\r\n      break;\r\n    }\r\n\r\n    if (x2 - x_error < x) {\r\n      t = tb;\r\n      break;\r\n    }\r\n\r\n    let centerx: number = (cx1 + cx2) * 0.5;\r\n    cx1 = (x1 + cx1) * 0.5;\r\n    cx2 = (x2 + cx2) * 0.5;\r\n    const ctrlx12: number = (cx1 + centerx) * 0.5;\r\n    const ctrlx21: number = (cx2 + centerx) * 0.5;\r\n    centerx = (ctrlx12 + ctrlx21) * 0.5;\r\n    if (x < centerx) {\r\n      tb = (ta + tb) * 0.5;\r\n      if (centerx - x_error < x) {\r\n        t = tb;\r\n        break;\r\n      }\r\n\r\n      x2 = centerx;\r\n      cx2 = ctrlx12;\r\n    } else {\r\n      ta = (ta + tb) * 0.5;\r\n      if (x < centerx + x_error) {\r\n        t = ta;\r\n        break;\r\n      }\r\n\r\n      x1 = centerx;\r\n      cx1 = ctrlx21;\r\n    }\r\n  }\r\n\r\n  if (i == 20) {\r\n    t = (ta + tb) * 0.5;\r\n  }\r\n\r\n  if (t < 0.0) {\r\n    t = 0.0;\r\n  }\r\n  if (t > 1.0) {\r\n    t = 1.0;\r\n  }\r\n\r\n  const p01: CubismMotionPoint = lerpPoints(points[0], points[1], t);\r\n  const p12: CubismMotionPoint = lerpPoints(points[1], points[2], t);\r\n  const p23: CubismMotionPoint = lerpPoints(points[2], points[3], t);\r\n\r\n  const p012: CubismMotionPoint = lerpPoints(p01, p12, t);\r\n  const p123: CubismMotionPoint = lerpPoints(p12, p23, t);\r\n\r\n  return lerpPoints(p012, p123, t).value;\r\n}\r\n\r\nfunction bezierEvaluateCardanoInterpretation(\r\n  points: CubismMotionPoint[],\r\n  time: number\r\n): number {\r\n  const x: number = time;\r\n  const x1: number = points[0].time;\r\n  const x2: number = points[3].time;\r\n  const cx1: number = points[1].time;\r\n  const cx2: number = points[2].time;\r\n\r\n  const a: number = x2 - 3.0 * cx2 + 3.0 * cx1 - x1;\r\n  const b: number = 3.0 * cx2 - 6.0 * cx1 + 3.0 * x1;\r\n  const c: number = 3.0 * cx1 - 3.0 * x1;\r\n  const d: number = x1 - x;\r\n\r\n  const t: number = CubismMath.cardanoAlgorithmForBezier(a, b, c, d);\r\n\r\n  const p01: CubismMotionPoint = lerpPoints(points[0], points[1], t);\r\n  const p12: CubismMotionPoint = lerpPoints(points[1], points[2], t);\r\n  const p23: CubismMotionPoint = lerpPoints(points[2], points[3], t);\r\n\r\n  const p012: CubismMotionPoint = lerpPoints(p01, p12, t);\r\n  const p123: CubismMotionPoint = lerpPoints(p12, p23, t);\r\n\r\n  return lerpPoints(p012, p123, t).value;\r\n}\r\n\r\nfunction steppedEvaluate(points: CubismMotionPoint[], time: number): number {\r\n  return points[0].value;\r\n}\r\n\r\nfunction inverseSteppedEvaluate(\r\n  points: CubismMotionPoint[],\r\n  time: number\r\n): number {\r\n  return points[1].value;\r\n}\r\n\r\nfunction evaluateCurve(\r\n  motionData: CubismMotionData,\r\n  index: number,\r\n  time: number\r\n): number {\r\n  // Find segment to evaluate.\r\n  const curve: CubismMotionCurve = motionData.curves.at(index);\r\n\r\n  let target = -1;\r\n  const totalSegmentCount: number = curve.baseSegmentIndex + curve.segmentCount;\r\n  let pointPosition = 0;\r\n  for (let i: number = curve.baseSegmentIndex; i < totalSegmentCount; ++i) {\r\n    // Get first point of next segment.\r\n    pointPosition =\r\n      motionData.segments.at(i).basePointIndex +\r\n      (motionData.segments.at(i).segmentType ==\r\n      CubismMotionSegmentType.CubismMotionSegmentType_Bezier\r\n        ? 3\r\n        : 1);\r\n\r\n    // Break if time lies within current segment.\r\n    if (motionData.points.at(pointPosition).time > time) {\r\n      target = i;\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (target == -1) {\r\n    return motionData.points.at(pointPosition).value;\r\n  }\r\n\r\n  const segment: CubismMotionSegment = motionData.segments.at(target);\r\n\r\n  return segment.evaluate(motionData.points.get(segment.basePointIndex), time);\r\n}\r\n\r\n/**\r\n * モーションクラス\r\n *\r\n * モーションのクラス。\r\n */\r\nexport class CubismMotion extends ACubismMotion {\r\n  /**\r\n   * インスタンスを作成する\r\n   *\r\n   * @param buffer motion3.jsonが読み込まれているバッファ\r\n   * @param size バッファのサイズ\r\n   * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\r\n   * @return 作成されたインスタンス\r\n   */\r\n  public static create(\r\n    buffer: ArrayBuffer,\r\n    size: number,\r\n    onFinishedMotionHandler?: FinishedMotionCallback\r\n  ): CubismMotion {\r\n    const ret = new CubismMotion();\r\n\r\n    ret.parse(buffer, size);\r\n    ret._sourceFrameRate = ret._motionData.fps;\r\n    ret._loopDurationSeconds = ret._motionData.duration;\r\n    ret._onFinishedMotion = onFinishedMotionHandler;\r\n\r\n    // NOTE: Editorではループありのモーション書き出しは非対応\r\n    // ret->_loop = (ret->_motionData->Loop > 0);\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * モデルのパラメータの更新の実行\r\n   * @param model             対象のモデル\r\n   * @param userTimeSeconds   現在の時刻[秒]\r\n   * @param fadeWeight        モーションの重み\r\n   * @param motionQueueEntry  CubismMotionQueueManagerで管理されているモーション\r\n   */\r\n  public doUpdateParameters(\r\n    model: CubismModel,\r\n    userTimeSeconds: number,\r\n    fadeWeight: number,\r\n    motionQueueEntry: CubismMotionQueueEntry\r\n  ): void {\r\n    if (this._modelCurveIdEyeBlink == null) {\r\n      this._modelCurveIdEyeBlink =\r\n        CubismFramework.getIdManager().getId(EffectNameEyeBlink);\r\n    }\r\n\r\n    if (this._modelCurveIdLipSync == null) {\r\n      this._modelCurveIdLipSync =\r\n        CubismFramework.getIdManager().getId(EffectNameLipSync);\r\n    }\r\n\r\n    let timeOffsetSeconds: number =\r\n      userTimeSeconds - motionQueueEntry.getStartTime();\r\n\r\n    if (timeOffsetSeconds < 0.0) {\r\n      timeOffsetSeconds = 0.0; // エラー回避\r\n    }\r\n\r\n    let lipSyncValue: number = Number.MAX_VALUE;\r\n    let eyeBlinkValue: number = Number.MAX_VALUE;\r\n\r\n    //まばたき、リップシンクのうちモーションの適用を検出するためのビット（maxFlagCount個まで\r\n    const MaxTargetSize = 64;\r\n    let lipSyncFlags = 0;\r\n    let eyeBlinkFlags = 0;\r\n\r\n    //瞬き、リップシンクのターゲット数が上限を超えている場合\r\n    if (this._eyeBlinkParameterIds.getSize() > MaxTargetSize) {\r\n      CubismLogDebug(\r\n        'too many eye blink targets : {0}',\r\n        this._eyeBlinkParameterIds.getSize()\r\n      );\r\n    }\r\n    if (this._lipSyncParameterIds.getSize() > MaxTargetSize) {\r\n      CubismLogDebug(\r\n        'too many lip sync targets : {0}',\r\n        this._lipSyncParameterIds.getSize()\r\n      );\r\n    }\r\n\r\n    const tmpFadeIn: number =\r\n      this._fadeInSeconds <= 0.0\r\n        ? 1.0\r\n        : CubismMath.getEasingSine(\r\n            (userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /\r\n              this._fadeInSeconds\r\n          );\r\n\r\n    const tmpFadeOut: number =\r\n      this._fadeOutSeconds <= 0.0 || motionQueueEntry.getEndTime() < 0.0\r\n        ? 1.0\r\n        : CubismMath.getEasingSine(\r\n            (motionQueueEntry.getEndTime() - userTimeSeconds) /\r\n              this._fadeOutSeconds\r\n          );\r\n    let value: number;\r\n    let c: number, parameterIndex: number;\r\n\r\n    // 'Repeat' time as necessary.\r\n    let time: number = timeOffsetSeconds;\r\n\r\n    if (this._isLoop) {\r\n      while (time > this._motionData.duration) {\r\n        time -= this._motionData.duration;\r\n      }\r\n    }\r\n\r\n    const curves: csmVector<CubismMotionCurve> = this._motionData.curves;\r\n\r\n    // Evaluate model curves.\r\n    for (\r\n      c = 0;\r\n      c < this._motionData.curveCount &&\r\n      curves.at(c).type ==\r\n        CubismMotionCurveTarget.CubismMotionCurveTarget_Model;\r\n      ++c\r\n    ) {\r\n      // Evaluate curve and call handler.\r\n      value = evaluateCurve(this._motionData, c, time);\r\n\r\n      if (curves.at(c).id == this._modelCurveIdEyeBlink) {\r\n        eyeBlinkValue = value;\r\n      } else if (curves.at(c).id == this._modelCurveIdLipSync) {\r\n        lipSyncValue = value;\r\n      }\r\n    }\r\n\r\n    let parameterMotionCurveCount = 0;\r\n\r\n    for (\r\n      ;\r\n      c < this._motionData.curveCount &&\r\n      curves.at(c).type ==\r\n        CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter;\r\n      ++c\r\n    ) {\r\n      parameterMotionCurveCount++;\r\n\r\n      // Find parameter index.\r\n      parameterIndex = model.getParameterIndex(curves.at(c).id);\r\n\r\n      // Skip curve evaluation if no value in sink.\r\n      if (parameterIndex == -1) {\r\n        continue;\r\n      }\r\n\r\n      const sourceValue: number =\r\n        model.getParameterValueByIndex(parameterIndex);\r\n\r\n      // Evaluate curve and apply value.\r\n      value = evaluateCurve(this._motionData, c, time);\r\n\r\n      if (eyeBlinkValue != Number.MAX_VALUE) {\r\n        for (\r\n          let i = 0;\r\n          i < this._eyeBlinkParameterIds.getSize() && i < MaxTargetSize;\r\n          ++i\r\n        ) {\r\n          if (this._eyeBlinkParameterIds.at(i) == curves.at(c).id) {\r\n            value *= eyeBlinkValue;\r\n            eyeBlinkFlags |= 1 << i;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (lipSyncValue != Number.MAX_VALUE) {\r\n        for (\r\n          let i = 0;\r\n          i < this._lipSyncParameterIds.getSize() && i < MaxTargetSize;\r\n          ++i\r\n        ) {\r\n          if (this._lipSyncParameterIds.at(i) == curves.at(c).id) {\r\n            value += lipSyncValue;\r\n            lipSyncFlags |= 1 << i;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      let v: number;\r\n\r\n      // パラメータごとのフェード\r\n      if (curves.at(c).fadeInTime < 0.0 && curves.at(c).fadeOutTime < 0.0) {\r\n        // モーションのフェードを適用\r\n        v = sourceValue + (value - sourceValue) * fadeWeight;\r\n      } else {\r\n        // パラメータに対してフェードインかフェードアウトが設定してある場合はそちらを適用\r\n        let fin: number;\r\n        let fout: number;\r\n\r\n        if (curves.at(c).fadeInTime < 0.0) {\r\n          fin = tmpFadeIn;\r\n        } else {\r\n          fin =\r\n            curves.at(c).fadeInTime == 0.0\r\n              ? 1.0\r\n              : CubismMath.getEasingSine(\r\n                  (userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /\r\n                    curves.at(c).fadeInTime\r\n                );\r\n        }\r\n\r\n        if (curves.at(c).fadeOutTime < 0.0) {\r\n          fout = tmpFadeOut;\r\n        } else {\r\n          fout =\r\n            curves.at(c).fadeOutTime == 0.0 ||\r\n            motionQueueEntry.getEndTime() < 0.0\r\n              ? 1.0\r\n              : CubismMath.getEasingSine(\r\n                  (motionQueueEntry.getEndTime() - userTimeSeconds) /\r\n                    curves.at(c).fadeOutTime\r\n                );\r\n        }\r\n\r\n        const paramWeight: number = this._weight * fin * fout;\r\n\r\n        // パラメータごとのフェードを適用\r\n        v = sourceValue + (value - sourceValue) * paramWeight;\r\n      }\r\n\r\n      model.setParameterValueByIndex(parameterIndex, v, 1.0);\r\n    }\r\n\r\n    {\r\n      if (eyeBlinkValue != Number.MAX_VALUE) {\r\n        for (\r\n          let i = 0;\r\n          i < this._eyeBlinkParameterIds.getSize() && i < MaxTargetSize;\r\n          ++i\r\n        ) {\r\n          const sourceValue: number = model.getParameterValueById(\r\n            this._eyeBlinkParameterIds.at(i)\r\n          );\r\n\r\n          // モーションでの上書きがあった時にはまばたきは適用しない\r\n          if ((eyeBlinkFlags >> i) & 0x01) {\r\n            continue;\r\n          }\r\n\r\n          const v: number =\r\n            sourceValue + (eyeBlinkValue - sourceValue) * fadeWeight;\r\n\r\n          model.setParameterValueById(this._eyeBlinkParameterIds.at(i), v);\r\n        }\r\n      }\r\n\r\n      if (lipSyncValue != Number.MAX_VALUE) {\r\n        for (\r\n          let i = 0;\r\n          i < this._lipSyncParameterIds.getSize() && i < MaxTargetSize;\r\n          ++i\r\n        ) {\r\n          const sourceValue: number = model.getParameterValueById(\r\n            this._lipSyncParameterIds.at(i)\r\n          );\r\n\r\n          // モーションでの上書きがあった時にはリップシンクは適用しない\r\n          if ((lipSyncFlags >> i) & 0x01) {\r\n            continue;\r\n          }\r\n\r\n          const v: number =\r\n            sourceValue + (lipSyncValue - sourceValue) * fadeWeight;\r\n\r\n          model.setParameterValueById(this._lipSyncParameterIds.at(i), v);\r\n        }\r\n      }\r\n    }\r\n\r\n    for (\r\n      ;\r\n      c < this._motionData.curveCount &&\r\n      curves.at(c).type ==\r\n        CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity;\r\n      ++c\r\n    ) {\r\n      // Find parameter index.\r\n      parameterIndex = model.getParameterIndex(curves.at(c).id);\r\n\r\n      // Skip curve evaluation if no value in sink.\r\n      if (parameterIndex == -1) {\r\n        continue;\r\n      }\r\n\r\n      // Evaluate curve and apply value.\r\n      value = evaluateCurve(this._motionData, c, time);\r\n\r\n      model.setParameterValueByIndex(parameterIndex, value);\r\n    }\r\n\r\n    if (timeOffsetSeconds >= this._motionData.duration) {\r\n      if (this._isLoop) {\r\n        motionQueueEntry.setStartTime(userTimeSeconds); // 最初の状態へ\r\n        if (this._isLoopFadeIn) {\r\n          // ループ内でループ用フェードインが有効の時は、フェードイン設定し直し\r\n          motionQueueEntry.setFadeInStartTime(userTimeSeconds);\r\n        }\r\n      } else {\r\n        if (this._onFinishedMotion) {\r\n          this._onFinishedMotion(this);\r\n        }\r\n\r\n        motionQueueEntry.setIsFinished(true);\r\n      }\r\n    }\r\n    this._lastWeight = fadeWeight;\r\n  }\r\n\r\n  /**\r\n   * ループ情報の設定\r\n   * @param loop ループ情報\r\n   */\r\n  public setIsLoop(loop: boolean): void {\r\n    this._isLoop = loop;\r\n  }\r\n\r\n  /**\r\n   * ループ情報の取得\r\n   * @return true ループする\r\n   * @return false ループしない\r\n   */\r\n  public isLoop(): boolean {\r\n    return this._isLoop;\r\n  }\r\n\r\n  /**\r\n   * ループ時のフェードイン情報の設定\r\n   * @param loopFadeIn  ループ時のフェードイン情報\r\n   */\r\n  public setIsLoopFadeIn(loopFadeIn: boolean): void {\r\n    this._isLoopFadeIn = loopFadeIn;\r\n  }\r\n\r\n  /**\r\n   * ループ時のフェードイン情報の取得\r\n   *\r\n   * @return  true    する\r\n   * @return  false   しない\r\n   */\r\n  public isLoopFadeIn(): boolean {\r\n    return this._isLoopFadeIn;\r\n  }\r\n\r\n  /**\r\n   * モーションの長さを取得する。\r\n   *\r\n   * @return  モーションの長さ[秒]\r\n   */\r\n  public getDuration(): number {\r\n    return this._isLoop ? -1.0 : this._loopDurationSeconds;\r\n  }\r\n\r\n  /**\r\n   * モーションのループ時の長さを取得する。\r\n   *\r\n   * @return  モーションのループ時の長さ[秒]\r\n   */\r\n  public getLoopDuration(): number {\r\n    return this._loopDurationSeconds;\r\n  }\r\n\r\n  /**\r\n   * パラメータに対するフェードインの時間を設定する。\r\n   *\r\n   * @param parameterId     パラメータID\r\n   * @param value           フェードインにかかる時間[秒]\r\n   */\r\n  public setParameterFadeInTime(\r\n    parameterId: CubismIdHandle,\r\n    value: number\r\n  ): void {\r\n    const curves: csmVector<CubismMotionCurve> = this._motionData.curves;\r\n\r\n    for (let i = 0; i < this._motionData.curveCount; ++i) {\r\n      if (parameterId == curves.at(i).id) {\r\n        curves.at(i).fadeInTime = value;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * パラメータに対するフェードアウトの時間の設定\r\n   * @param parameterId     パラメータID\r\n   * @param value           フェードアウトにかかる時間[秒]\r\n   */\r\n  public setParameterFadeOutTime(\r\n    parameterId: CubismIdHandle,\r\n    value: number\r\n  ): void {\r\n    const curves: csmVector<CubismMotionCurve> = this._motionData.curves;\r\n\r\n    for (let i = 0; i < this._motionData.curveCount; ++i) {\r\n      if (parameterId == curves.at(i).id) {\r\n        curves.at(i).fadeOutTime = value;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * パラメータに対するフェードインの時間の取得\r\n   * @param    parameterId     パラメータID\r\n   * @return   フェードインにかかる時間[秒]\r\n   */\r\n  public getParameterFadeInTime(parameterId: CubismIdHandle): number {\r\n    const curves: csmVector<CubismMotionCurve> = this._motionData.curves;\r\n\r\n    for (let i = 0; i < this._motionData.curveCount; ++i) {\r\n      if (parameterId == curves.at(i).id) {\r\n        return curves.at(i).fadeInTime;\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * パラメータに対するフェードアウトの時間を取得\r\n   *\r\n   * @param   parameterId     パラメータID\r\n   * @return   フェードアウトにかかる時間[秒]\r\n   */\r\n  public getParameterFadeOutTime(parameterId: CubismIdHandle): number {\r\n    const curves: csmVector<CubismMotionCurve> = this._motionData.curves;\r\n\r\n    for (let i = 0; i < this._motionData.curveCount; ++i) {\r\n      if (parameterId == curves.at(i).id) {\r\n        return curves.at(i).fadeOutTime;\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * 自動エフェクトがかかっているパラメータIDリストの設定\r\n   * @param eyeBlinkParameterIds    自動まばたきがかかっているパラメータIDのリスト\r\n   * @param lipSyncParameterIds     リップシンクがかかっているパラメータIDのリスト\r\n   */\r\n  public setEffectIds(\r\n    eyeBlinkParameterIds: csmVector<CubismIdHandle>,\r\n    lipSyncParameterIds: csmVector<CubismIdHandle>\r\n  ): void {\r\n    this._eyeBlinkParameterIds = eyeBlinkParameterIds;\r\n    this._lipSyncParameterIds = lipSyncParameterIds;\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    super();\r\n    this._sourceFrameRate = 30.0;\r\n    this._loopDurationSeconds = -1.0;\r\n    this._isLoop = false; // trueから false へデフォルトを変更\r\n    this._isLoopFadeIn = true; // ループ時にフェードインが有効かどうかのフラグ\r\n    this._lastWeight = 0.0;\r\n    this._motionData = null;\r\n    this._modelCurveIdEyeBlink = null;\r\n    this._modelCurveIdLipSync = null;\r\n    this._eyeBlinkParameterIds = null;\r\n    this._lipSyncParameterIds = null;\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    this._motionData = void 0;\r\n    this._motionData = null;\r\n  }\r\n\r\n  /**\r\n   * motion3.jsonをパースする。\r\n   *\r\n   * @param motionJson  motion3.jsonが読み込まれているバッファ\r\n   * @param size        バッファのサイズ\r\n   */\r\n  public parse(motionJson: ArrayBuffer, size: number): void {\r\n    this._motionData = new CubismMotionData();\r\n\r\n    let json: CubismMotionJson = new CubismMotionJson(motionJson, size);\r\n\r\n    this._motionData.duration = json.getMotionDuration();\r\n    this._motionData.loop = json.isMotionLoop();\r\n    this._motionData.curveCount = json.getMotionCurveCount();\r\n    this._motionData.fps = json.getMotionFps();\r\n    this._motionData.eventCount = json.getEventCount();\r\n\r\n    const areBeziersRestructed: boolean = json.getEvaluationOptionFlag(\r\n      EvaluationOptionFlag.EvaluationOptionFlag_AreBeziersRistricted\r\n    );\r\n\r\n    if (json.isExistMotionFadeInTime()) {\r\n      this._fadeInSeconds =\r\n        json.getMotionFadeInTime() < 0.0 ? 1.0 : json.getMotionFadeInTime();\r\n    } else {\r\n      this._fadeInSeconds = 1.0;\r\n    }\r\n\r\n    if (json.isExistMotionFadeOutTime()) {\r\n      this._fadeOutSeconds =\r\n        json.getMotionFadeOutTime() < 0.0 ? 1.0 : json.getMotionFadeOutTime();\r\n    } else {\r\n      this._fadeOutSeconds = 1.0;\r\n    }\r\n\r\n    this._motionData.curves.updateSize(\r\n      this._motionData.curveCount,\r\n      CubismMotionCurve,\r\n      true\r\n    );\r\n    this._motionData.segments.updateSize(\r\n      json.getMotionTotalSegmentCount(),\r\n      CubismMotionSegment,\r\n      true\r\n    );\r\n    this._motionData.points.updateSize(\r\n      json.getMotionTotalPointCount(),\r\n      CubismMotionPoint,\r\n      true\r\n    );\r\n    this._motionData.events.updateSize(\r\n      this._motionData.eventCount,\r\n      CubismMotionEvent,\r\n      true\r\n    );\r\n\r\n    let totalPointCount = 0;\r\n    let totalSegmentCount = 0;\r\n\r\n    // Curves\r\n    for (\r\n      let curveCount = 0;\r\n      curveCount < this._motionData.curveCount;\r\n      ++curveCount\r\n    ) {\r\n      if (json.getMotionCurveTarget(curveCount) == TargetNameModel) {\r\n        this._motionData.curves.at(curveCount).type =\r\n          CubismMotionCurveTarget.CubismMotionCurveTarget_Model;\r\n      } else if (json.getMotionCurveTarget(curveCount) == TargetNameParameter) {\r\n        this._motionData.curves.at(curveCount).type =\r\n          CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter;\r\n      } else if (\r\n        json.getMotionCurveTarget(curveCount) == TargetNamePartOpacity\r\n      ) {\r\n        this._motionData.curves.at(curveCount).type =\r\n          CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity;\r\n      } else {\r\n        CubismLogWarning(\r\n          'Warning : Unable to get segment type from Curve! The number of \"CurveCount\" may be incorrect!'\r\n        );\r\n      }\r\n\r\n      this._motionData.curves.at(curveCount).id =\r\n        json.getMotionCurveId(curveCount);\r\n\r\n      this._motionData.curves.at(curveCount).baseSegmentIndex =\r\n        totalSegmentCount;\r\n\r\n      this._motionData.curves.at(curveCount).fadeInTime =\r\n        json.isExistMotionCurveFadeInTime(curveCount)\r\n          ? json.getMotionCurveFadeInTime(curveCount)\r\n          : -1.0;\r\n      this._motionData.curves.at(curveCount).fadeOutTime =\r\n        json.isExistMotionCurveFadeOutTime(curveCount)\r\n          ? json.getMotionCurveFadeOutTime(curveCount)\r\n          : -1.0;\r\n\r\n      // Segments\r\n      for (\r\n        let segmentPosition = 0;\r\n        segmentPosition < json.getMotionCurveSegmentCount(curveCount);\r\n\r\n      ) {\r\n        if (segmentPosition == 0) {\r\n          this._motionData.segments.at(totalSegmentCount).basePointIndex =\r\n            totalPointCount;\r\n\r\n          this._motionData.points.at(totalPointCount).time =\r\n            json.getMotionCurveSegment(curveCount, segmentPosition);\r\n          this._motionData.points.at(totalPointCount).value =\r\n            json.getMotionCurveSegment(curveCount, segmentPosition + 1);\r\n\r\n          totalPointCount += 1;\r\n          segmentPosition += 2;\r\n        } else {\r\n          this._motionData.segments.at(totalSegmentCount).basePointIndex =\r\n            totalPointCount - 1;\r\n        }\r\n\r\n        const segment: number = json.getMotionCurveSegment(\r\n          curveCount,\r\n          segmentPosition\r\n        );\r\n        switch (segment) {\r\n          case CubismMotionSegmentType.CubismMotionSegmentType_Linear: {\r\n            this._motionData.segments.at(totalSegmentCount).segmentType =\r\n              CubismMotionSegmentType.CubismMotionSegmentType_Linear;\r\n            this._motionData.segments.at(totalSegmentCount).evaluate =\r\n              linearEvaluate;\r\n\r\n            this._motionData.points.at(totalPointCount).time =\r\n              json.getMotionCurveSegment(curveCount, segmentPosition + 1);\r\n            this._motionData.points.at(totalPointCount).value =\r\n              json.getMotionCurveSegment(curveCount, segmentPosition + 2);\r\n\r\n            totalPointCount += 1;\r\n            segmentPosition += 3;\r\n\r\n            break;\r\n          }\r\n          case CubismMotionSegmentType.CubismMotionSegmentType_Bezier: {\r\n            this._motionData.segments.at(totalSegmentCount).segmentType =\r\n              CubismMotionSegmentType.CubismMotionSegmentType_Bezier;\r\n\r\n            if (areBeziersRestructed || UseOldBeziersCurveMotion) {\r\n              this._motionData.segments.at(totalSegmentCount).evaluate =\r\n                bezierEvaluate;\r\n            } else {\r\n              this._motionData.segments.at(totalSegmentCount).evaluate =\r\n                bezierEvaluateCardanoInterpretation;\r\n            }\r\n\r\n            this._motionData.points.at(totalPointCount).time =\r\n              json.getMotionCurveSegment(curveCount, segmentPosition + 1);\r\n            this._motionData.points.at(totalPointCount).value =\r\n              json.getMotionCurveSegment(curveCount, segmentPosition + 2);\r\n\r\n            this._motionData.points.at(totalPointCount + 1).time =\r\n              json.getMotionCurveSegment(curveCount, segmentPosition + 3);\r\n            this._motionData.points.at(totalPointCount + 1).value =\r\n              json.getMotionCurveSegment(curveCount, segmentPosition + 4);\r\n\r\n            this._motionData.points.at(totalPointCount + 2).time =\r\n              json.getMotionCurveSegment(curveCount, segmentPosition + 5);\r\n            this._motionData.points.at(totalPointCount + 2).value =\r\n              json.getMotionCurveSegment(curveCount, segmentPosition + 6);\r\n\r\n            totalPointCount += 3;\r\n            segmentPosition += 7;\r\n\r\n            break;\r\n          }\r\n\r\n          case CubismMotionSegmentType.CubismMotionSegmentType_Stepped: {\r\n            this._motionData.segments.at(totalSegmentCount).segmentType =\r\n              CubismMotionSegmentType.CubismMotionSegmentType_Stepped;\r\n            this._motionData.segments.at(totalSegmentCount).evaluate =\r\n              steppedEvaluate;\r\n\r\n            this._motionData.points.at(totalPointCount).time =\r\n              json.getMotionCurveSegment(curveCount, segmentPosition + 1);\r\n            this._motionData.points.at(totalPointCount).value =\r\n              json.getMotionCurveSegment(curveCount, segmentPosition + 2);\r\n\r\n            totalPointCount += 1;\r\n            segmentPosition += 3;\r\n\r\n            break;\r\n          }\r\n\r\n          case CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped: {\r\n            this._motionData.segments.at(totalSegmentCount).segmentType =\r\n              CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped;\r\n            this._motionData.segments.at(totalSegmentCount).evaluate =\r\n              inverseSteppedEvaluate;\r\n\r\n            this._motionData.points.at(totalPointCount).time =\r\n              json.getMotionCurveSegment(curveCount, segmentPosition + 1);\r\n            this._motionData.points.at(totalPointCount).value =\r\n              json.getMotionCurveSegment(curveCount, segmentPosition + 2);\r\n\r\n            totalPointCount += 1;\r\n            segmentPosition += 3;\r\n\r\n            break;\r\n          }\r\n          default: {\r\n            CSM_ASSERT(0);\r\n            break;\r\n          }\r\n        }\r\n\r\n        ++this._motionData.curves.at(curveCount).segmentCount;\r\n        ++totalSegmentCount;\r\n      }\r\n    }\r\n\r\n    for (\r\n      let userdatacount = 0;\r\n      userdatacount < json.getEventCount();\r\n      ++userdatacount\r\n    ) {\r\n      this._motionData.events.at(userdatacount).fireTime =\r\n        json.getEventTime(userdatacount);\r\n      this._motionData.events.at(userdatacount).value =\r\n        json.getEventValue(userdatacount);\r\n    }\r\n\r\n    json.release();\r\n    json = void 0;\r\n    json = null;\r\n  }\r\n\r\n  /**\r\n   * モデルのパラメータ更新\r\n   *\r\n   * イベント発火のチェック。\r\n   * 入力する時間は呼ばれるモーションタイミングを０とした秒数で行う。\r\n   *\r\n   * @param beforeCheckTimeSeconds   前回のイベントチェック時間[秒]\r\n   * @param motionTimeSeconds        今回の再生時間[秒]\r\n   */\r\n  public getFiredEvent(\r\n    beforeCheckTimeSeconds: number,\r\n    motionTimeSeconds: number\r\n  ): csmVector<csmString> {\r\n    this._firedEventValues.updateSize(0);\r\n\r\n    // イベントの発火チェック\r\n    for (let u = 0; u < this._motionData.eventCount; ++u) {\r\n      if (\r\n        this._motionData.events.at(u).fireTime > beforeCheckTimeSeconds &&\r\n        this._motionData.events.at(u).fireTime <= motionTimeSeconds\r\n      ) {\r\n        this._firedEventValues.pushBack(\r\n          new csmString(this._motionData.events.at(u).value.s)\r\n        );\r\n      }\r\n    }\r\n\r\n    return this._firedEventValues;\r\n  }\r\n\r\n  public _sourceFrameRate: number; // ロードしたファイルのFPS。記述が無ければデフォルト値15fpsとなる\r\n  public _loopDurationSeconds: number; // mtnファイルで定義される一連のモーションの長さ\r\n  public _isLoop: boolean; // ループするか?\r\n  public _isLoopFadeIn: boolean; // ループ時にフェードインが有効かどうかのフラグ。初期値では有効。\r\n  public _lastWeight: number; // 最後に設定された重み\r\n\r\n  public _motionData: CubismMotionData; // 実際のモーションデータ本体\r\n\r\n  public _eyeBlinkParameterIds: csmVector<CubismIdHandle>; // 自動まばたきを適用するパラメータIDハンドルのリスト。  モデル（モデルセッティング）とパラメータを対応付ける。\r\n  public _lipSyncParameterIds: csmVector<CubismIdHandle>; // リップシンクを適用するパラメータIDハンドルのリスト。  モデル（モデルセッティング）とパラメータを対応付ける。\r\n\r\n  public _modelCurveIdEyeBlink: CubismIdHandle; // モデルが持つ自動まばたき用パラメータIDのハンドル。  モデルとモーションを対応付ける。\r\n  public _modelCurveIdLipSync: CubismIdHandle; // モデルが持つリップシンク用パラメータIDのハンドル。  モデルとモーションを対応付ける。\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismmotion';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismMotion = $.CubismMotion;\r\n  export type CubismMotion = $.CubismMotion;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { ACubismMotion } from './acubismmotion';\r\nimport { CubismMotionQueueEntryHandle } from './cubismmotionqueuemanager';\r\n\r\n/**\r\n * CubismMotionQueueManagerで再生している各モーションの管理クラス。\r\n */\r\nexport class CubismMotionQueueEntry {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    this._autoDelete = false;\r\n    this._motion = null;\r\n    this._available = true;\r\n    this._finished = false;\r\n    this._started = false;\r\n    this._startTimeSeconds = -1.0;\r\n    this._fadeInStartTimeSeconds = 0.0;\r\n    this._endTimeSeconds = -1.0;\r\n    this._stateTimeSeconds = 0.0;\r\n    this._stateWeight = 0.0;\r\n    this._lastEventCheckSeconds = 0.0;\r\n    this._motionQueueEntryHandle = this;\r\n    this._fadeOutSeconds = 0.0;\r\n    this._isTriggeredFadeOut = false;\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    if (this._autoDelete && this._motion) {\r\n      ACubismMotion.delete(this._motion); //\r\n    }\r\n  }\r\n\r\n  /**\r\n   * フェードアウト時間と開始判定の設定\r\n   * @param fadeOutSeconds フェードアウトにかかる時間[秒]\r\n   */\r\n  public setFadeOut(fadeOutSeconds: number): void {\r\n    this._fadeOutSeconds = fadeOutSeconds;\r\n    this._isTriggeredFadeOut = true;\r\n  }\r\n\r\n  /**\r\n   * フェードアウトの開始\r\n   * @param fadeOutSeconds フェードアウトにかかる時間[秒]\r\n   * @param userTimeSeconds デルタ時間の積算値[秒]\r\n   */\r\n  public startFadeOut(fadeOutSeconds: number, userTimeSeconds: number): void {\r\n    const newEndTimeSeconds: number = userTimeSeconds + fadeOutSeconds;\r\n    this._isTriggeredFadeOut = true;\r\n\r\n    if (\r\n      this._endTimeSeconds < 0.0 ||\r\n      newEndTimeSeconds < this._endTimeSeconds\r\n    ) {\r\n      this._endTimeSeconds = newEndTimeSeconds;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * モーションの終了の確認\r\n   *\r\n   * @return true モーションが終了した\r\n   * @return false 終了していない\r\n   */\r\n  public isFinished(): boolean {\r\n    return this._finished;\r\n  }\r\n\r\n  /**\r\n   * モーションの開始の確認\r\n   * @return true モーションが開始した\r\n   * @return false 開始していない\r\n   */\r\n  public isStarted(): boolean {\r\n    return this._started;\r\n  }\r\n\r\n  /**\r\n   * モーションの開始時刻の取得\r\n   * @return モーションの開始時刻[秒]\r\n   */\r\n  public getStartTime(): number {\r\n    return this._startTimeSeconds;\r\n  }\r\n\r\n  /**\r\n   * フェードインの開始時刻の取得\r\n   * @return フェードインの開始時刻[秒]\r\n   */\r\n  public getFadeInStartTime(): number {\r\n    return this._fadeInStartTimeSeconds;\r\n  }\r\n\r\n  /**\r\n   * フェードインの終了時刻の取得\r\n   * @return フェードインの終了時刻の取得\r\n   */\r\n  public getEndTime(): number {\r\n    return this._endTimeSeconds;\r\n  }\r\n\r\n  /**\r\n   * モーションの開始時刻の設定\r\n   * @param startTime モーションの開始時刻\r\n   */\r\n  public setStartTime(startTime: number): void {\r\n    this._startTimeSeconds = startTime;\r\n  }\r\n\r\n  /**\r\n   * フェードインの開始時刻の設定\r\n   * @param startTime フェードインの開始時刻[秒]\r\n   */\r\n  public setFadeInStartTime(startTime: number): void {\r\n    this._fadeInStartTimeSeconds = startTime;\r\n  }\r\n\r\n  /**\r\n   * フェードインの終了時刻の設定\r\n   * @param endTime フェードインの終了時刻[秒]\r\n   */\r\n  public setEndTime(endTime: number): void {\r\n    this._endTimeSeconds = endTime;\r\n  }\r\n\r\n  /**\r\n   * モーションの終了の設定\r\n   * @param f trueならモーションの終了\r\n   */\r\n  public setIsFinished(f: boolean): void {\r\n    this._finished = f;\r\n  }\r\n\r\n  /**\r\n   * モーション開始の設定\r\n   * @param f trueならモーションの開始\r\n   */\r\n  public setIsStarted(f: boolean): void {\r\n    this._started = f;\r\n  }\r\n\r\n  /**\r\n   * モーションの有効性の確認\r\n   * @return true モーションは有効\r\n   * @return false モーションは無効\r\n   */\r\n  public isAvailable(): boolean {\r\n    return this._available;\r\n  }\r\n\r\n  /**\r\n   * モーションの有効性の設定\r\n   * @param v trueならモーションは有効\r\n   */\r\n  public setIsAvailable(v: boolean): void {\r\n    this._available = v;\r\n  }\r\n\r\n  /**\r\n   * モーションの状態の設定\r\n   * @param timeSeconds 現在時刻[秒]\r\n   * @param weight モーション尾重み\r\n   */\r\n  public setState(timeSeconds: number, weight: number): void {\r\n    this._stateTimeSeconds = timeSeconds;\r\n    this._stateWeight = weight;\r\n  }\r\n\r\n  /**\r\n   * モーションの現在時刻の取得\r\n   * @return モーションの現在時刻[秒]\r\n   */\r\n  public getStateTime(): number {\r\n    return this._stateTimeSeconds;\r\n  }\r\n\r\n  /**\r\n   * モーションの重みの取得\r\n   * @return モーションの重み\r\n   */\r\n  public getStateWeight(): number {\r\n    return this._stateWeight;\r\n  }\r\n\r\n  /**\r\n   * 最後にイベントの発火をチェックした時間を取得\r\n   *\r\n   * @return 最後にイベントの発火をチェックした時間[秒]\r\n   */\r\n  public getLastCheckEventSeconds(): number {\r\n    return this._lastEventCheckSeconds;\r\n  }\r\n\r\n  /**\r\n   * 最後にイベントをチェックした時間を設定\r\n   * @param checkSeconds 最後にイベントをチェックした時間[秒]\r\n   */\r\n  public setLastCheckEventSeconds(checkSeconds: number): void {\r\n    this._lastEventCheckSeconds = checkSeconds;\r\n  }\r\n\r\n  /**\r\n   * フェードアウト開始判定の取得\r\n   * @return フェードアウト開始するかどうか\r\n   */\r\n  public isTriggeredFadeOut(): boolean {\r\n    return this._isTriggeredFadeOut;\r\n  }\r\n\r\n  /**\r\n   * フェードアウト時間の取得\r\n   * @return フェードアウト時間[秒]\r\n   */\r\n  public getFadeOutSeconds(): number {\r\n    return this._fadeOutSeconds;\r\n  }\r\n\r\n  _autoDelete: boolean; // 自動削除\r\n  _motion: ACubismMotion; // モーション\r\n\r\n  _available: boolean; // 有効化フラグ\r\n  _finished: boolean; // 終了フラグ\r\n  _started: boolean; // 開始フラグ\r\n  _startTimeSeconds: number; // モーション再生開始時刻[秒]\r\n  _fadeInStartTimeSeconds: number; // フェードイン開始時刻（ループの時は初回のみ）[秒]\r\n  _endTimeSeconds: number; // 終了予定時刻[秒]\r\n  _stateTimeSeconds: number; // 時刻の状態[秒]\r\n  _stateWeight: number; // 重みの状態\r\n  _lastEventCheckSeconds: number; // 最終のMotion側のチェックした時間\r\n  private _fadeOutSeconds: number; // フェードアウト時間[秒]\r\n  private _isTriggeredFadeOut: boolean; // フェードアウト開始フラグ\r\n\r\n  _motionQueueEntryHandle: CubismMotionQueueEntryHandle; // インスタンスごとに一意の値を持つ識別番号\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismmotionqueueentry';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismMotionQueueEntry = $.CubismMotionQueueEntry;\r\n  export type CubismMotionQueueEntry = $.CubismMotionQueueEntry;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { ACubismMotion } from './acubismmotion';\r\nimport { CubismMotionQueueEntry } from './cubismmotionqueueentry';\r\nimport { csmVector, iterator } from '../type/csmvector';\r\nimport { CubismModel } from '../model/cubismmodel';\r\nimport { csmString } from '../type/csmstring';\r\n\r\n/**\r\n * モーション再生の管理\r\n *\r\n * モーション再生の管理用クラス。CubismMotionモーションなどACubismMotionのサブクラスを再生するために使用する。\r\n *\r\n * @note 再生中に別のモーションが StartMotion()された場合は、新しいモーションに滑らかに変化し旧モーションは中断する。\r\n *       表情用モーション、体用モーションなどを分けてモーション化した場合など、\r\n *       複数のモーションを同時に再生させる場合は、複数のCubismMotionQueueManagerインスタンスを使用する。\r\n */\r\nexport class CubismMotionQueueManager {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    this._userTimeSeconds = 0.0;\r\n    this._eventCallBack = null;\r\n    this._eventCustomData = null;\r\n    this._motions = new csmVector<CubismMotionQueueEntry>();\r\n  }\r\n\r\n  /**\r\n   * デストラクタ\r\n   */\r\n  public release(): void {\r\n    for (let i = 0; i < this._motions.getSize(); ++i) {\r\n      if (this._motions.at(i)) {\r\n        this._motions.at(i).release();\r\n        this._motions.set(i, null);\r\n      }\r\n    }\r\n\r\n    this._motions = null;\r\n  }\r\n\r\n  /**\r\n   * 指定したモーションの開始\r\n   *\r\n   * 指定したモーションを開始する。同じタイプのモーションが既にある場合は、既存のモーションに終了フラグを立て、フェードアウトを開始させる。\r\n   *\r\n   * @param   motion          開始するモーション\r\n   * @param   autoDelete      再生が終了したモーションのインスタンスを削除するなら true\r\n   * @param   userTimeSeconds デルタ時間の積算値[秒]\r\n   * @return                      開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するIsFinished()の引数で使用する。開始できない時は「-1」\r\n   */\r\n  public startMotion(\r\n    motion: ACubismMotion,\r\n    autoDelete: boolean,\r\n    userTimeSeconds: number\r\n  ): CubismMotionQueueEntryHandle {\r\n    if (motion == null) {\r\n      return InvalidMotionQueueEntryHandleValue;\r\n    }\r\n\r\n    let motionQueueEntry: CubismMotionQueueEntry = null;\r\n\r\n    // 既にモーションがあれば終了フラグを立てる\r\n    for (let i = 0; i < this._motions.getSize(); ++i) {\r\n      motionQueueEntry = this._motions.at(i);\r\n      if (motionQueueEntry == null) {\r\n        continue;\r\n      }\r\n\r\n      motionQueueEntry.setFadeOut(motionQueueEntry._motion.getFadeOutTime()); // フェードアウト設定\r\n    }\r\n\r\n    motionQueueEntry = new CubismMotionQueueEntry(); // 終了時に破棄する\r\n    motionQueueEntry._autoDelete = autoDelete;\r\n    motionQueueEntry._motion = motion;\r\n\r\n    this._motions.pushBack(motionQueueEntry);\r\n\r\n    return motionQueueEntry._motionQueueEntryHandle;\r\n  }\r\n\r\n  /**\r\n   * 全てのモーションの終了の確認\r\n   * @return true 全て終了している\r\n   * @return false 終了していない\r\n   */\r\n  public isFinished(): boolean {\r\n    // ------- 処理を行う -------\r\n    // 既にモーションがあれば終了フラグを立てる\r\n\r\n    for (\r\n      let ite: iterator<CubismMotionQueueEntry> = this._motions.begin();\r\n      ite.notEqual(this._motions.end());\r\n\r\n    ) {\r\n      let motionQueueEntry: CubismMotionQueueEntry = ite.ptr();\r\n\r\n      if (motionQueueEntry == null) {\r\n        ite = this._motions.erase(ite); // 削除\r\n        continue;\r\n      }\r\n\r\n      const motion: ACubismMotion = motionQueueEntry._motion;\r\n\r\n      if (motion == null) {\r\n        motionQueueEntry.release();\r\n        motionQueueEntry = null;\r\n        ite = this._motions.erase(ite); // 削除\r\n        continue;\r\n      }\r\n\r\n      // ----- 終了済みの処理があれば削除する ------\r\n      if (!motionQueueEntry.isFinished()) {\r\n        return false;\r\n      } else {\r\n        ite.preIncrement();\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 指定したモーションの終了の確認\r\n   * @param motionQueueEntryNumber モーションの識別番号\r\n   * @return true 全て終了している\r\n   * @return false 終了していない\r\n   */\r\n  public isFinishedByHandle(\r\n    motionQueueEntryNumber: CubismMotionQueueEntryHandle\r\n  ): boolean {\r\n    for (\r\n      let ite: iterator<CubismMotionQueueEntry> = this._motions.begin();\r\n      ite.notEqual(this._motions.end());\r\n      ite.increment()\r\n    ) {\r\n      const motionQueueEntry: CubismMotionQueueEntry = ite.ptr();\r\n\r\n      if (motionQueueEntry == null) {\r\n        continue;\r\n      }\r\n\r\n      if (\r\n        motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber &&\r\n        !motionQueueEntry.isFinished()\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 全てのモーションを停止する\r\n   */\r\n  public stopAllMotions(): void {\r\n    // ------- 処理を行う -------\r\n    // 既にモーションがあれば終了フラグを立てる\r\n\r\n    for (\r\n      let ite: iterator<CubismMotionQueueEntry> = this._motions.begin();\r\n      ite.notEqual(this._motions.end());\r\n\r\n    ) {\r\n      let motionQueueEntry: CubismMotionQueueEntry = ite.ptr();\r\n\r\n      if (motionQueueEntry == null) {\r\n        ite = this._motions.erase(ite);\r\n\r\n        continue;\r\n      }\r\n\r\n      // ----- 終了済みの処理があれば削除する ------\r\n      motionQueueEntry.release();\r\n      motionQueueEntry = null;\r\n      ite = this._motions.erase(ite); // 削除\r\n    }\r\n  }\r\n\r\n  /**\r\n       * 指定したCubismMotionQueueEntryの取得\r\n\r\n        * @param   motionQueueEntryNumber  モーションの識別番号\r\n        * @return  指定したCubismMotionQueueEntry\r\n        * @return  null   見つからなかった\r\n        */\r\n  public getCubismMotionQueueEntry(\r\n    motionQueueEntryNumber: any\r\n  ): CubismMotionQueueEntry {\r\n    //------- 処理を行う -------\r\n    for (\r\n      let ite: iterator<CubismMotionQueueEntry> = this._motions.begin();\r\n      ite.notEqual(this._motions.end());\r\n      ite.preIncrement()\r\n    ) {\r\n      const motionQueueEntry: CubismMotionQueueEntry = ite.ptr();\r\n\r\n      if (motionQueueEntry == null) {\r\n        continue;\r\n      }\r\n\r\n      if (motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber) {\r\n        return motionQueueEntry;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * イベントを受け取るCallbackの登録\r\n   *\r\n   * @param callback コールバック関数\r\n   * @param customData コールバックに返されるデータ\r\n   */\r\n  public setEventCallback(\r\n    callback: CubismMotionEventFunction,\r\n    customData: any = null\r\n  ): void {\r\n    this._eventCallBack = callback;\r\n    this._eventCustomData = customData;\r\n  }\r\n\r\n  /**\r\n   * モーションを更新して、モデルにパラメータ値を反映する。\r\n   *\r\n   * @param   model   対象のモデル\r\n   * @param   userTimeSeconds   デルタ時間の積算値[秒]\r\n   * @return  true    モデルへパラメータ値の反映あり\r\n   * @return  false   モデルへパラメータ値の反映なし(モーションの変化なし)\r\n   */\r\n  public doUpdateMotion(model: CubismModel, userTimeSeconds: number): boolean {\r\n    let updated = false;\r\n\r\n    // ------- 処理を行う --------\r\n    // 既にモーションがあれば終了フラグを立てる\r\n\r\n    for (\r\n      let ite: iterator<CubismMotionQueueEntry> = this._motions.begin();\r\n      ite.notEqual(this._motions.end());\r\n\r\n    ) {\r\n      let motionQueueEntry: CubismMotionQueueEntry = ite.ptr();\r\n\r\n      if (motionQueueEntry == null) {\r\n        ite = this._motions.erase(ite); // 削除\r\n        continue;\r\n      }\r\n\r\n      const motion: ACubismMotion = motionQueueEntry._motion;\r\n\r\n      if (motion == null) {\r\n        motionQueueEntry.release();\r\n        motionQueueEntry = null;\r\n        ite = this._motions.erase(ite); // 削除\r\n\r\n        continue;\r\n      }\r\n\r\n      // ------ 値を反映する ------\r\n      motion.updateParameters(model, motionQueueEntry, userTimeSeconds);\r\n      updated = true;\r\n\r\n      // ------ ユーザトリガーイベントを検査する ----\r\n      const firedList: csmVector<csmString> = motion.getFiredEvent(\r\n        motionQueueEntry.getLastCheckEventSeconds() -\r\n          motionQueueEntry.getStartTime(),\r\n        userTimeSeconds - motionQueueEntry.getStartTime()\r\n      );\r\n\r\n      for (let i = 0; i < firedList.getSize(); ++i) {\r\n        this._eventCallBack(this, firedList.at(i), this._eventCustomData);\r\n      }\r\n\r\n      motionQueueEntry.setLastCheckEventSeconds(userTimeSeconds);\r\n\r\n      // ------ 終了済みの処理があれば削除する ------\r\n      if (motionQueueEntry.isFinished()) {\r\n        motionQueueEntry.release();\r\n        motionQueueEntry = null;\r\n        ite = this._motions.erase(ite); // 削除\r\n      } else {\r\n        if (motionQueueEntry.isTriggeredFadeOut()) {\r\n          motionQueueEntry.startFadeOut(\r\n            motionQueueEntry.getFadeOutSeconds(),\r\n            userTimeSeconds\r\n          );\r\n        }\r\n        ite.preIncrement();\r\n      }\r\n    }\r\n\r\n    return updated;\r\n  }\r\n  _userTimeSeconds: number; // デルタ時間の積算値[秒]\r\n\r\n  _motions: csmVector<CubismMotionQueueEntry>; // モーション\r\n  _eventCallBack: CubismMotionEventFunction; // コールバック関数\r\n  _eventCustomData: any; // コールバックに戻されるデータ\r\n}\r\n\r\n/**\r\n * イベントのコールバック関数を定義\r\n *\r\n * イベントのコールバックに登録できる関数の型情報\r\n * @param caller        発火したイベントを再生させたCubismMotionQueueManager\r\n * @param eventValue    発火したイベントの文字列データ\r\n * @param customData   コールバックに返される登録時に指定されたデータ\r\n */\r\nexport interface CubismMotionEventFunction {\r\n  (\r\n    caller: CubismMotionQueueManager,\r\n    eventValue: csmString,\r\n    customData: any\r\n  ): void;\r\n}\r\n\r\n/**\r\n * モーションの識別番号\r\n *\r\n * モーションの識別番号の定義\r\n */\r\nexport declare type CubismMotionQueueEntryHandle = any;\r\nexport const InvalidMotionQueueEntryHandleValue: CubismMotionQueueEntryHandle =\r\n  -1;\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismmotionqueuemanager';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismMotionQueueManager = $.CubismMotionQueueManager;\r\n  export type CubismMotionQueueManager = $.CubismMotionQueueManager;\r\n  export const InvalidMotionQueueEntryHandleValue =\r\n    $.InvalidMotionQueueEntryHandleValue;\r\n  export type CubismMotionQueueEntryHandle = $.CubismMotionQueueEntryHandle;\r\n  export type CubismMotionEventFunction = $.CubismMotionEventFunction;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismModel } from '../model/cubismmodel';\r\nimport { ACubismMotion } from './acubismmotion';\r\nimport {\r\n  CubismMotionQueueEntryHandle,\r\n  CubismMotionQueueManager,\r\n} from './cubismmotionqueuemanager';\r\n\r\n/**\r\n * モーションの管理\r\n *\r\n * モーションの管理を行うクラス\r\n */\r\nexport class CubismMotionManager extends CubismMotionQueueManager {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    super();\r\n    this._currentPriority = 0;\r\n    this._reservePriority = 0;\r\n  }\r\n\r\n  /**\r\n   * 再生中のモーションの優先度の取得\r\n   * @return  モーションの優先度\r\n   */\r\n  public getCurrentPriority(): number {\r\n    return this._currentPriority;\r\n  }\r\n\r\n  /**\r\n   * 予約中のモーションの優先度を取得する。\r\n   * @return  モーションの優先度\r\n   */\r\n  public getReservePriority(): number {\r\n    return this._reservePriority;\r\n  }\r\n\r\n  /**\r\n   * 予約中のモーションの優先度を設定する。\r\n   * @param   val     優先度\r\n   */\r\n  public setReservePriority(val: number): void {\r\n    this._reservePriority = val;\r\n  }\r\n\r\n  /**\r\n   * 優先度を設定してモーションを開始する。\r\n   *\r\n   * @param motion          モーション\r\n   * @param autoDelete      再生が狩猟したモーションのインスタンスを削除するならtrue\r\n   * @param priority        優先度\r\n   * @return                開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するIsFinished()の引数で使用する。開始できない時は「-1」\r\n   */\r\n  public startMotionPriority(\r\n    motion: ACubismMotion,\r\n    autoDelete: boolean,\r\n    priority: number\r\n  ): CubismMotionQueueEntryHandle {\r\n    if (priority == this._reservePriority) {\r\n      this._reservePriority = 0; // 予約を解除\r\n    }\r\n\r\n    this._currentPriority = priority; // 再生中モーションの優先度を設定\r\n\r\n    return super.startMotion(motion, autoDelete, this._userTimeSeconds);\r\n  }\r\n\r\n  /**\r\n   * モーションを更新して、モデルにパラメータ値を反映する。\r\n   *\r\n   * @param model   対象のモデル\r\n   * @param deltaTimeSeconds    デルタ時間[秒]\r\n   * @return  true    更新されている\r\n   * @return  false   更新されていない\r\n   */\r\n  public updateMotion(model: CubismModel, deltaTimeSeconds: number): boolean {\r\n    this._userTimeSeconds += deltaTimeSeconds;\r\n\r\n    const updated: boolean = super.doUpdateMotion(model, this._userTimeSeconds);\r\n\r\n    if (this.isFinished()) {\r\n      this._currentPriority = 0; // 再生中のモーションの優先度を解除\r\n    }\r\n\r\n    return updated;\r\n  }\r\n\r\n  /**\r\n   * モーションを予約する。\r\n   *\r\n   * @param   priority    優先度\r\n   * @return  true    予約できた\r\n   * @return  false   予約できなかった\r\n   */\r\n  public reserveMotion(priority: number): boolean {\r\n    if (\r\n      priority <= this._reservePriority ||\r\n      priority <= this._currentPriority\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    this._reservePriority = priority;\r\n\r\n    return true;\r\n  }\r\n\r\n  _currentPriority: number; // 現在再生中のモーションの優先度\r\n  _reservePriority: number; // 再生予定のモーションの優先度。再生中は0になる。モーションファイルを別スレッドで読み込むときの機能。\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismmotionmanager';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismMotionManager = $.CubismMotionManager;\r\n  export type CubismMotionManager = $.CubismMotionManager;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismIdHandle } from '../id/cubismid';\r\nimport { CubismVector2 } from '../math/cubismvector2';\r\nimport { csmVector } from '../type/csmvector';\r\n\r\n/**\r\n * 物理演算の適用先の種類\r\n */\r\nexport enum CubismPhysicsTargetType {\r\n  CubismPhysicsTargetType_Parameter, // パラメータに対して適用\r\n}\r\n\r\n/**\r\n * 物理演算の入力の種類\r\n */\r\nexport enum CubismPhysicsSource {\r\n  CubismPhysicsSource_X, // X軸の位置から\r\n  CubismPhysicsSource_Y, // Y軸の位置から\r\n  CubismPhysicsSource_Angle, // 角度から\r\n}\r\n\r\n/**\r\n * @brief 物理演算で使用する外部の力\r\n *\r\n * 物理演算で使用する外部の力。\r\n */\r\nexport class PhysicsJsonEffectiveForces {\r\n  constructor() {\r\n    this.gravity = new CubismVector2(0, 0);\r\n    this.wind = new CubismVector2(0, 0);\r\n  }\r\n  gravity: CubismVector2; // 重力\r\n  wind: CubismVector2; // 風\r\n}\r\n\r\n/**\r\n * 物理演算のパラメータ情報\r\n */\r\nexport class CubismPhysicsParameter {\r\n  id: CubismIdHandle; // パラメータ\r\n  targetType: CubismPhysicsTargetType; // 適用先の種類\r\n}\r\n\r\n/**\r\n * 物理演算の正規化情報\r\n */\r\nexport class CubismPhysicsNormalization {\r\n  minimum: number; // 最大値\r\n  maximum: number; // 最小値\r\n  defalut: number; // デフォルト値\r\n}\r\n\r\n/**\r\n * 物理演算の演算委使用する物理点の情報\r\n */\r\nexport class CubismPhysicsParticle {\r\n  constructor() {\r\n    this.initialPosition = new CubismVector2(0, 0);\r\n    this.position = new CubismVector2(0, 0);\r\n    this.lastPosition = new CubismVector2(0, 0);\r\n    this.lastGravity = new CubismVector2(0, 0);\r\n    this.force = new CubismVector2(0, 0);\r\n    this.velocity = new CubismVector2(0, 0);\r\n  }\r\n\r\n  initialPosition: CubismVector2; // 初期位置\r\n  mobility: number; // 動きやすさ\r\n  delay: number; // 遅れ\r\n  acceleration: number; // 加速度\r\n  radius: number; // 距離\r\n  position: CubismVector2; // 現在の位置\r\n  lastPosition: CubismVector2; // 最後の位置\r\n  lastGravity: CubismVector2; // 最後の重力\r\n  force: CubismVector2; // 現在かかっている力\r\n  velocity: CubismVector2; // 現在の速度\r\n}\r\n\r\n/**\r\n * 物理演算の物理点の管理\r\n */\r\nexport class CubismPhysicsSubRig {\r\n  constructor() {\r\n    this.normalizationPosition = new CubismPhysicsNormalization();\r\n    this.normalizationAngle = new CubismPhysicsNormalization();\r\n  }\r\n  inputCount: number; // 入力の個数\r\n  outputCount: number; // 出力の個数\r\n  particleCount: number; // 物理点の個数\r\n  baseInputIndex: number; // 入力の最初のインデックス\r\n  baseOutputIndex: number; // 出力の最初のインデックス\r\n  baseParticleIndex: number; // 物理点の最初のインデックス\r\n  normalizationPosition: CubismPhysicsNormalization; // 正規化された位置\r\n  normalizationAngle: CubismPhysicsNormalization; // 正規化された角度\r\n}\r\n\r\n/**\r\n * 正規化されたパラメータの取得関数の宣言\r\n * @param targetTranslation     // 演算結果の移動値\r\n * @param targetAngle           // 演算結果の角度\r\n * @param value                 // パラメータの値\r\n * @param parameterMinimunValue // パラメータの最小値\r\n * @param parameterMaximumValue // パラメータの最大値\r\n * @param parameterDefaultValue // パラメータのデフォルト値\r\n * @param normalizationPosition // 正規化された位置\r\n * @param normalizationAngle    // 正規化された角度\r\n * @param isInverted            // 値が反転されているか？\r\n * @param weight                // 重み\r\n */\r\nexport interface normalizedPhysicsParameterValueGetter {\r\n  (\r\n    targetTranslation: CubismVector2,\r\n    targetAngle: { angle: number },\r\n    value: number,\r\n    parameterMinimunValue: number,\r\n    parameterMaximumValue: number,\r\n    parameterDefaultValue: number,\r\n    normalizationPosition: CubismPhysicsNormalization,\r\n    normalizationAngle: CubismPhysicsNormalization,\r\n    isInverted: boolean,\r\n    weight: number\r\n  ): void;\r\n}\r\n\r\n/**\r\n * 物理演算の値の取得関数の宣言\r\n * @param translation 移動値\r\n * @param particles 物理点のリスト\r\n * @param isInverted 値が反映されているか\r\n * @param parentGravity 重力\r\n * @return 値\r\n */\r\nexport interface physicsValueGetter {\r\n  (\r\n    translation: CubismVector2,\r\n    particles: CubismPhysicsParticle[],\r\n    particleIndex: number,\r\n    isInverted: boolean,\r\n    parentGravity: CubismVector2\r\n  ): number;\r\n}\r\n\r\n/**\r\n * 物理演算のスケールの取得関数の宣言\r\n * @param translationScale 移動値のスケール\r\n * @param angleScale    角度のスケール\r\n * @return スケール値\r\n */\r\nexport interface physicsScaleGetter {\r\n  (translationScale: CubismVector2, angleScale: number): number;\r\n}\r\n\r\n/**\r\n * 物理演算の入力情報\r\n */\r\nexport class CubismPhysicsInput {\r\n  constructor() {\r\n    this.source = new CubismPhysicsParameter();\r\n  }\r\n  source: CubismPhysicsParameter; // 入力元のパラメータ\r\n  sourceParameterIndex: number; // 入力元のパラメータのインデックス\r\n  weight: number; // 重み\r\n  type: number; // 入力の種類\r\n  reflect: boolean; // 値が反転されているかどうか\r\n  getNormalizedParameterValue: normalizedPhysicsParameterValueGetter; // 正規化されたパラメータ値の取得関数\r\n}\r\n\r\n/**\r\n * @brief 物理演算の出力情報\r\n *\r\n * 物理演算の出力情報。\r\n */\r\nexport class CubismPhysicsOutput {\r\n  constructor() {\r\n    this.destination = new CubismPhysicsParameter();\r\n    this.translationScale = new CubismVector2(0, 0);\r\n  }\r\n\r\n  destination: CubismPhysicsParameter; // 出力先のパラメータ\r\n  destinationParameterIndex: number; // 出力先のパラメータのインデックス\r\n  vertexIndex: number; // 振り子のインデックス\r\n  translationScale: CubismVector2; // 移動値のスケール\r\n  angleScale: number; // 角度のスケール\r\n  weight: number; // 重み\r\n  type: CubismPhysicsSource; // 出力の種類\r\n  reflect: boolean; // 値が反転されているかどうか\r\n  valueBelowMinimum: number; // 最小値を下回った時の値\r\n  valueExceededMaximum: number; // 最大値をこえた時の値\r\n  getValue: physicsValueGetter; // 物理演算の値の取得関数\r\n  getScale: physicsScaleGetter; // 物理演算のスケール値の取得関数\r\n}\r\n\r\n/**\r\n * @brief 物理演算のデータ\r\n *\r\n * 物理演算のデータ。\r\n */\r\nexport class CubismPhysicsRig {\r\n  constructor() {\r\n    this.settings = new csmVector<CubismPhysicsSubRig>();\r\n    this.inputs = new csmVector<CubismPhysicsInput>();\r\n    this.outputs = new csmVector<CubismPhysicsOutput>();\r\n    this.particles = new csmVector<CubismPhysicsParticle>();\r\n    this.gravity = new CubismVector2(0, 0);\r\n    this.wind = new CubismVector2(0, 0);\r\n    this.fps = 0.0;\r\n  }\r\n\r\n  subRigCount: number; // 物理演算の物理点の個数\r\n  settings: csmVector<CubismPhysicsSubRig>; // 物理演算の物理点の管理のリスト\r\n  inputs: csmVector<CubismPhysicsInput>; // 物理演算の入力のリスト\r\n  outputs: csmVector<CubismPhysicsOutput>; // 物理演算の出力のリスト\r\n  particles: csmVector<CubismPhysicsParticle>; // 物理演算の物理点のリスト\r\n  gravity: CubismVector2; // 重力\r\n  wind: CubismVector2; // 風\r\n  fps: number; //物理演算動作FPS\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismphysicsinternal';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismPhysicsInput = $.CubismPhysicsInput;\r\n  export type CubismPhysicsInput = $.CubismPhysicsInput;\r\n  export const CubismPhysicsNormalization = $.CubismPhysicsNormalization;\r\n  export type CubismPhysicsNormalization = $.CubismPhysicsNormalization;\r\n  export const CubismPhysicsOutput = $.CubismPhysicsOutput;\r\n  export type CubismPhysicsOutput = $.CubismPhysicsOutput;\r\n  export const CubismPhysicsParameter = $.CubismPhysicsParameter;\r\n  export type CubismPhysicsParameter = $.CubismPhysicsParameter;\r\n  export const CubismPhysicsParticle = $.CubismPhysicsParticle;\r\n  export type CubismPhysicsParticle = $.CubismPhysicsParticle;\r\n  export const CubismPhysicsRig = $.CubismPhysicsRig;\r\n  export type CubismPhysicsRig = $.CubismPhysicsRig;\r\n  export const CubismPhysicsSource = $.CubismPhysicsSource;\r\n  export type CubismPhysicsSource = $.CubismPhysicsSource;\r\n  export const CubismPhysicsSubRig = $.CubismPhysicsSubRig;\r\n  export type CubismPhysicsSubRig = $.CubismPhysicsSubRig;\r\n  export const CubismPhysicsTargetType = $.CubismPhysicsTargetType;\r\n  export type CubismPhysicsTargetType = $.CubismPhysicsTargetType;\r\n  export const PhysicsJsonEffectiveForces = $.PhysicsJsonEffectiveForces;\r\n  export type PhysicsJsonEffectiveForces = $.PhysicsJsonEffectiveForces;\r\n  export type normalizedPhysicsParameterValueGetter =\r\n    $.normalizedPhysicsParameterValueGetter;\r\n  export type physicsScaleGetter = $.physicsScaleGetter;\r\n  export type physicsValueGetter = $.physicsValueGetter;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismIdHandle } from '../id/cubismid';\r\nimport { CubismFramework } from '../live2dcubismframework';\r\nimport { CubismVector2 } from '../math/cubismvector2';\r\nimport { CubismJson } from '../utils/cubismjson';\r\n\r\n// JSON keys\r\nconst Position = 'Position';\r\nconst X = 'X';\r\nconst Y = 'Y';\r\nconst Angle = 'Angle';\r\nconst Type = 'Type';\r\nconst Id = 'Id';\r\n\r\n// Meta\r\nconst Meta = 'Meta';\r\nconst EffectiveForces = 'EffectiveForces';\r\nconst TotalInputCount = 'TotalInputCount';\r\nconst TotalOutputCount = 'TotalOutputCount';\r\nconst PhysicsSettingCount = 'PhysicsSettingCount';\r\nconst Gravity = 'Gravity';\r\nconst Wind = 'Wind';\r\nconst VertexCount = 'VertexCount';\r\nconst Fps = 'Fps';\r\n\r\n// PhysicsSettings\r\nconst PhysicsSettings = 'PhysicsSettings';\r\nconst Normalization = 'Normalization';\r\nconst Minimum = 'Minimum';\r\nconst Maximum = 'Maximum';\r\nconst Default = 'Default';\r\nconst Reflect = 'Reflect';\r\nconst Weight = 'Weight';\r\n\r\n// Input\r\nconst Input = 'Input';\r\nconst Source = 'Source';\r\n\r\n// Output\r\nconst Output = 'Output';\r\nconst Scale = 'Scale';\r\nconst VertexIndex = 'VertexIndex';\r\nconst Destination = 'Destination';\r\n\r\n// Particle\r\nconst Vertices = 'Vertices';\r\nconst Mobility = 'Mobility';\r\nconst Delay = 'Delay';\r\nconst Radius = 'Radius';\r\nconst Acceleration = 'Acceleration';\r\n\r\n/**\r\n * physics3.jsonのコンテナ。\r\n */\r\nexport class CubismPhysicsJson {\r\n  /**\r\n   * コンストラクタ\r\n   * @param buffer physics3.jsonが読み込まれているバッファ\r\n   * @param size バッファのサイズ\r\n   */\r\n  public constructor(buffer: ArrayBuffer, size: number) {\r\n    this._json = CubismJson.create(buffer, size);\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    CubismJson.delete(this._json);\r\n  }\r\n\r\n  /**\r\n   * 重力の取得\r\n   * @return 重力\r\n   */\r\n  public getGravity(): CubismVector2 {\r\n    const ret: CubismVector2 = new CubismVector2(0, 0);\r\n    ret.x = this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(EffectiveForces)\r\n      .getValueByString(Gravity)\r\n      .getValueByString(X)\r\n      .toFloat();\r\n    ret.y = this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(EffectiveForces)\r\n      .getValueByString(Gravity)\r\n      .getValueByString(Y)\r\n      .toFloat();\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * 風の取得\r\n   * @return 風\r\n   */\r\n  public getWind(): CubismVector2 {\r\n    const ret: CubismVector2 = new CubismVector2(0, 0);\r\n    ret.x = this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(EffectiveForces)\r\n      .getValueByString(Wind)\r\n      .getValueByString(X)\r\n      .toFloat();\r\n    ret.y = this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(EffectiveForces)\r\n      .getValueByString(Wind)\r\n      .getValueByString(Y)\r\n      .toFloat();\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * 物理演算設定FPSの取得\r\n   * @return 物理演算設定FPS\r\n   */\r\n  public getFps(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(Fps)\r\n      .toFloat(0.0);\r\n  }\r\n\r\n  /**\r\n   * 物理店の管理の個数の取得\r\n   * @return 物理店の管理の個数\r\n   */\r\n  public getSubRigCount(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(PhysicsSettingCount)\r\n      .toInt();\r\n  }\r\n\r\n  /**\r\n   * 入力の総合計の取得\r\n   * @return 入力の総合計\r\n   */\r\n  public getTotalInputCount(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(TotalInputCount)\r\n      .toInt();\r\n  }\r\n\r\n  /**\r\n   * 出力の総合計の取得\r\n   * @return 出力の総合計\r\n   */\r\n  public getTotalOutputCount(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(TotalOutputCount)\r\n      .toInt();\r\n  }\r\n\r\n  /**\r\n   * 物理点の個数の取得\r\n   * @return 物理点の個数\r\n   */\r\n  public getVertexCount(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(VertexCount)\r\n      .toInt();\r\n  }\r\n\r\n  /**\r\n   * 正規化された位置の最小値の取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @return 正規化された位置の最小値\r\n   */\r\n  public getNormalizationPositionMinimumValue(\r\n    physicsSettingIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Normalization)\r\n      .getValueByString(Position)\r\n      .getValueByString(Minimum)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * 正規化された位置の最大値の取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @return 正規化された位置の最大値\r\n   */\r\n  public getNormalizationPositionMaximumValue(\r\n    physicsSettingIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Normalization)\r\n      .getValueByString(Position)\r\n      .getValueByString(Maximum)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * 正規化された位置のデフォルト値の取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @return 正規化された位置のデフォルト値\r\n   */\r\n  public getNormalizationPositionDefaultValue(\r\n    physicsSettingIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Normalization)\r\n      .getValueByString(Position)\r\n      .getValueByString(Default)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * 正規化された角度の最小値の取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @return 正規化された角度の最小値\r\n   */\r\n  public getNormalizationAngleMinimumValue(\r\n    physicsSettingIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Normalization)\r\n      .getValueByString(Angle)\r\n      .getValueByString(Minimum)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * 正規化された角度の最大値の取得\r\n   * @param physicsSettingIndex\r\n   * @return 正規化された角度の最大値\r\n   */\r\n  public getNormalizationAngleMaximumValue(\r\n    physicsSettingIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Normalization)\r\n      .getValueByString(Angle)\r\n      .getValueByString(Maximum)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * 正規化された角度のデフォルト値の取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @return 正規化された角度のデフォルト値\r\n   */\r\n  public getNormalizationAngleDefaultValue(\r\n    physicsSettingIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Normalization)\r\n      .getValueByString(Angle)\r\n      .getValueByString(Default)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * 入力の個数の取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @return 入力の個数\r\n   */\r\n  public getInputCount(physicsSettingIndex: number): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Input)\r\n      .getVector()\r\n      .getSize();\r\n  }\r\n\r\n  /**\r\n   * 入力の重みの取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @param inputIndex 入力のインデックス\r\n   * @return 入力の重み\r\n   */\r\n  public getInputWeight(\r\n    physicsSettingIndex: number,\r\n    inputIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Input)\r\n      .getValueByIndex(inputIndex)\r\n      .getValueByString(Weight)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * 入力の反転の取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @param inputIndex 入力のインデックス\r\n   * @return 入力の反転\r\n   */\r\n  public getInputReflect(\r\n    physicsSettingIndex: number,\r\n    inputIndex: number\r\n  ): boolean {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Input)\r\n      .getValueByIndex(inputIndex)\r\n      .getValueByString(Reflect)\r\n      .toBoolean();\r\n  }\r\n\r\n  /**\r\n   * 入力の種類の取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @param inputIndex 入力のインデックス\r\n   * @return 入力の種類\r\n   */\r\n  public getInputType(physicsSettingIndex: number, inputIndex: number): string {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Input)\r\n      .getValueByIndex(inputIndex)\r\n      .getValueByString(Type)\r\n      .getRawString();\r\n  }\r\n\r\n  /**\r\n   * 入力元のIDの取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @param inputIndex 入力のインデックス\r\n   * @return 入力元のID\r\n   */\r\n  public getInputSourceId(\r\n    physicsSettingIndex: number,\r\n    inputIndex: number\r\n  ): CubismIdHandle {\r\n    return CubismFramework.getIdManager().getId(\r\n      this._json\r\n        .getRoot()\r\n        .getValueByString(PhysicsSettings)\r\n        .getValueByIndex(physicsSettingIndex)\r\n        .getValueByString(Input)\r\n        .getValueByIndex(inputIndex)\r\n        .getValueByString(Source)\r\n        .getValueByString(Id)\r\n        .getRawString()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 出力の個数の取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @return 出力の個数\r\n   */\r\n  public getOutputCount(physicsSettingIndex: number): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Output)\r\n      .getVector()\r\n      .getSize();\r\n  }\r\n\r\n  /**\r\n   * 出力の物理点のインデックスの取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @param outputIndex 出力のインデックス\r\n   * @return 出力の物理点のインデックス\r\n   */\r\n  public getOutputVertexIndex(\r\n    physicsSettingIndex: number,\r\n    outputIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Output)\r\n      .getValueByIndex(outputIndex)\r\n      .getValueByString(VertexIndex)\r\n      .toInt();\r\n  }\r\n\r\n  /**\r\n   * 出力の角度のスケールを取得する\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @param outputIndex 出力のインデックス\r\n   * @return 出力の角度のスケール\r\n   */\r\n  public getOutputAngleScale(\r\n    physicsSettingIndex: number,\r\n    outputIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Output)\r\n      .getValueByIndex(outputIndex)\r\n      .getValueByString(Scale)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * 出力の重みの取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @param outputIndex 出力のインデックス\r\n   * @return 出力の重み\r\n   */\r\n  public getOutputWeight(\r\n    physicsSettingIndex: number,\r\n    outputIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Output)\r\n      .getValueByIndex(outputIndex)\r\n      .getValueByString(Weight)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * 出力先のIDの取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @param outputIndex 出力のインデックス\r\n   * @return 出力先のID\r\n   */\r\n  public getOutputDestinationId(\r\n    physicsSettingIndex: number,\r\n    outputIndex: number\r\n  ): CubismIdHandle {\r\n    return CubismFramework.getIdManager().getId(\r\n      this._json\r\n        .getRoot()\r\n        .getValueByString(PhysicsSettings)\r\n        .getValueByIndex(physicsSettingIndex)\r\n        .getValueByString(Output)\r\n        .getValueByIndex(outputIndex)\r\n        .getValueByString(Destination)\r\n        .getValueByString(Id)\r\n        .getRawString()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 出力の種類の取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @param outputIndex 出力のインデックス\r\n   * @return 出力の種類\r\n   */\r\n  public getOutputType(\r\n    physicsSettingIndex: number,\r\n    outputIndex: number\r\n  ): string {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Output)\r\n      .getValueByIndex(outputIndex)\r\n      .getValueByString(Type)\r\n      .getRawString();\r\n  }\r\n\r\n  /**\r\n   * 出力の反転の取得\r\n   * @param physicsSettingIndex 物理演算のインデックス\r\n   * @param outputIndex 出力のインデックス\r\n   * @return 出力の反転\r\n   */\r\n  public getOutputReflect(\r\n    physicsSettingIndex: number,\r\n    outputIndex: number\r\n  ): boolean {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Output)\r\n      .getValueByIndex(outputIndex)\r\n      .getValueByString(Reflect)\r\n      .toBoolean();\r\n  }\r\n\r\n  /**\r\n   * 物理点の個数の取得\r\n   * @param physicsSettingIndex 物理演算男設定のインデックス\r\n   * @return 物理点の個数\r\n   */\r\n  public getParticleCount(physicsSettingIndex: number): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Vertices)\r\n      .getVector()\r\n      .getSize();\r\n  }\r\n\r\n  /**\r\n   * 物理点の動きやすさの取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @param vertexIndex 物理点のインデックス\r\n   * @return 物理点の動きやすさ\r\n   */\r\n  public getParticleMobility(\r\n    physicsSettingIndex: number,\r\n    vertexIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Vertices)\r\n      .getValueByIndex(vertexIndex)\r\n      .getValueByString(Mobility)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * 物理点の遅れの取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @param vertexIndex 物理点のインデックス\r\n   * @return 物理点の遅れ\r\n   */\r\n  public getParticleDelay(\r\n    physicsSettingIndex: number,\r\n    vertexIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Vertices)\r\n      .getValueByIndex(vertexIndex)\r\n      .getValueByString(Delay)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * 物理点の加速度の取得\r\n   * @param physicsSettingIndex 物理演算の設定\r\n   * @param vertexIndex 物理点のインデックス\r\n   * @return 物理点の加速度\r\n   */\r\n  public getParticleAcceleration(\r\n    physicsSettingIndex: number,\r\n    vertexIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Vertices)\r\n      .getValueByIndex(vertexIndex)\r\n      .getValueByString(Acceleration)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * 物理点の距離の取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @param vertexIndex 物理点のインデックス\r\n   * @return 物理点の距離\r\n   */\r\n  public getParticleRadius(\r\n    physicsSettingIndex: number,\r\n    vertexIndex: number\r\n  ): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Vertices)\r\n      .getValueByIndex(vertexIndex)\r\n      .getValueByString(Radius)\r\n      .toFloat();\r\n  }\r\n\r\n  /**\r\n   * 物理点の位置の取得\r\n   * @param physicsSettingIndex 物理演算の設定のインデックス\r\n   * @param vertexInde 物理点のインデックス\r\n   * @return 物理点の位置\r\n   */\r\n  public getParticlePosition(\r\n    physicsSettingIndex: number,\r\n    vertexIndex: number\r\n  ): CubismVector2 {\r\n    const ret: CubismVector2 = new CubismVector2(0, 0);\r\n    ret.x = this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Vertices)\r\n      .getValueByIndex(vertexIndex)\r\n      .getValueByString(Position)\r\n      .getValueByString(X)\r\n      .toFloat();\r\n    ret.y = this._json\r\n      .getRoot()\r\n      .getValueByString(PhysicsSettings)\r\n      .getValueByIndex(physicsSettingIndex)\r\n      .getValueByString(Vertices)\r\n      .getValueByIndex(vertexIndex)\r\n      .getValueByString(Position)\r\n      .getValueByString(Y)\r\n      .toFloat();\r\n    return ret;\r\n  }\r\n\r\n  _json: CubismJson; // physics3.jsonデータ\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismphysicsjson';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismPhysicsJson = $.CubismPhysicsJson;\r\n  export type CubismPhysicsJson = $.CubismPhysicsJson;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismMath } from '../math/cubismmath';\r\nimport { CubismVector2 } from '../math/cubismvector2';\r\nimport { csmVector } from '../type/csmvector';\r\nimport { CubismModel } from '../model/cubismmodel';\r\nimport {\r\n  CubismPhysicsInput,\r\n  CubismPhysicsNormalization,\r\n  CubismPhysicsOutput,\r\n  CubismPhysicsParticle,\r\n  CubismPhysicsRig,\r\n  CubismPhysicsSource,\r\n  CubismPhysicsSubRig,\r\n  CubismPhysicsTargetType,\r\n} from './cubismphysicsinternal';\r\nimport { CubismPhysicsJson } from './cubismphysicsjson';\r\n\r\n// physics types tags.\r\nconst PhysicsTypeTagX = 'X';\r\nconst PhysicsTypeTagY = 'Y';\r\nconst PhysicsTypeTagAngle = 'Angle';\r\n\r\n// Constant of air resistance.\r\nconst AirResistance = 5.0;\r\n\r\n// Constant of maximum weight of input and output ratio.\r\nconst MaximumWeight = 100.0;\r\n\r\n// Constant of threshold of movement.\r\nconst MovementThreshold = 0.001;\r\n\r\n// Constant of maximum allowed delta time\r\nconst MaxDeltaTime = 5.0;\r\n\r\n/**\r\n * 物理演算クラス\r\n */\r\nexport class CubismPhysics {\r\n  /**\r\n   * インスタンスの作成\r\n   * @param buffer    physics3.jsonが読み込まれているバッファ\r\n   * @param size      バッファのサイズ\r\n   * @return 作成されたインスタンス\r\n   */\r\n  public static create(buffer: ArrayBuffer, size: number): CubismPhysics {\r\n    const ret: CubismPhysics = new CubismPhysics();\r\n\r\n    ret.parse(buffer, size);\r\n    ret._physicsRig.gravity.y = 0;\r\n\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * インスタンスを破棄する\r\n   * @param physics 破棄するインスタンス\r\n   */\r\n  public static delete(physics: CubismPhysics): void {\r\n    if (physics != null) {\r\n      physics.release();\r\n      physics = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * physics3.jsonをパースする。\r\n   * @param physicsJson physics3.jsonが読み込まれているバッファ\r\n   * @param size バッファのサイズ\r\n   */\r\n  public parse(physicsJson: ArrayBuffer, size: number): void {\r\n    this._physicsRig = new CubismPhysicsRig();\r\n\r\n    let json: CubismPhysicsJson = new CubismPhysicsJson(physicsJson, size);\r\n\r\n    this._physicsRig.gravity = json.getGravity();\r\n    this._physicsRig.wind = json.getWind();\r\n    this._physicsRig.subRigCount = json.getSubRigCount();\r\n\r\n    this._physicsRig.fps = json.getFps();\r\n\r\n    this._physicsRig.settings.updateSize(\r\n      this._physicsRig.subRigCount,\r\n      CubismPhysicsSubRig,\r\n      true\r\n    );\r\n    this._physicsRig.inputs.updateSize(\r\n      json.getTotalInputCount(),\r\n      CubismPhysicsInput,\r\n      true\r\n    );\r\n    this._physicsRig.outputs.updateSize(\r\n      json.getTotalOutputCount(),\r\n      CubismPhysicsOutput,\r\n      true\r\n    );\r\n    this._physicsRig.particles.updateSize(\r\n      json.getVertexCount(),\r\n      CubismPhysicsParticle,\r\n      true\r\n    );\r\n\r\n    this._currentRigOutputs.clear();\r\n    this._previousRigOutputs.clear();\r\n\r\n    let inputIndex = 0,\r\n      outputIndex = 0,\r\n      particleIndex = 0;\r\n\r\n    for (let i = 0; i < this._physicsRig.settings.getSize(); ++i) {\r\n      this._physicsRig.settings.at(i).normalizationPosition.minimum =\r\n        json.getNormalizationPositionMinimumValue(i);\r\n      this._physicsRig.settings.at(i).normalizationPosition.maximum =\r\n        json.getNormalizationPositionMaximumValue(i);\r\n      this._physicsRig.settings.at(i).normalizationPosition.defalut =\r\n        json.getNormalizationPositionDefaultValue(i);\r\n\r\n      this._physicsRig.settings.at(i).normalizationAngle.minimum =\r\n        json.getNormalizationAngleMinimumValue(i);\r\n      this._physicsRig.settings.at(i).normalizationAngle.maximum =\r\n        json.getNormalizationAngleMaximumValue(i);\r\n      this._physicsRig.settings.at(i).normalizationAngle.defalut =\r\n        json.getNormalizationAngleDefaultValue(i);\r\n\r\n      // Input\r\n      this._physicsRig.settings.at(i).inputCount = json.getInputCount(i);\r\n      this._physicsRig.settings.at(i).baseInputIndex = inputIndex;\r\n\r\n      for (let j = 0; j < this._physicsRig.settings.at(i).inputCount; ++j) {\r\n        this._physicsRig.inputs.at(inputIndex + j).sourceParameterIndex = -1;\r\n        this._physicsRig.inputs.at(inputIndex + j).weight = json.getInputWeight(\r\n          i,\r\n          j\r\n        );\r\n        this._physicsRig.inputs.at(inputIndex + j).reflect =\r\n          json.getInputReflect(i, j);\r\n\r\n        if (json.getInputType(i, j) == PhysicsTypeTagX) {\r\n          this._physicsRig.inputs.at(inputIndex + j).type =\r\n            CubismPhysicsSource.CubismPhysicsSource_X;\r\n          this._physicsRig.inputs.at(\r\n            inputIndex + j\r\n          ).getNormalizedParameterValue =\r\n            getInputTranslationXFromNormalizedParameterValue;\r\n        } else if (json.getInputType(i, j) == PhysicsTypeTagY) {\r\n          this._physicsRig.inputs.at(inputIndex + j).type =\r\n            CubismPhysicsSource.CubismPhysicsSource_Y;\r\n          this._physicsRig.inputs.at(\r\n            inputIndex + j\r\n          ).getNormalizedParameterValue =\r\n            getInputTranslationYFromNormalizedParamterValue;\r\n        } else if (json.getInputType(i, j) == PhysicsTypeTagAngle) {\r\n          this._physicsRig.inputs.at(inputIndex + j).type =\r\n            CubismPhysicsSource.CubismPhysicsSource_Angle;\r\n          this._physicsRig.inputs.at(\r\n            inputIndex + j\r\n          ).getNormalizedParameterValue =\r\n            getInputAngleFromNormalizedParameterValue;\r\n        }\r\n\r\n        this._physicsRig.inputs.at(inputIndex + j).source.targetType =\r\n          CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;\r\n        this._physicsRig.inputs.at(inputIndex + j).source.id =\r\n          json.getInputSourceId(i, j);\r\n      }\r\n      inputIndex += this._physicsRig.settings.at(i).inputCount;\r\n\r\n      // Output\r\n      this._physicsRig.settings.at(i).outputCount = json.getOutputCount(i);\r\n      this._physicsRig.settings.at(i).baseOutputIndex = outputIndex;\r\n\r\n      const currentRigOutput = new PhysicsOutput();\r\n      currentRigOutput.outputs.resize(\r\n        this._physicsRig.settings.at(i).outputCount\r\n      );\r\n\r\n      const previousRigOutput = new PhysicsOutput();\r\n      previousRigOutput.outputs.resize(\r\n        this._physicsRig.settings.at(i).outputCount\r\n      );\r\n\r\n      for (let j = 0; j < this._physicsRig.settings.at(i).outputCount; ++j) {\r\n        // initialize\r\n        currentRigOutput.outputs[j] = 0.0;\r\n        previousRigOutput.outputs[j] = 0.0;\r\n\r\n        this._physicsRig.outputs.at(outputIndex + j).destinationParameterIndex =\r\n          -1;\r\n        this._physicsRig.outputs.at(outputIndex + j).vertexIndex =\r\n          json.getOutputVertexIndex(i, j);\r\n        this._physicsRig.outputs.at(outputIndex + j).angleScale =\r\n          json.getOutputAngleScale(i, j);\r\n        this._physicsRig.outputs.at(outputIndex + j).weight =\r\n          json.getOutputWeight(i, j);\r\n        this._physicsRig.outputs.at(outputIndex + j).destination.targetType =\r\n          CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;\r\n\r\n        this._physicsRig.outputs.at(outputIndex + j).destination.id =\r\n          json.getOutputDestinationId(i, j);\r\n\r\n        if (json.getOutputType(i, j) == PhysicsTypeTagX) {\r\n          this._physicsRig.outputs.at(outputIndex + j).type =\r\n            CubismPhysicsSource.CubismPhysicsSource_X;\r\n          this._physicsRig.outputs.at(outputIndex + j).getValue =\r\n            getOutputTranslationX;\r\n          this._physicsRig.outputs.at(outputIndex + j).getScale =\r\n            getOutputScaleTranslationX;\r\n        } else if (json.getOutputType(i, j) == PhysicsTypeTagY) {\r\n          this._physicsRig.outputs.at(outputIndex + j).type =\r\n            CubismPhysicsSource.CubismPhysicsSource_Y;\r\n          this._physicsRig.outputs.at(outputIndex + j).getValue =\r\n            getOutputTranslationY;\r\n          this._physicsRig.outputs.at(outputIndex + j).getScale =\r\n            getOutputScaleTranslationY;\r\n        } else if (json.getOutputType(i, j) == PhysicsTypeTagAngle) {\r\n          this._physicsRig.outputs.at(outputIndex + j).type =\r\n            CubismPhysicsSource.CubismPhysicsSource_Angle;\r\n          this._physicsRig.outputs.at(outputIndex + j).getValue =\r\n            getOutputAngle;\r\n          this._physicsRig.outputs.at(outputIndex + j).getScale =\r\n            getOutputScaleAngle;\r\n        }\r\n\r\n        this._physicsRig.outputs.at(outputIndex + j).reflect =\r\n          json.getOutputReflect(i, j);\r\n      }\r\n\r\n      this._currentRigOutputs.pushBack(currentRigOutput);\r\n      this._previousRigOutputs.pushBack(previousRigOutput);\r\n\r\n      outputIndex += this._physicsRig.settings.at(i).outputCount;\r\n\r\n      // Particle\r\n      this._physicsRig.settings.at(i).particleCount = json.getParticleCount(i);\r\n      this._physicsRig.settings.at(i).baseParticleIndex = particleIndex;\r\n\r\n      for (let j = 0; j < this._physicsRig.settings.at(i).particleCount; ++j) {\r\n        this._physicsRig.particles.at(particleIndex + j).mobility =\r\n          json.getParticleMobility(i, j);\r\n        this._physicsRig.particles.at(particleIndex + j).delay =\r\n          json.getParticleDelay(i, j);\r\n        this._physicsRig.particles.at(particleIndex + j).acceleration =\r\n          json.getParticleAcceleration(i, j);\r\n        this._physicsRig.particles.at(particleIndex + j).radius =\r\n          json.getParticleRadius(i, j);\r\n        this._physicsRig.particles.at(particleIndex + j).position =\r\n          json.getParticlePosition(i, j);\r\n      }\r\n\r\n      particleIndex += this._physicsRig.settings.at(i).particleCount;\r\n    }\r\n\r\n    this.initialize();\r\n\r\n    json.release();\r\n    json = void 0;\r\n    json = null;\r\n  }\r\n\r\n  /**\r\n   * 現在のパラメータ値で物理演算が安定化する状態を演算する。\r\n   * @param model 物理演算の結果を適用するモデル\r\n   */\r\n  public stabilization(model: CubismModel): void {\r\n    let totalAngle: { angle: number };\r\n    let weight: number;\r\n    let radAngle: number;\r\n    let outputValue: number;\r\n    const totalTranslation: CubismVector2 = new CubismVector2();\r\n    let currentSetting: CubismPhysicsSubRig;\r\n    let currentInputs: CubismPhysicsInput[];\r\n    let currentOutputs: CubismPhysicsOutput[];\r\n    let currentParticles: CubismPhysicsParticle[];\r\n\r\n    let parameterValues: Float32Array;\r\n    let parameterMaximumValues: Float32Array;\r\n    let parameterMinimumValues: Float32Array;\r\n    let parameterDefaultValues: Float32Array;\r\n\r\n    parameterValues = model.getModel().parameters.values;\r\n    parameterMaximumValues = model.getModel().parameters.maximumValues;\r\n    parameterMinimumValues = model.getModel().parameters.minimumValues;\r\n    parameterDefaultValues = model.getModel().parameters.defaultValues;\r\n\r\n    if ((this._parameterCaches?.length ?? 0) < model.getParameterCount()) {\r\n      this._parameterCaches = new Float32Array(model.getParameterCount());\r\n    }\r\n\r\n    if ((this._parameterInputCaches?.length ?? 0) < model.getParameterCount()) {\r\n      this._parameterInputCaches = new Float32Array(model.getParameterCount());\r\n    }\r\n\r\n    for (let j = 0; j < model.getParameterCount(); ++j) {\r\n      this._parameterCaches[j] = parameterValues[j];\r\n      this._parameterInputCaches[j] = parameterValues[j];\r\n    }\r\n\r\n    for (\r\n      let settingIndex = 0;\r\n      settingIndex < this._physicsRig.subRigCount;\r\n      ++settingIndex\r\n    ) {\r\n      totalAngle = { angle: 0.0 };\r\n      totalTranslation.x = 0.0;\r\n      totalTranslation.y = 0.0;\r\n      currentSetting = this._physicsRig.settings.at(settingIndex);\r\n      currentInputs = this._physicsRig.inputs.get(\r\n        currentSetting.baseInputIndex\r\n      );\r\n      currentOutputs = this._physicsRig.outputs.get(\r\n        currentSetting.baseOutputIndex\r\n      );\r\n      currentParticles = this._physicsRig.particles.get(\r\n        currentSetting.baseParticleIndex\r\n      );\r\n\r\n      // Load input parameters\r\n      for (let i = 0; i < currentSetting.inputCount; ++i) {\r\n        weight = currentInputs[i].weight / MaximumWeight;\r\n\r\n        if (currentInputs[i].sourceParameterIndex == -1) {\r\n          currentInputs[i].sourceParameterIndex = model.getParameterIndex(\r\n            currentInputs[i].source.id\r\n          );\r\n        }\r\n\r\n        currentInputs[i].getNormalizedParameterValue(\r\n          totalTranslation,\r\n          totalAngle,\r\n          parameterValues[currentInputs[i].sourceParameterIndex],\r\n          parameterMinimumValues[currentInputs[i].sourceParameterIndex],\r\n          parameterMaximumValues[currentInputs[i].sourceParameterIndex],\r\n          parameterDefaultValues[currentInputs[i].sourceParameterIndex],\r\n          currentSetting.normalizationPosition,\r\n          currentSetting.normalizationAngle,\r\n          currentInputs[i].reflect,\r\n          weight\r\n        );\r\n\r\n        this._parameterCaches[currentInputs[i].sourceParameterIndex] =\r\n          parameterValues[currentInputs[i].sourceParameterIndex];\r\n      }\r\n\r\n      radAngle = CubismMath.degreesToRadian(-totalAngle.angle);\r\n\r\n      totalTranslation.x =\r\n        totalTranslation.x * CubismMath.cos(radAngle) -\r\n        totalTranslation.y * CubismMath.sin(radAngle);\r\n      totalTranslation.y =\r\n        totalTranslation.x * CubismMath.sin(radAngle) +\r\n        totalTranslation.y * CubismMath.cos(radAngle);\r\n\r\n      // Calculate particles position.\r\n      updateParticlesForStabilization(\r\n        currentParticles,\r\n        currentSetting.particleCount,\r\n        totalTranslation,\r\n        totalAngle.angle,\r\n        this._options.wind,\r\n        MovementThreshold * currentSetting.normalizationPosition.maximum\r\n      );\r\n\r\n      // Update output parameters.\r\n      for (let i = 0; i < currentSetting.outputCount; ++i) {\r\n        const particleIndex = currentOutputs[i].vertexIndex;\r\n\r\n        if (currentOutputs[i].destinationParameterIndex == -1) {\r\n          currentOutputs[i].destinationParameterIndex = model.getParameterIndex(\r\n            currentOutputs[i].destination.id\r\n          );\r\n        }\r\n\r\n        if (\r\n          particleIndex < 1 ||\r\n          particleIndex >= currentSetting.particleCount\r\n        ) {\r\n          continue;\r\n        }\r\n\r\n        let translation: CubismVector2 = new CubismVector2();\r\n        translation = currentParticles[particleIndex].position.substract(\r\n          currentParticles[particleIndex - 1].position\r\n        );\r\n\r\n        outputValue = currentOutputs[i].getValue(\r\n          translation,\r\n          currentParticles,\r\n          particleIndex,\r\n          currentOutputs[i].reflect,\r\n          this._options.gravity\r\n        );\r\n\r\n        this._currentRigOutputs.at(settingIndex).outputs[i] = outputValue;\r\n        this._previousRigOutputs.at(settingIndex).outputs[i] = outputValue;\r\n\r\n        const destinationParameterIndex: number =\r\n          currentOutputs[i].destinationParameterIndex;\r\n\r\n        const outParameterCaches: Float32Array =\r\n          !Float32Array.prototype.slice && 'subarray' in Float32Array.prototype\r\n            ? JSON.parse(\r\n                JSON.stringify(\r\n                  parameterValues.subarray(destinationParameterIndex)\r\n                )\r\n              ) // 値渡しするため、JSON.parse, JSON.stringify\r\n            : parameterValues.slice(destinationParameterIndex);\r\n\r\n        updateOutputParameterValue(\r\n          outParameterCaches,\r\n          parameterMinimumValues[destinationParameterIndex],\r\n          parameterMaximumValues[destinationParameterIndex],\r\n          outputValue,\r\n          currentOutputs[i]\r\n        );\r\n\r\n        // 値を反映\r\n        for (\r\n          let offset: number = destinationParameterIndex, outParamIndex = 0;\r\n          offset < this._parameterCaches.length;\r\n          offset++, outParamIndex++\r\n        ) {\r\n          parameterValues[offset] = this._parameterCaches[offset] =\r\n            outParameterCaches[outParamIndex];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 物理演算の評価\r\n   *\r\n   * Pendulum interpolation weights\r\n   *\r\n   * 振り子の計算結果は保存され、パラメータへの出力は保存された前回の結果で補間されます。\r\n   * The result of the pendulum calculation is saved and\r\n   * the output to the parameters is interpolated with the saved previous result of the pendulum calculation.\r\n   *\r\n   * 図で示すと[1]と[2]で補間されます。\r\n   * The figure shows the interpolation between [1] and [2].\r\n   *\r\n   * 補間の重みは最新の振り子計算タイミングと次回のタイミングの間で見た現在時間で決定する。\r\n   * The weight of the interpolation are determined by the current time seen between\r\n   * the latest pendulum calculation timing and the next timing.\r\n   *\r\n   * 図で示すと[2]と[4]の間でみた(3)の位置の重みになる。\r\n   * Figure shows the weight of position (3) as seen between [2] and [4].\r\n   *\r\n   * 解釈として振り子計算のタイミングと重み計算のタイミングがズレる。\r\n   * As an interpretation, the pendulum calculation and weights are misaligned.\r\n   *\r\n   * physics3.jsonにFPS情報が存在しない場合は常に前の振り子状態で設定される。\r\n   * If there is no FPS information in physics3.json, it is always set in the previous pendulum state.\r\n   *\r\n   * この仕様は補間範囲を逸脱したことが原因の震えたような見た目を回避を目的にしている。\r\n   * The purpose of this specification is to avoid the quivering appearance caused by deviations from the interpolation range.\r\n   *\r\n   * ------------ time -------------->\r\n   *\r\n   *                 |+++++|------| <- weight\r\n   * ==[1]====#=====[2]---(3)----(4)\r\n   *          ^ output contents\r\n   *\r\n   * 1:_previousRigOutputs\r\n   * 2:_currentRigOutputs\r\n   * 3:_currentRemainTime (now rendering)\r\n   * 4:next particles timing\r\n   * @param model 物理演算の結果を適用するモデル\r\n   * @param deltaTimeSeconds デルタ時間[秒]\r\n   */\r\n  public evaluate(model: CubismModel, deltaTimeSeconds: number): void {\r\n    let totalAngle: { angle: number };\r\n    let weight: number;\r\n    let radAngle: number;\r\n    let outputValue: number;\r\n    const totalTranslation: CubismVector2 = new CubismVector2();\r\n    let currentSetting: CubismPhysicsSubRig;\r\n    let currentInputs: CubismPhysicsInput[];\r\n    let currentOutputs: CubismPhysicsOutput[];\r\n    let currentParticles: CubismPhysicsParticle[];\r\n\r\n    if (0.0 >= deltaTimeSeconds) {\r\n      return;\r\n    }\r\n\r\n    let parameterValues: Float32Array;\r\n    let parameterMaximumValues: Float32Array;\r\n    let parameterMinimumValues: Float32Array;\r\n    let parameterDefaultValues: Float32Array;\r\n\r\n    let physicsDeltaTime: number;\r\n    this._currentRemainTime += deltaTimeSeconds;\r\n    if (this._currentRemainTime > MaxDeltaTime) {\r\n      this._currentRemainTime = 0.0;\r\n    }\r\n\r\n    parameterValues = model.getModel().parameters.values;\r\n    parameterMaximumValues = model.getModel().parameters.maximumValues;\r\n    parameterMinimumValues = model.getModel().parameters.minimumValues;\r\n    parameterDefaultValues = model.getModel().parameters.defaultValues;\r\n\r\n    if ((this._parameterCaches?.length ?? 0) < model.getParameterCount()) {\r\n      this._parameterCaches = new Float32Array(model.getParameterCount());\r\n    }\r\n\r\n    if ((this._parameterInputCaches?.length ?? 0) < model.getParameterCount()) {\r\n      this._parameterInputCaches = new Float32Array(model.getParameterCount());\r\n      for (let j = 0; j < model.getParameterCount(); ++j) {\r\n        this._parameterInputCaches[j] = parameterValues[j];\r\n      }\r\n    }\r\n\r\n    if (this._physicsRig.fps > 0.0) {\r\n      physicsDeltaTime = 1.0 / this._physicsRig.fps;\r\n    } else {\r\n      physicsDeltaTime = deltaTimeSeconds;\r\n    }\r\n\r\n    while (this._currentRemainTime >= physicsDeltaTime) {\r\n      // copyRigOutputs _currentRigOutputs to _previousRigOutputs\r\n      for (\r\n        let settingIndex = 0;\r\n        settingIndex < this._physicsRig.subRigCount;\r\n        ++settingIndex\r\n      ) {\r\n        currentSetting = this._physicsRig.settings.at(settingIndex);\r\n        currentOutputs = this._physicsRig.outputs.get(\r\n          currentSetting.baseOutputIndex\r\n        );\r\n        for (let i = 0; i < currentSetting.outputCount; ++i) {\r\n          this._previousRigOutputs.at(settingIndex).outputs[i] =\r\n            this._currentRigOutputs.at(settingIndex).outputs[i];\r\n        }\r\n      }\r\n\r\n      // 入力キャッシュとパラメータで線形補間してUpdateParticlesするタイミングでの入力を計算する。\r\n      // Calculate the input at the timing to UpdateParticles by linear interpolation with the _parameterInputCache and parameterValue.\r\n      // _parameterCacheはグループ間での値の伝搬の役割があるので_parameterInputCacheとの分離が必要。\r\n      // _parameterCache needs to be separated from _parameterInputCache because of its role in propagating values between groups.\r\n      const inputWeight = physicsDeltaTime / this._currentRemainTime;\r\n      for (let j = 0; j < model.getParameterCount(); ++j) {\r\n        this._parameterCaches[j] =\r\n          this._parameterInputCaches[j] * (1.0 - inputWeight) +\r\n          parameterValues[j] * inputWeight;\r\n        this._parameterInputCaches[j] = this._parameterCaches[j];\r\n      }\r\n\r\n      for (\r\n        let settingIndex = 0;\r\n        settingIndex < this._physicsRig.subRigCount;\r\n        ++settingIndex\r\n      ) {\r\n        totalAngle = { angle: 0.0 };\r\n        totalTranslation.x = 0.0;\r\n        totalTranslation.y = 0.0;\r\n        currentSetting = this._physicsRig.settings.at(settingIndex);\r\n        currentInputs = this._physicsRig.inputs.get(\r\n          currentSetting.baseInputIndex\r\n        );\r\n        currentOutputs = this._physicsRig.outputs.get(\r\n          currentSetting.baseOutputIndex\r\n        );\r\n        currentParticles = this._physicsRig.particles.get(\r\n          currentSetting.baseParticleIndex\r\n        );\r\n\r\n        // Load input parameters\r\n        for (let i = 0; i < currentSetting.inputCount; ++i) {\r\n          weight = currentInputs[i].weight / MaximumWeight;\r\n\r\n          if (currentInputs[i].sourceParameterIndex == -1) {\r\n            currentInputs[i].sourceParameterIndex = model.getParameterIndex(\r\n              currentInputs[i].source.id\r\n            );\r\n          }\r\n\r\n          currentInputs[i].getNormalizedParameterValue(\r\n            totalTranslation,\r\n            totalAngle,\r\n            this._parameterCaches[currentInputs[i].sourceParameterIndex],\r\n            parameterMinimumValues[currentInputs[i].sourceParameterIndex],\r\n            parameterMaximumValues[currentInputs[i].sourceParameterIndex],\r\n            parameterDefaultValues[currentInputs[i].sourceParameterIndex],\r\n            currentSetting.normalizationPosition,\r\n            currentSetting.normalizationAngle,\r\n            currentInputs[i].reflect,\r\n            weight\r\n          );\r\n        }\r\n\r\n        radAngle = CubismMath.degreesToRadian(-totalAngle.angle);\r\n\r\n        totalTranslation.x =\r\n          totalTranslation.x * CubismMath.cos(radAngle) -\r\n          totalTranslation.y * CubismMath.sin(radAngle);\r\n        totalTranslation.y =\r\n          totalTranslation.x * CubismMath.sin(radAngle) +\r\n          totalTranslation.y * CubismMath.cos(radAngle);\r\n\r\n        // Calculate particles position.\r\n        updateParticles(\r\n          currentParticles,\r\n          currentSetting.particleCount,\r\n          totalTranslation,\r\n          totalAngle.angle,\r\n          this._options.wind,\r\n          MovementThreshold * currentSetting.normalizationPosition.maximum,\r\n          physicsDeltaTime,\r\n          AirResistance\r\n        );\r\n\r\n        // Update output parameters.\r\n        for (let i = 0; i < currentSetting.outputCount; ++i) {\r\n          const particleIndex = currentOutputs[i].vertexIndex;\r\n\r\n          if (currentOutputs[i].destinationParameterIndex == -1) {\r\n            currentOutputs[i].destinationParameterIndex =\r\n              model.getParameterIndex(currentOutputs[i].destination.id);\r\n          }\r\n\r\n          if (\r\n            particleIndex < 1 ||\r\n            particleIndex >= currentSetting.particleCount\r\n          ) {\r\n            continue;\r\n          }\r\n\r\n          const translation: CubismVector2 = new CubismVector2();\r\n          translation.x =\r\n            currentParticles[particleIndex].position.x -\r\n            currentParticles[particleIndex - 1].position.x;\r\n          translation.y =\r\n            currentParticles[particleIndex].position.y -\r\n            currentParticles[particleIndex - 1].position.y;\r\n\r\n          outputValue = currentOutputs[i].getValue(\r\n            translation,\r\n            currentParticles,\r\n            particleIndex,\r\n            currentOutputs[i].reflect,\r\n            this._options.gravity\r\n          );\r\n\r\n          this._currentRigOutputs.at(settingIndex).outputs[i] = outputValue;\r\n\r\n          const destinationParameterIndex: number =\r\n            currentOutputs[i].destinationParameterIndex;\r\n          const outParameterCaches: Float32Array =\r\n            !Float32Array.prototype.slice &&\r\n            'subarray' in Float32Array.prototype\r\n              ? JSON.parse(\r\n                  JSON.stringify(\r\n                    this._parameterCaches.subarray(destinationParameterIndex)\r\n                  )\r\n                ) // 値渡しするため、JSON.parse, JSON.stringify\r\n              : this._parameterCaches.slice(destinationParameterIndex);\r\n\r\n          updateOutputParameterValue(\r\n            outParameterCaches,\r\n            parameterMinimumValues[destinationParameterIndex],\r\n            parameterMaximumValues[destinationParameterIndex],\r\n            outputValue,\r\n            currentOutputs[i]\r\n          );\r\n\r\n          // 値を反映\r\n          for (\r\n            let offset: number = destinationParameterIndex, outParamIndex = 0;\r\n            offset < this._parameterCaches.length;\r\n            offset++, outParamIndex++\r\n          ) {\r\n            this._parameterCaches[offset] = outParameterCaches[outParamIndex];\r\n          }\r\n        }\r\n      }\r\n      this._currentRemainTime -= physicsDeltaTime;\r\n    }\r\n\r\n    const alpha: number = this._currentRemainTime / physicsDeltaTime;\r\n    this.interpolate(model, alpha);\r\n  }\r\n\r\n  /**\r\n   * 物理演算結果の適用\r\n   * 振り子演算の最新の結果と一つ前の結果から指定した重みで適用する。\r\n   * @param model 物理演算の結果を適用するモデル\r\n   * @param weight 最新結果の重み\r\n   */\r\n  public interpolate(model: CubismModel, weight: number): void {\r\n    let currentOutputs: CubismPhysicsOutput[];\r\n    let currentSetting: CubismPhysicsSubRig;\r\n    let parameterValues: Float32Array;\r\n    let parameterMaximumValues: Float32Array;\r\n    let parameterMinimumValues: Float32Array;\r\n\r\n    parameterValues = model.getModel().parameters.values;\r\n    parameterMaximumValues = model.getModel().parameters.maximumValues;\r\n    parameterMinimumValues = model.getModel().parameters.minimumValues;\r\n\r\n    for (\r\n      let settingIndex = 0;\r\n      settingIndex < this._physicsRig.subRigCount;\r\n      ++settingIndex\r\n    ) {\r\n      currentSetting = this._physicsRig.settings.at(settingIndex);\r\n      currentOutputs = this._physicsRig.outputs.get(\r\n        currentSetting.baseOutputIndex\r\n      );\r\n\r\n      // Load input parameters.\r\n      for (let i = 0; i < currentSetting.outputCount; ++i) {\r\n        if (currentOutputs[i].destinationParameterIndex == -1) {\r\n          continue;\r\n        }\r\n\r\n        const destinationParameterIndex: number =\r\n          currentOutputs[i].destinationParameterIndex;\r\n        const outParameterValues: Float32Array =\r\n          !Float32Array.prototype.slice && 'subarray' in Float32Array.prototype\r\n            ? JSON.parse(\r\n                JSON.stringify(\r\n                  parameterValues.subarray(destinationParameterIndex)\r\n                )\r\n              ) // 値渡しするため、JSON.parse, JSON.stringify\r\n            : parameterValues.slice(destinationParameterIndex);\r\n\r\n        updateOutputParameterValue(\r\n          outParameterValues,\r\n          parameterMinimumValues[destinationParameterIndex],\r\n          parameterMaximumValues[destinationParameterIndex],\r\n          this._previousRigOutputs.at(settingIndex).outputs[i] * (1 - weight) +\r\n            this._currentRigOutputs.at(settingIndex).outputs[i] * weight,\r\n          currentOutputs[i]\r\n        );\r\n\r\n        // 値を反映\r\n        for (\r\n          let offset: number = destinationParameterIndex, outParamIndex = 0;\r\n          offset < parameterValues.length;\r\n          offset++, outParamIndex++\r\n        ) {\r\n          parameterValues[offset] = outParameterValues[outParamIndex];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * オプションの設定\r\n   * @param options オプション\r\n   */\r\n  public setOptions(options: Options): void {\r\n    this._options = options;\r\n  }\r\n\r\n  /**\r\n   * オプションの取得\r\n   * @return オプション\r\n   */\r\n  public getOption(): Options {\r\n    return this._options;\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    this._physicsRig = null;\r\n\r\n    // set default options\r\n    this._options = new Options();\r\n    this._options.gravity.y = -1.0;\r\n    this._options.gravity.x = 0.0;\r\n    this._options.wind.x = 0.0;\r\n    this._options.wind.y = 0.0;\r\n    this._currentRigOutputs = new csmVector<PhysicsOutput>();\r\n    this._previousRigOutputs = new csmVector<PhysicsOutput>();\r\n    this._currentRemainTime = 0.0;\r\n    this._parameterCaches = null;\r\n    this._parameterInputCaches = null;\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    this._physicsRig = void 0;\r\n    this._physicsRig = null;\r\n  }\r\n\r\n  /**\r\n   * 初期化する\r\n   */\r\n  public initialize(): void {\r\n    let strand: CubismPhysicsParticle[];\r\n    let currentSetting: CubismPhysicsSubRig;\r\n    let radius: CubismVector2;\r\n\r\n    for (\r\n      let settingIndex = 0;\r\n      settingIndex < this._physicsRig.subRigCount;\r\n      ++settingIndex\r\n    ) {\r\n      currentSetting = this._physicsRig.settings.at(settingIndex);\r\n      strand = this._physicsRig.particles.get(currentSetting.baseParticleIndex);\r\n\r\n      // Initialize the top of particle.\r\n      strand[0].initialPosition = new CubismVector2(0.0, 0.0);\r\n      strand[0].lastPosition = new CubismVector2(\r\n        strand[0].initialPosition.x,\r\n        strand[0].initialPosition.y\r\n      );\r\n      strand[0].lastGravity = new CubismVector2(0.0, -1.0);\r\n      strand[0].lastGravity.y *= -1.0;\r\n      strand[0].velocity = new CubismVector2(0.0, 0.0);\r\n      strand[0].force = new CubismVector2(0.0, 0.0);\r\n\r\n      // Initialize particles.\r\n      for (let i = 1; i < currentSetting.particleCount; ++i) {\r\n        radius = new CubismVector2(0.0, 0.0);\r\n        radius.y = strand[i].radius;\r\n        strand[i].initialPosition = new CubismVector2(\r\n          strand[i - 1].initialPosition.x + radius.x,\r\n          strand[i - 1].initialPosition.y + radius.y\r\n        );\r\n        strand[i].position = new CubismVector2(\r\n          strand[i].initialPosition.x,\r\n          strand[i].initialPosition.y\r\n        );\r\n        strand[i].lastPosition = new CubismVector2(\r\n          strand[i].initialPosition.x,\r\n          strand[i].initialPosition.y\r\n        );\r\n        strand[i].lastGravity = new CubismVector2(0.0, -1.0);\r\n        strand[i].lastGravity.y *= -1.0;\r\n        strand[i].velocity = new CubismVector2(0.0, 0.0);\r\n        strand[i].force = new CubismVector2(0.0, 0.0);\r\n      }\r\n    }\r\n  }\r\n\r\n  _physicsRig: CubismPhysicsRig; // 物理演算のデータ\r\n  _options: Options; // オプション\r\n\r\n  _currentRigOutputs: csmVector<PhysicsOutput>; ///< 最新の振り子計算の結果\r\n  _previousRigOutputs: csmVector<PhysicsOutput>; ///< 一つ前の振り子計算の結果\r\n\r\n  _currentRemainTime: number; ///< 物理演算が処理していない時間\r\n\r\n  _parameterCaches: Float32Array; ///< Evaluateで利用するパラメータのキャッシュ\r\n  _parameterInputCaches: Float32Array; ///< UpdateParticlesが動くときの入力をキャッシュ\r\n}\r\n\r\n/**\r\n * 物理演算のオプション\r\n */\r\nexport class Options {\r\n  constructor() {\r\n    this.gravity = new CubismVector2(0, 0);\r\n    this.wind = new CubismVector2(0, 0);\r\n  }\r\n\r\n  gravity: CubismVector2; // 重力方向\r\n  wind: CubismVector2; // 風の方向\r\n}\r\n\r\n/**\r\n * パラメータに適用する前の物理演算の出力結果\r\n */\r\nexport class PhysicsOutput {\r\n  constructor() {\r\n    this.outputs = new csmVector<number>(0);\r\n  }\r\n\r\n  outputs: csmVector<number>; // 物理演算出力結果\r\n}\r\n\r\n/**\r\n * Gets sign.\r\n *\r\n * @param value Evaluation target value.\r\n *\r\n * @return Sign of value.\r\n */\r\nfunction sign(value: number): number {\r\n  let ret = 0;\r\n\r\n  if (value > 0.0) {\r\n    ret = 1;\r\n  } else if (value < 0.0) {\r\n    ret = -1;\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\nfunction getInputTranslationXFromNormalizedParameterValue(\r\n  targetTranslation: CubismVector2,\r\n  targetAngle: { angle: number },\r\n  value: number,\r\n  parameterMinimumValue: number,\r\n  parameterMaximumValue: number,\r\n  parameterDefaultValue: number,\r\n  normalizationPosition: CubismPhysicsNormalization,\r\n  normalizationAngle: CubismPhysicsNormalization,\r\n  isInverted: boolean,\r\n  weight: number\r\n): void {\r\n  targetTranslation.x +=\r\n    normalizeParameterValue(\r\n      value,\r\n      parameterMinimumValue,\r\n      parameterMaximumValue,\r\n      parameterDefaultValue,\r\n      normalizationPosition.minimum,\r\n      normalizationPosition.maximum,\r\n      normalizationPosition.defalut,\r\n      isInverted\r\n    ) * weight;\r\n}\r\n\r\nfunction getInputTranslationYFromNormalizedParamterValue(\r\n  targetTranslation: CubismVector2,\r\n  targetAngle: { angle: number },\r\n  value: number,\r\n  parameterMinimumValue: number,\r\n  parameterMaximumValue: number,\r\n  parameterDefaultValue: number,\r\n  normalizationPosition: CubismPhysicsNormalization,\r\n  normalizationAngle: CubismPhysicsNormalization,\r\n  isInverted: boolean,\r\n  weight: number\r\n): void {\r\n  targetTranslation.y +=\r\n    normalizeParameterValue(\r\n      value,\r\n      parameterMinimumValue,\r\n      parameterMaximumValue,\r\n      parameterDefaultValue,\r\n      normalizationPosition.minimum,\r\n      normalizationPosition.maximum,\r\n      normalizationPosition.defalut,\r\n      isInverted\r\n    ) * weight;\r\n}\r\n\r\nfunction getInputAngleFromNormalizedParameterValue(\r\n  targetTranslation: CubismVector2,\r\n  targetAngle: { angle: number },\r\n  value: number,\r\n  parameterMinimumValue: number,\r\n  parameterMaximumValue: number,\r\n  parameterDefaultValue: number,\r\n  normalizaitionPosition: CubismPhysicsNormalization,\r\n  normalizationAngle: CubismPhysicsNormalization,\r\n  isInverted: boolean,\r\n  weight: number\r\n): void {\r\n  targetAngle.angle +=\r\n    normalizeParameterValue(\r\n      value,\r\n      parameterMinimumValue,\r\n      parameterMaximumValue,\r\n      parameterDefaultValue,\r\n      normalizationAngle.minimum,\r\n      normalizationAngle.maximum,\r\n      normalizationAngle.defalut,\r\n      isInverted\r\n    ) * weight;\r\n}\r\n\r\nfunction getOutputTranslationX(\r\n  translation: CubismVector2,\r\n  particles: CubismPhysicsParticle[],\r\n  particleIndex: number,\r\n  isInverted: boolean,\r\n  parentGravity: CubismVector2\r\n): number {\r\n  let outputValue: number = translation.x;\r\n\r\n  if (isInverted) {\r\n    outputValue *= -1.0;\r\n  }\r\n\r\n  return outputValue;\r\n}\r\n\r\nfunction getOutputTranslationY(\r\n  translation: CubismVector2,\r\n  particles: CubismPhysicsParticle[],\r\n  particleIndex: number,\r\n  isInverted: boolean,\r\n  parentGravity: CubismVector2\r\n): number {\r\n  let outputValue: number = translation.y;\r\n\r\n  if (isInverted) {\r\n    outputValue *= -1.0;\r\n  }\r\n  return outputValue;\r\n}\r\n\r\nfunction getOutputAngle(\r\n  translation: CubismVector2,\r\n  particles: CubismPhysicsParticle[],\r\n  particleIndex: number,\r\n  isInverted: boolean,\r\n  parentGravity: CubismVector2\r\n): number {\r\n  let outputValue: number;\r\n\r\n  if (particleIndex >= 2) {\r\n    parentGravity = particles[particleIndex - 1].position.substract(\r\n      particles[particleIndex - 2].position\r\n    );\r\n  } else {\r\n    parentGravity = parentGravity.multiplyByScaler(-1.0);\r\n  }\r\n\r\n  outputValue = CubismMath.directionToRadian(parentGravity, translation);\r\n\r\n  if (isInverted) {\r\n    outputValue *= -1.0;\r\n  }\r\n\r\n  return outputValue;\r\n}\r\n\r\nfunction getRangeValue(min: number, max: number): number {\r\n  const maxValue: number = CubismMath.max(min, max);\r\n  const minValue: number = CubismMath.min(min, max);\r\n\r\n  return CubismMath.abs(maxValue - minValue);\r\n}\r\n\r\nfunction getDefaultValue(min: number, max: number): number {\r\n  const minValue: number = CubismMath.min(min, max);\r\n  return minValue + getRangeValue(min, max) / 2.0;\r\n}\r\n\r\nfunction getOutputScaleTranslationX(\r\n  translationScale: CubismVector2,\r\n  angleScale: number\r\n): number {\r\n  return JSON.parse(JSON.stringify(translationScale.x));\r\n}\r\n\r\nfunction getOutputScaleTranslationY(\r\n  translationScale: CubismVector2,\r\n  angleScale: number\r\n): number {\r\n  return JSON.parse(JSON.stringify(translationScale.y));\r\n}\r\n\r\nfunction getOutputScaleAngle(\r\n  translationScale: CubismVector2,\r\n  angleScale: number\r\n): number {\r\n  return JSON.parse(JSON.stringify(angleScale));\r\n}\r\n\r\n/**\r\n * Updates particles.\r\n *\r\n * @param strand                Target array of particle.\r\n * @param strandCount           Count of particle.\r\n * @param totalTranslation      Total translation value.\r\n * @param totalAngle            Total angle.\r\n * @param windDirection         Direction of Wind.\r\n * @param thresholdValue        Threshold of movement.\r\n * @param deltaTimeSeconds      Delta time.\r\n * @param airResistance         Air resistance.\r\n */\r\nfunction updateParticles(\r\n  strand: CubismPhysicsParticle[],\r\n  strandCount: number,\r\n  totalTranslation: CubismVector2,\r\n  totalAngle: number,\r\n  windDirection: CubismVector2,\r\n  thresholdValue: number,\r\n  deltaTimeSeconds: number,\r\n  airResistance: number\r\n) {\r\n  let totalRadian: number;\r\n  let delay: number;\r\n  let radian: number;\r\n  let currentGravity: CubismVector2;\r\n  let direction: CubismVector2 = new CubismVector2(0.0, 0.0);\r\n  let velocity: CubismVector2 = new CubismVector2(0.0, 0.0);\r\n  let force: CubismVector2 = new CubismVector2(0.0, 0.0);\r\n  let newDirection: CubismVector2 = new CubismVector2(0.0, 0.0);\r\n\r\n  strand[0].position = new CubismVector2(\r\n    totalTranslation.x,\r\n    totalTranslation.y\r\n  );\r\n\r\n  totalRadian = CubismMath.degreesToRadian(totalAngle);\r\n  currentGravity = CubismMath.radianToDirection(totalRadian);\r\n  currentGravity.normalize();\r\n\r\n  for (let i = 1; i < strandCount; ++i) {\r\n    strand[i].force = currentGravity\r\n      .multiplyByScaler(strand[i].acceleration)\r\n      .add(windDirection);\r\n\r\n    strand[i].lastPosition = new CubismVector2(\r\n      strand[i].position.x,\r\n      strand[i].position.y\r\n    );\r\n\r\n    delay = strand[i].delay * deltaTimeSeconds * 30.0;\r\n\r\n    direction = strand[i].position.substract(strand[i - 1].position);\r\n\r\n    radian =\r\n      CubismMath.directionToRadian(strand[i].lastGravity, currentGravity) /\r\n      airResistance;\r\n\r\n    direction.x =\r\n      CubismMath.cos(radian) * direction.x -\r\n      direction.y * CubismMath.sin(radian);\r\n    direction.y =\r\n      CubismMath.sin(radian) * direction.x +\r\n      direction.y * CubismMath.cos(radian);\r\n\r\n    strand[i].position = strand[i - 1].position.add(direction);\r\n\r\n    velocity = strand[i].velocity.multiplyByScaler(delay);\r\n    force = strand[i].force.multiplyByScaler(delay).multiplyByScaler(delay);\r\n\r\n    strand[i].position = strand[i].position.add(velocity).add(force);\r\n\r\n    newDirection = strand[i].position.substract(strand[i - 1].position);\r\n    newDirection.normalize();\r\n\r\n    strand[i].position = strand[i - 1].position.add(\r\n      newDirection.multiplyByScaler(strand[i].radius)\r\n    );\r\n\r\n    if (CubismMath.abs(strand[i].position.x) < thresholdValue) {\r\n      strand[i].position.x = 0.0;\r\n    }\r\n\r\n    if (delay != 0.0) {\r\n      strand[i].velocity = strand[i].position.substract(strand[i].lastPosition);\r\n      strand[i].velocity = strand[i].velocity.divisionByScalar(delay);\r\n      strand[i].velocity = strand[i].velocity.multiplyByScaler(\r\n        strand[i].mobility\r\n      );\r\n    }\r\n\r\n    strand[i].force = new CubismVector2(0.0, 0.0);\r\n    strand[i].lastGravity = new CubismVector2(\r\n      currentGravity.x,\r\n      currentGravity.y\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Updates particles for stabilization.\r\n *\r\n * @param strand                Target array of particle.\r\n * @param strandCount           Count of particle.\r\n * @param totalTranslation      Total translation value.\r\n * @param totalAngle            Total angle.\r\n * @param windDirection         Direction of Wind.\r\n * @param thresholdValue        Threshold of movement.\r\n */\r\nfunction updateParticlesForStabilization(\r\n  strand: CubismPhysicsParticle[],\r\n  strandCount: number,\r\n  totalTranslation: CubismVector2,\r\n  totalAngle: number,\r\n  windDirection: CubismVector2,\r\n  thresholdValue: number\r\n) {\r\n  let totalRadian: number;\r\n  let currentGravity: CubismVector2;\r\n  let force: CubismVector2 = new CubismVector2(0.0, 0.0);\r\n\r\n  strand[0].position = new CubismVector2(\r\n    totalTranslation.x,\r\n    totalTranslation.y\r\n  );\r\n\r\n  totalRadian = CubismMath.degreesToRadian(totalAngle);\r\n  currentGravity = CubismMath.radianToDirection(totalRadian);\r\n  currentGravity.normalize();\r\n\r\n  for (let i = 1; i < strandCount; ++i) {\r\n    strand[i].force = currentGravity\r\n      .multiplyByScaler(strand[i].acceleration)\r\n      .add(windDirection);\r\n\r\n    strand[i].lastPosition = new CubismVector2(\r\n      strand[i].position.x,\r\n      strand[i].position.y\r\n    );\r\n\r\n    strand[i].velocity = new CubismVector2(0.0, 0.0);\r\n    force = strand[i].force;\r\n    force.normalize();\r\n\r\n    force = force.multiplyByScaler(strand[i].radius);\r\n    strand[i].position = strand[i - 1].position.add(force);\r\n\r\n    if (CubismMath.abs(strand[i].position.x) < thresholdValue) {\r\n      strand[i].position.x = 0.0;\r\n    }\r\n\r\n    strand[i].force = new CubismVector2(0.0, 0.0);\r\n    strand[i].lastGravity = new CubismVector2(\r\n      currentGravity.x,\r\n      currentGravity.y\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Updates output parameter value.\r\n * @param parameterValue            Target parameter value.\r\n * @param parameterValueMinimum     Minimum of parameter value.\r\n * @param parameterValueMaximum     Maximum of parameter value.\r\n * @param translation               Translation value.\r\n */\r\nfunction updateOutputParameterValue(\r\n  parameterValue: Float32Array,\r\n  parameterValueMinimum: number,\r\n  parameterValueMaximum: number,\r\n  translation: number,\r\n  output: CubismPhysicsOutput\r\n): void {\r\n  let outputScale: number;\r\n  let value: number;\r\n  let weight: number;\r\n\r\n  outputScale = output.getScale(output.translationScale, output.angleScale);\r\n\r\n  value = translation * outputScale;\r\n\r\n  if (value < parameterValueMinimum) {\r\n    if (value < output.valueBelowMinimum) {\r\n      output.valueBelowMinimum = value;\r\n    }\r\n\r\n    value = parameterValueMinimum;\r\n  } else if (value > parameterValueMaximum) {\r\n    if (value > output.valueExceededMaximum) {\r\n      output.valueExceededMaximum = value;\r\n    }\r\n\r\n    value = parameterValueMaximum;\r\n  }\r\n\r\n  weight = output.weight / MaximumWeight;\r\n\r\n  if (weight >= 1.0) {\r\n    parameterValue[0] = value;\r\n  } else {\r\n    value = parameterValue[0] * (1.0 - weight) + value * weight;\r\n    parameterValue[0] = value;\r\n  }\r\n}\r\n\r\nfunction normalizeParameterValue(\r\n  value: number,\r\n  parameterMinimum: number,\r\n  parameterMaximum: number,\r\n  parameterDefault: number,\r\n  normalizedMinimum: number,\r\n  normalizedMaximum: number,\r\n  normalizedDefault: number,\r\n  isInverted: boolean\r\n) {\r\n  let result = 0.0;\r\n\r\n  const maxValue: number = CubismMath.max(parameterMaximum, parameterMinimum);\r\n\r\n  if (maxValue < value) {\r\n    value = maxValue;\r\n  }\r\n\r\n  const minValue: number = CubismMath.min(parameterMaximum, parameterMinimum);\r\n\r\n  if (minValue > value) {\r\n    value = minValue;\r\n  }\r\n\r\n  const minNormValue: number = CubismMath.min(\r\n    normalizedMinimum,\r\n    normalizedMaximum\r\n  );\r\n  const maxNormValue: number = CubismMath.max(\r\n    normalizedMinimum,\r\n    normalizedMaximum\r\n  );\r\n  const middleNormValue: number = normalizedDefault;\r\n\r\n  const middleValue: number = getDefaultValue(minValue, maxValue);\r\n  const paramValue: number = value - middleValue;\r\n\r\n  switch (sign(paramValue)) {\r\n    case 1: {\r\n      const nLength: number = maxNormValue - middleNormValue;\r\n      const pLength: number = maxValue - middleValue;\r\n\r\n      if (pLength != 0.0) {\r\n        result = paramValue * (nLength / pLength);\r\n        result += middleNormValue;\r\n      }\r\n\r\n      break;\r\n    }\r\n    case -1: {\r\n      const nLength: number = minNormValue - middleNormValue;\r\n      const pLength: number = minValue - middleValue;\r\n\r\n      if (pLength != 0.0) {\r\n        result = paramValue * (nLength / pLength);\r\n        result += middleNormValue;\r\n      }\r\n\r\n      break;\r\n    }\r\n    case 0: {\r\n      result = middleNormValue;\r\n\r\n      break;\r\n    }\r\n    default: {\r\n      break;\r\n    }\r\n  }\r\n\r\n  return isInverted ? result : result * -1.0;\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismphysics';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismPhysics = $.CubismPhysics;\r\n  export type CubismPhysics = $.CubismPhysics;\r\n  export const Options = $.Options;\r\n  export type Options = $.Options;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\n/**\r\n * 矩形形状（座標・長さはfloat値）を定義するクラス\r\n */\r\nexport class csmRect {\r\n  /**\r\n   * コンストラクタ\r\n   * @param x 左端X座標\r\n   * @param y 上端Y座標\r\n   * @param w 幅\r\n   * @param h 高さ\r\n   */\r\n  public constructor(x?: number, y?: number, w?: number, h?: number) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = w;\r\n    this.height = h;\r\n  }\r\n\r\n  /**\r\n   * 矩形中央のX座標を取得する\r\n   */\r\n  public getCenterX(): number {\r\n    return this.x + 0.5 * this.width;\r\n  }\r\n\r\n  /**\r\n   * 矩形中央のY座標を取得する\r\n   */\r\n  public getCenterY(): number {\r\n    return this.y + 0.5 * this.height;\r\n  }\r\n\r\n  /**\r\n   * 右側のX座標を取得する\r\n   */\r\n  public getRight(): number {\r\n    return this.x + this.width;\r\n  }\r\n\r\n  /**\r\n   * 下端のY座標を取得する\r\n   */\r\n  public getBottom(): number {\r\n    return this.y + this.height;\r\n  }\r\n\r\n  /**\r\n   * 矩形に値をセットする\r\n   * @param r 矩形のインスタンス\r\n   */\r\n  public setRect(r: csmRect): void {\r\n    this.x = r.x;\r\n    this.y = r.y;\r\n    this.width = r.width;\r\n    this.height = r.height;\r\n  }\r\n\r\n  /**\r\n   * 矩形中央を軸にして縦横を拡縮する\r\n   * @param w 幅方向に拡縮する量\r\n   * @param h 高さ方向に拡縮する量\r\n   */\r\n  public expand(w: number, h: number) {\r\n    this.x -= w;\r\n    this.y -= h;\r\n    this.width += w * 2.0;\r\n    this.height += h * 2.0;\r\n  }\r\n\r\n  public x: number; // 左端X座標\r\n  public y: number; // 上端Y座標\r\n  public width: number; // 幅\r\n  public height: number; // 高さ\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './csmrectf';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const csmRect = $.csmRect;\r\n  export type csmRect = $.csmRect;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Constant } from '../live2dcubismframework';\r\nimport { CubismMatrix44 } from '../math/cubismmatrix44';\r\nimport { CubismModel } from '../model/cubismmodel';\r\nimport { csmMap } from '../type/csmmap';\r\nimport { csmRect } from '../type/csmrectf';\r\nimport { csmVector } from '../type/csmvector';\r\nimport { CubismLogError, CubismLogWarning } from '../utils/cubismdebug';\r\nimport {\r\n  CubismBlendMode,\r\n  CubismRenderer,\r\n  CubismTextureColor,\r\n} from './cubismrenderer';\r\n\r\nconst ColorChannelCount = 4; // 実験時に1チャンネルの場合は1、RGBだけの場合は3、アルファも含める場合は4\r\nconst ClippingMaskMaxCountOnDefault = 36; // 通常のフレームバッファ一枚あたりのマスク最大数\r\nconst ClippingMaskMaxCountOnMultiRenderTexture = 32; // フレームバッファが2枚以上ある場合のフレームバッファ一枚あたりのマスク最大数\r\n\r\nconst ShaderCount = 10; // シェーダーの数 = マスク生成用 + (通常用 + 加算 + 乗算) * (マスク無の乗算済アルファ対応版 + マスク有の乗算済アルファ対応版 + マスク有反転の乗算済アルファ対応版)\r\nlet s_instance: CubismShader_WebGL;\r\nlet s_viewport: number[];\r\nlet s_fbo: WebGLFramebuffer;\r\n\r\n/**\r\n * クリッピングマスクの処理を実行するクラス\r\n */\r\nexport class CubismClippingManager_WebGL {\r\n  /**\r\n   * カラーチャンネル（RGBA）のフラグを取得する\r\n   * @param channelNo カラーチャンネル（RGBA）の番号（0:R, 1:G, 2:B, 3:A）\r\n   */\r\n  public getChannelFlagAsColor(channelNo: number): CubismTextureColor {\r\n    return this._channelColors.at(channelNo);\r\n  }\r\n\r\n  /**\r\n   * テンポラリのレンダーテクスチャのアドレスを取得する\r\n   * FrameBufferObjectが存在しない場合、新しく生成する\r\n   *\r\n   * @return レンダーテクスチャの配列\r\n   */\r\n  public getMaskRenderTexture(): csmVector<WebGLFramebuffer> {\r\n    // テンポラリのRenderTextureを取得する\r\n    if (this._maskTexture && this._maskTexture.textures != null) {\r\n      // 前回使ったものを返す\r\n      this._maskTexture.frameNo = this._currentFrameNo;\r\n    } else {\r\n      // FrameBufferObjectが存在しない場合、新しく生成する\r\n      if (this._maskRenderTextures != null) {\r\n        this._maskRenderTextures.clear();\r\n      }\r\n      this._maskRenderTextures = new csmVector<WebGLFramebuffer>();\r\n\r\n      // ColorBufferObjectが存在しない場合、新しく生成する\r\n      if (this._maskColorBuffers != null) {\r\n        this._maskColorBuffers.clear();\r\n      }\r\n      this._maskColorBuffers = new csmVector<WebGLTexture>();\r\n\r\n      // クリッピングバッファサイズを取得\r\n      const size: number = this._clippingMaskBufferSize;\r\n\r\n      for (let index = 0; index < this._renderTextureCount; index++) {\r\n        this._maskColorBuffers.pushBack(this.gl.createTexture()); // 直接代入\r\n        this.gl.bindTexture(\r\n          this.gl.TEXTURE_2D,\r\n          this._maskColorBuffers.at(index)\r\n        );\r\n        this.gl.texImage2D(\r\n          this.gl.TEXTURE_2D,\r\n          0,\r\n          this.gl.RGBA,\r\n          size,\r\n          size,\r\n          0,\r\n          this.gl.RGBA,\r\n          this.gl.UNSIGNED_BYTE,\r\n          null\r\n        );\r\n        this.gl.texParameteri(\r\n          this.gl.TEXTURE_2D,\r\n          this.gl.TEXTURE_WRAP_S,\r\n          this.gl.CLAMP_TO_EDGE\r\n        );\r\n        this.gl.texParameteri(\r\n          this.gl.TEXTURE_2D,\r\n          this.gl.TEXTURE_WRAP_T,\r\n          this.gl.CLAMP_TO_EDGE\r\n        );\r\n        this.gl.texParameteri(\r\n          this.gl.TEXTURE_2D,\r\n          this.gl.TEXTURE_MIN_FILTER,\r\n          this.gl.LINEAR\r\n        );\r\n        this.gl.texParameteri(\r\n          this.gl.TEXTURE_2D,\r\n          this.gl.TEXTURE_MAG_FILTER,\r\n          this.gl.LINEAR\r\n        );\r\n        this.gl.bindTexture(this.gl.TEXTURE_2D, null);\r\n\r\n        this._maskRenderTextures.pushBack(this.gl.createFramebuffer());\r\n        this.gl.bindFramebuffer(\r\n          this.gl.FRAMEBUFFER,\r\n          this._maskRenderTextures.at(index)\r\n        );\r\n        this.gl.framebufferTexture2D(\r\n          this.gl.FRAMEBUFFER,\r\n          this.gl.COLOR_ATTACHMENT0,\r\n          this.gl.TEXTURE_2D,\r\n          this._maskColorBuffers.at(index),\r\n          0\r\n        );\r\n      }\r\n      this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo);\r\n\r\n      this._maskTexture = new CubismRenderTextureResource(\r\n        this._currentFrameNo,\r\n        this._maskRenderTextures\r\n      );\r\n    }\r\n\r\n    return this._maskTexture.textures;\r\n  }\r\n\r\n  /**\r\n   * WebGLレンダリングコンテキストを設定する\r\n   * @param gl WebGLレンダリングコンテキスト\r\n   */\r\n  public setGL(gl: WebGLRenderingContext): void {\r\n    this.gl = gl;\r\n  }\r\n\r\n  /**\r\n   * マスクされる描画オブジェクト群全体を囲む矩形（モデル座標系）を計算する\r\n   * @param model モデルのインスタンス\r\n   * @param clippingContext クリッピングマスクのコンテキスト\r\n   */\r\n  public calcClippedDrawTotalBounds(\r\n    model: CubismModel,\r\n    clippingContext: CubismClippingContext\r\n  ): void {\r\n    // 被クリッピングマスク（マスクされる描画オブジェクト）の全体の矩形\r\n    let clippedDrawTotalMinX: number = Number.MAX_VALUE;\r\n    let clippedDrawTotalMinY: number = Number.MAX_VALUE;\r\n    let clippedDrawTotalMaxX: number = Number.MIN_VALUE;\r\n    let clippedDrawTotalMaxY: number = Number.MIN_VALUE;\r\n\r\n    // このマスクが実際に必要か判定する\r\n    // このクリッピングを利用する「描画オブジェクト」がひとつでも使用可能であればマスクを生成する必要がある\r\n    const clippedDrawCount: number =\r\n      clippingContext._clippedDrawableIndexList.length;\r\n\r\n    for (\r\n      let clippedDrawableIndex = 0;\r\n      clippedDrawableIndex < clippedDrawCount;\r\n      clippedDrawableIndex++\r\n    ) {\r\n      // マスクを使用する描画オブジェクトの描画される矩形を求める\r\n      const drawableIndex: number =\r\n        clippingContext._clippedDrawableIndexList[clippedDrawableIndex];\r\n\r\n      const drawableVertexCount: number =\r\n        model.getDrawableVertexCount(drawableIndex);\r\n      const drawableVertexes: Float32Array =\r\n        model.getDrawableVertices(drawableIndex);\r\n\r\n      let minX: number = Number.MAX_VALUE;\r\n      let minY: number = Number.MAX_VALUE;\r\n      let maxX: number = -Number.MAX_VALUE;\r\n      let maxY: number = -Number.MAX_VALUE;\r\n\r\n      const loop: number = drawableVertexCount * Constant.vertexStep;\r\n      for (\r\n        let pi: number = Constant.vertexOffset;\r\n        pi < loop;\r\n        pi += Constant.vertexStep\r\n      ) {\r\n        const x: number = drawableVertexes[pi];\r\n        const y: number = drawableVertexes[pi + 1];\r\n\r\n        if (x < minX) {\r\n          minX = x;\r\n        }\r\n        if (x > maxX) {\r\n          maxX = x;\r\n        }\r\n        if (y < minY) {\r\n          minY = y;\r\n        }\r\n        if (y > maxY) {\r\n          maxY = y;\r\n        }\r\n      }\r\n\r\n      // 有効な点が一つも取れなかったのでスキップ\r\n      if (minX == Number.MAX_VALUE) {\r\n        continue;\r\n      }\r\n\r\n      // 全体の矩形に反映\r\n      if (minX < clippedDrawTotalMinX) {\r\n        clippedDrawTotalMinX = minX;\r\n      }\r\n      if (minY < clippedDrawTotalMinY) {\r\n        clippedDrawTotalMinY = minY;\r\n      }\r\n      if (maxX > clippedDrawTotalMaxX) {\r\n        clippedDrawTotalMaxX = maxX;\r\n      }\r\n      if (maxY > clippedDrawTotalMaxY) {\r\n        clippedDrawTotalMaxY = maxY;\r\n      }\r\n\r\n      if (clippedDrawTotalMinX == Number.MAX_VALUE) {\r\n        clippingContext._allClippedDrawRect.x = 0.0;\r\n        clippingContext._allClippedDrawRect.y = 0.0;\r\n        clippingContext._allClippedDrawRect.width = 0.0;\r\n        clippingContext._allClippedDrawRect.height = 0.0;\r\n        clippingContext._isUsing = false;\r\n      } else {\r\n        clippingContext._isUsing = true;\r\n        const w: number = clippedDrawTotalMaxX - clippedDrawTotalMinX;\r\n        const h: number = clippedDrawTotalMaxY - clippedDrawTotalMinY;\r\n        clippingContext._allClippedDrawRect.x = clippedDrawTotalMinX;\r\n        clippingContext._allClippedDrawRect.y = clippedDrawTotalMinY;\r\n        clippingContext._allClippedDrawRect.width = w;\r\n        clippingContext._allClippedDrawRect.height = h;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    this._currentMaskRenderTexture = null;\r\n    this._maskColorBuffers = null;\r\n    this._currentFrameNo = 0;\r\n    this._renderTextureCount = 0;\r\n    this._clippingMaskBufferSize = 256;\r\n    this._clippingContextListForMask = new csmVector<CubismClippingContext>();\r\n    this._clippingContextListForDraw = new csmVector<CubismClippingContext>();\r\n    this._channelColors = new csmVector<CubismTextureColor>();\r\n    this._tmpBoundsOnModel = new csmRect();\r\n    this._tmpMatrix = new CubismMatrix44();\r\n    this._tmpMatrixForMask = new CubismMatrix44();\r\n    this._tmpMatrixForDraw = new CubismMatrix44();\r\n    this._maskTexture = null;\r\n\r\n    let tmp: CubismTextureColor = new CubismTextureColor();\r\n    tmp.R = 1.0;\r\n    tmp.G = 0.0;\r\n    tmp.B = 0.0;\r\n    tmp.A = 0.0;\r\n    this._channelColors.pushBack(tmp);\r\n\r\n    tmp = new CubismTextureColor();\r\n    tmp.R = 0.0;\r\n    tmp.G = 1.0;\r\n    tmp.B = 0.0;\r\n    tmp.A = 0.0;\r\n    this._channelColors.pushBack(tmp);\r\n\r\n    tmp = new CubismTextureColor();\r\n    tmp.R = 0.0;\r\n    tmp.G = 0.0;\r\n    tmp.B = 1.0;\r\n    tmp.A = 0.0;\r\n    this._channelColors.pushBack(tmp);\r\n\r\n    tmp = new CubismTextureColor();\r\n    tmp.R = 0.0;\r\n    tmp.G = 0.0;\r\n    tmp.B = 0.0;\r\n    tmp.A = 1.0;\r\n    this._channelColors.pushBack(tmp);\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    for (let i = 0; i < this._clippingContextListForMask.getSize(); i++) {\r\n      if (this._clippingContextListForMask.at(i)) {\r\n        this._clippingContextListForMask.at(i).release();\r\n        this._clippingContextListForMask.set(i, void 0);\r\n      }\r\n      this._clippingContextListForMask.set(i, null);\r\n    }\r\n    this._clippingContextListForMask = null;\r\n\r\n    // _clippingContextListForDrawは_clippingContextListForMaskにあるインスタンスを指している。上記の処理により要素ごとのDELETEは不要。\r\n    for (let i = 0; i < this._clippingContextListForDraw.getSize(); i++) {\r\n      this._clippingContextListForDraw.set(i, null);\r\n    }\r\n    this._clippingContextListForDraw = null;\r\n\r\n    if (this._maskTexture) {\r\n      for (let i = 0; i < this._maskTexture.textures.getSize(); i++) {\r\n        this.gl.deleteFramebuffer(this._maskTexture.textures.at(i));\r\n      }\r\n      this._maskTexture.textures.clear();\r\n      this._maskTexture.textures = null;\r\n      this._maskTexture = null;\r\n    }\r\n\r\n    for (let i = 0; i < this._channelColors.getSize(); i++) {\r\n      this._channelColors.set(i, null);\r\n    }\r\n\r\n    this._channelColors = null;\r\n\r\n    // テクスチャ解放\r\n    if (this._maskColorBuffers != null) {\r\n      for (let index = 0; index < this._maskColorBuffers.getSize(); index++) {\r\n        this.gl.deleteTexture(this._maskColorBuffers.at(index));\r\n      }\r\n      this._maskColorBuffers.clear();\r\n    }\r\n    this._maskColorBuffers = null;\r\n\r\n    if (this._maskRenderTextures != null) {\r\n      this._maskRenderTextures.clear();\r\n    }\r\n    this._maskRenderTextures = null;\r\n\r\n    if (this._clearedFrameBufferflags != null) {\r\n      this._clearedFrameBufferflags.clear();\r\n    }\r\n    this._clearedFrameBufferflags = null;\r\n  }\r\n\r\n  /**\r\n   * マネージャの初期化処理\r\n   * クリッピングマスクを使う描画オブジェクトの登録を行う\r\n   * @param model モデルのインスタンス\r\n   * @param drawableCount 描画オブジェクトの数\r\n   * @param drawableMasks 描画オブジェクトをマスクする描画オブジェクトのインデックスのリスト\r\n   * @param drawableMaskCounts 描画オブジェクトをマスクする描画オブジェクトの数\r\n   * @param renderTextureCount バッファの生成数\r\n   */\r\n  public initialize(\r\n    model: CubismModel,\r\n    drawableCount: number,\r\n    drawableMasks: Int32Array[],\r\n    drawableMaskCounts: Int32Array,\r\n    renderTextureCount: number\r\n  ): void {\r\n    // レンダーテクスチャの合計枚数の設定\r\n    // 1以上の整数でない場合はそれぞれ警告を出す\r\n    if (renderTextureCount % 1 != 0) {\r\n      CubismLogWarning(\r\n        'The number of render textures must be specified as an integer. The decimal point is rounded down and corrected to an integer.'\r\n      );\r\n      // 小数点以下を除去\r\n      renderTextureCount = ~~renderTextureCount;\r\n    }\r\n    if (renderTextureCount < 1) {\r\n      CubismLogWarning(\r\n        'The number of render textures must be an integer greater than or equal to 1. Set the number of render textures to 1.'\r\n      );\r\n    }\r\n    // 負の値が使われている場合は強制的に1枚と設定する\r\n    this._renderTextureCount = renderTextureCount < 1 ? 1 : renderTextureCount;\r\n\r\n    this._clearedFrameBufferflags = new csmVector<boolean>(\r\n      this._renderTextureCount\r\n    );\r\n\r\n    // クリッピングマスクを使う描画オブジェクトをすべて登録する\r\n    // クリッピングマスクは、通常数個程度に限定して使うものとする\r\n    for (let i = 0; i < drawableCount; i++) {\r\n      if (drawableMaskCounts[i] <= 0) {\r\n        // クリッピングマスクが使用されていないアートメッシュ（多くの場合使用しない）\r\n        this._clippingContextListForDraw.pushBack(null);\r\n        continue;\r\n      }\r\n\r\n      // 既にあるClipContextと同じかチェックする\r\n      let clippingContext: CubismClippingContext = this.findSameClip(\r\n        drawableMasks[i],\r\n        drawableMaskCounts[i]\r\n      );\r\n      if (clippingContext == null) {\r\n        // 同一のマスクが存在していない場合は生成する\r\n        clippingContext = new CubismClippingContext(\r\n          this,\r\n          drawableMasks[i],\r\n          drawableMaskCounts[i]\r\n        );\r\n        this._clippingContextListForMask.pushBack(clippingContext);\r\n      }\r\n\r\n      clippingContext.addClippedDrawable(i);\r\n\r\n      this._clippingContextListForDraw.pushBack(clippingContext);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * クリッピングコンテキストを作成する。モデル描画時に実行する。\r\n   * @param model モデルのインスタンス\r\n   * @param renderer レンダラのインスタンス\r\n   */\r\n  public setupClippingContext(\r\n    model: CubismModel,\r\n    renderer: CubismRenderer_WebGL\r\n  ): void {\r\n    this._currentFrameNo++;\r\n\r\n    // 全てのクリッピングを用意する\r\n    // 同じクリップ（複数の場合はまとめて一つのクリップ）を使う場合は1度だけ設定する\r\n    let usingClipCount = 0;\r\n    for (\r\n      let clipIndex = 0;\r\n      clipIndex < this._clippingContextListForMask.getSize();\r\n      clipIndex++\r\n    ) {\r\n      // 1つのクリッピングマスクに関して\r\n      const cc: CubismClippingContext =\r\n        this._clippingContextListForMask.at(clipIndex);\r\n\r\n      // このクリップを利用する描画オブジェクト群全体を囲む矩形を計算\r\n      this.calcClippedDrawTotalBounds(model, cc);\r\n\r\n      if (cc._isUsing) {\r\n        usingClipCount++; // 使用中としてカウント\r\n      }\r\n    }\r\n\r\n    // マスク作成処理\r\n    if (usingClipCount > 0) {\r\n      // 各マスクのレイアウトを決定していく\r\n      this.setupLayoutBounds(\r\n        renderer.isUsingHighPrecisionMask() ? 0 : usingClipCount\r\n      );\r\n\r\n      if (!renderer.isUsingHighPrecisionMask()) {\r\n        // 生成したFrameBufferと同じサイズでビューポートを設定\r\n        this.gl.viewport(\r\n          0,\r\n          0,\r\n          this._clippingMaskBufferSize,\r\n          this._clippingMaskBufferSize\r\n        );\r\n\r\n        // 後の計算のためにインデックスの最初をセット\r\n        this._currentMaskRenderTexture = this.getMaskRenderTexture().at(0);\r\n\r\n        renderer.preDraw(); // バッファをクリアする\r\n\r\n        // ---------- マスク描画処理 ----------\r\n        // マスク用RenderTextureをactiveにセット\r\n        this.gl.bindFramebuffer(\r\n          this.gl.FRAMEBUFFER,\r\n          this._currentMaskRenderTexture\r\n        );\r\n      }\r\n\r\n      // サイズがレンダーテクスチャの枚数と合わない場合は合わせる\r\n      if (this._clearedFrameBufferflags.getSize() != this._renderTextureCount) {\r\n        this._clearedFrameBufferflags.clear();\r\n        this._clearedFrameBufferflags = new csmVector<boolean>(\r\n          this._renderTextureCount\r\n        );\r\n      }\r\n\r\n      // マスクのクリアフラグを毎フレーム開始時に初期化\r\n      for (\r\n        let index = 0;\r\n        index < this._clearedFrameBufferflags.getSize();\r\n        index++\r\n      ) {\r\n        this._clearedFrameBufferflags[index] = false;\r\n      }\r\n\r\n      // 実際にマスクを生成する\r\n      // 全てのマスクをどのようにレイアウトして描くかを決定し、ClipContext, ClippedDrawContextに記憶する\r\n      for (\r\n        let clipIndex = 0;\r\n        clipIndex < this._clippingContextListForMask.getSize();\r\n        clipIndex++\r\n      ) {\r\n        // --- 実際に1つのマスクを描く ---\r\n        const clipContext: CubismClippingContext =\r\n          this._clippingContextListForMask.at(clipIndex);\r\n        const allClipedDrawRect: csmRect = clipContext._allClippedDrawRect; // このマスクを使う、すべての描画オブジェクトの論理座標上の囲み矩形\r\n        const layoutBoundsOnTex01: csmRect = clipContext._layoutBounds; // この中にマスクを収める\r\n        const MARGIN = 0.05; // モデル座標上の矩形を、適宜マージンを付けて使う\r\n        let scaleX = 0;\r\n        let scaleY = 0;\r\n\r\n        // clipContextに設定したレンダーテクスチャをインデックスで取得\r\n        const clipContextRenderTexture = this.getMaskRenderTexture().at(\r\n          clipContext._bufferIndex\r\n        );\r\n\r\n        // 現在のレンダーテクスチャがclipContextのものと異なる場合\r\n        if (\r\n          this._currentMaskRenderTexture != clipContextRenderTexture &&\r\n          !renderer.isUsingHighPrecisionMask()\r\n        ) {\r\n          this._currentMaskRenderTexture = clipContextRenderTexture;\r\n          renderer.preDraw(); // バッファをクリアする\r\n          // マスク用RenderTextureをactiveにセット\r\n          this.gl.bindFramebuffer(\r\n            this.gl.FRAMEBUFFER,\r\n            this._currentMaskRenderTexture\r\n          );\r\n        }\r\n\r\n        if (renderer.isUsingHighPrecisionMask()) {\r\n          const ppu: number = model.getPixelsPerUnit();\r\n          const maskPixelSize: number =\r\n            clipContext.getClippingManager()._clippingMaskBufferSize;\r\n          const physicalMaskWidth: number =\r\n            layoutBoundsOnTex01.width * maskPixelSize;\r\n          const physicalMaskHeight: number =\r\n            layoutBoundsOnTex01.height * maskPixelSize;\r\n\r\n          this._tmpBoundsOnModel.setRect(allClipedDrawRect);\r\n\r\n          if (this._tmpBoundsOnModel.width * ppu > physicalMaskWidth) {\r\n            this._tmpBoundsOnModel.expand(\r\n              allClipedDrawRect.width * MARGIN,\r\n              0.0\r\n            );\r\n            scaleX = layoutBoundsOnTex01.width / this._tmpBoundsOnModel.width;\r\n          } else {\r\n            scaleX = ppu / physicalMaskWidth;\r\n          }\r\n\r\n          if (this._tmpBoundsOnModel.height * ppu > physicalMaskHeight) {\r\n            this._tmpBoundsOnModel.expand(\r\n              0.0,\r\n              allClipedDrawRect.height * MARGIN\r\n            );\r\n            scaleY = layoutBoundsOnTex01.height / this._tmpBoundsOnModel.height;\r\n          } else {\r\n            scaleY = ppu / physicalMaskHeight;\r\n          }\r\n        } else {\r\n          this._tmpBoundsOnModel.setRect(allClipedDrawRect);\r\n          this._tmpBoundsOnModel.expand(\r\n            allClipedDrawRect.width * MARGIN,\r\n            allClipedDrawRect.height * MARGIN\r\n          );\r\n          //########## 本来は割り当てられた領域の全体を使わず必要最低限のサイズがよい\r\n\r\n          // シェーダ用の計算式を求める。回転を考慮しない場合は以下のとおり\r\n          // movePeriod' = movePeriod * scaleX + offX\t\t  [[ movePeriod' = (movePeriod - tmpBoundsOnModel.movePeriod)*scale + layoutBoundsOnTex01.movePeriod ]]\r\n          scaleX = layoutBoundsOnTex01.width / this._tmpBoundsOnModel.width;\r\n          scaleY = layoutBoundsOnTex01.height / this._tmpBoundsOnModel.height;\r\n        }\r\n\r\n        // マスク生成時に使う行列を求める\r\n        {\r\n          // シェーダに渡す行列を求める <<<<<<<<<<<<<<<<<<<<<<<< 要最適化（逆順に計算すればシンプルにできる）\r\n          this._tmpMatrix.loadIdentity();\r\n          {\r\n            // layout0..1 を -1..1に変換\r\n            this._tmpMatrix.translateRelative(-1.0, -1.0);\r\n            this._tmpMatrix.scaleRelative(2.0, 2.0);\r\n          }\r\n          {\r\n            // view to layout0..1\r\n            this._tmpMatrix.translateRelative(\r\n              layoutBoundsOnTex01.x,\r\n              layoutBoundsOnTex01.y\r\n            );\r\n            this._tmpMatrix.scaleRelative(scaleX, scaleY); // new = [translate][scale]\r\n            this._tmpMatrix.translateRelative(\r\n              -this._tmpBoundsOnModel.x,\r\n              -this._tmpBoundsOnModel.y\r\n            );\r\n            // new = [translate][scale][translate]\r\n          }\r\n          // tmpMatrixForMaskが計算結果\r\n          this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray());\r\n        }\r\n\r\n        //--------- draw時の mask 参照用行列を計算\r\n        {\r\n          // シェーダに渡す行列を求める <<<<<<<<<<<<<<<<<<<<<<<< 要最適化（逆順に計算すればシンプルにできる）\r\n          this._tmpMatrix.loadIdentity();\r\n          {\r\n            this._tmpMatrix.translateRelative(\r\n              layoutBoundsOnTex01.x,\r\n              layoutBoundsOnTex01.y\r\n            );\r\n            this._tmpMatrix.scaleRelative(scaleX, scaleY); // new = [translate][scale]\r\n            this._tmpMatrix.translateRelative(\r\n              -this._tmpBoundsOnModel.x,\r\n              -this._tmpBoundsOnModel.y\r\n            );\r\n            // new = [translate][scale][translate]\r\n          }\r\n          this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray());\r\n        }\r\n        clipContext._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray());\r\n        clipContext._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray());\r\n\r\n        if (!renderer.isUsingHighPrecisionMask()) {\r\n          const clipDrawCount: number = clipContext._clippingIdCount;\r\n          for (let i = 0; i < clipDrawCount; i++) {\r\n            const clipDrawIndex: number = clipContext._clippingIdList[i];\r\n\r\n            // 頂点情報が更新されておらず、信頼性がない場合は描画をパスする\r\n            if (\r\n              !model.getDrawableDynamicFlagVertexPositionsDidChange(\r\n                clipDrawIndex\r\n              )\r\n            ) {\r\n              continue;\r\n            }\r\n\r\n            renderer.setIsCulling(\r\n              model.getDrawableCulling(clipDrawIndex) != false\r\n            );\r\n\r\n            // マスクがクリアされていないなら処理する\r\n            if (!this._clearedFrameBufferflags[clipContext._bufferIndex]) {\r\n              // マスクをクリアする\r\n              // (仮仕様) 1が無効（描かれない）領域、0が有効（描かれる）領域。（シェーダーCd*Csで0に近い値をかけてマスクを作る。1をかけると何も起こらない）\r\n              this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\r\n              this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n              this._clearedFrameBufferflags[clipContext._bufferIndex] = true;\r\n            }\r\n\r\n            // 今回専用の変換を適用して描く\r\n            // チャンネルも切り替える必要がある(A,R,G,B)\r\n            renderer.setClippingContextBufferForMask(clipContext);\r\n            renderer.drawMesh(\r\n              model.getDrawableTextureIndex(clipDrawIndex),\r\n              model.getDrawableVertexIndexCount(clipDrawIndex),\r\n              model.getDrawableVertexCount(clipDrawIndex),\r\n              model.getDrawableVertexIndices(clipDrawIndex),\r\n              model.getDrawableVertices(clipDrawIndex),\r\n              model.getDrawableVertexUvs(clipDrawIndex),\r\n              model.getMultiplyColor(clipDrawIndex),\r\n              model.getScreenColor(clipDrawIndex),\r\n              model.getDrawableOpacity(clipDrawIndex),\r\n              CubismBlendMode.CubismBlendMode_Normal, // クリッピングは通常描画を強制\r\n              false // マスク生成時はクリッピングの反転使用は全く関係がない\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!renderer.isUsingHighPrecisionMask()) {\r\n        // --- 後処理 ---\r\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo); // 描画対象を戻す\r\n        renderer.setClippingContextBufferForMask(null);\r\n\r\n        this.gl.viewport(\r\n          s_viewport[0],\r\n          s_viewport[1],\r\n          s_viewport[2],\r\n          s_viewport[3]\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 既にマスクを作っているかを確認\r\n   * 作っている様であれば該当するクリッピングマスクのインスタンスを返す\r\n   * 作っていなければNULLを返す\r\n   * @param drawableMasks 描画オブジェクトをマスクする描画オブジェクトのリスト\r\n   * @param drawableMaskCounts 描画オブジェクトをマスクする描画オブジェクトの数\r\n   * @return 該当するクリッピングマスクが存在すればインスタンスを返し、なければNULLを返す\r\n   */\r\n  public findSameClip(\r\n    drawableMasks: Int32Array,\r\n    drawableMaskCounts: number\r\n  ): CubismClippingContext {\r\n    // 作成済みClippingContextと一致するか確認\r\n    for (let i = 0; i < this._clippingContextListForMask.getSize(); i++) {\r\n      const clippingContext: CubismClippingContext =\r\n        this._clippingContextListForMask.at(i);\r\n      const count: number = clippingContext._clippingIdCount;\r\n\r\n      // 個数が違う場合は別物\r\n      if (count != drawableMaskCounts) {\r\n        continue;\r\n      }\r\n\r\n      let sameCount = 0;\r\n\r\n      // 同じIDを持つか確認。配列の数が同じなので、一致した個数が同じなら同じ物を持つとする\r\n      for (let j = 0; j < count; j++) {\r\n        const clipId: number = clippingContext._clippingIdList[j];\r\n\r\n        for (let k = 0; k < count; k++) {\r\n          if (drawableMasks[k] == clipId) {\r\n            sameCount++;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (sameCount == count) {\r\n        return clippingContext;\r\n      }\r\n    }\r\n\r\n    return null; // 見つからなかった\r\n  }\r\n\r\n  /**\r\n   * クリッピングコンテキストを配置するレイアウト\r\n   * 指定された数のレンダーテクスチャを極力いっぱいに使ってマスクをレイアウトする\r\n   * マスクグループの数が4以下ならRGBA各チャンネルに一つずつマスクを配置し、5以上6以下ならRGBAを2,2,1,1と配置する。\r\n   *\r\n   * @param usingClipCount 配置するクリッピングコンテキストの数\r\n   */\r\n  public setupLayoutBounds(usingClipCount: number): void {\r\n    const useClippingMaskMaxCount =\r\n      this._renderTextureCount <= 1\r\n        ? ClippingMaskMaxCountOnDefault\r\n        : ClippingMaskMaxCountOnMultiRenderTexture * this._renderTextureCount;\r\n\r\n    if (usingClipCount <= 0 || usingClipCount > useClippingMaskMaxCount) {\r\n      if (usingClipCount > useClippingMaskMaxCount) {\r\n        // マスクの制限数の警告を出す\r\n        CubismLogError(\r\n          'not supported mask count : {0}\\n[Details] render texture count : {1}, mask count : {2}',\r\n          usingClipCount - useClippingMaskMaxCount,\r\n          this._renderTextureCount,\r\n          usingClipCount\r\n        );\r\n      }\r\n      // この場合は一つのマスクターゲットを毎回クリアして使用する\r\n      for (\r\n        let index = 0;\r\n        index < this._clippingContextListForMask.getSize();\r\n        index++\r\n      ) {\r\n        const clipContext: CubismClippingContext =\r\n          this._clippingContextListForMask.at(index);\r\n        clipContext._layoutChannelNo = 0; // どうせ毎回消すので固定\r\n        clipContext._layoutBounds.x = 0.0;\r\n        clipContext._layoutBounds.y = 0.0;\r\n        clipContext._layoutBounds.width = 1.0;\r\n        clipContext._layoutBounds.height = 1.0;\r\n        clipContext._bufferIndex = 0;\r\n      }\r\n      return;\r\n    }\r\n\r\n    // レンダーテクスチャが1枚なら9分割する（最大36枚）\r\n    const layoutCountMaxValue = this._renderTextureCount <= 1 ? 9 : 8;\r\n\r\n    // 指定された数のレンダーテクスチャを極力いっぱいに使ってマスクをレイアウトする（デフォルトなら1）\r\n    // マスクグループの数が4以下ならRGBA各チャンネルに1つずつマスクを配置し、5以上6以下ならRGBAを2,2,1,1と配置する\r\n    let countPerSheetDiv: number = usingClipCount / this._renderTextureCount; // レンダーテクスチャ1枚あたり何枚割り当てるか\r\n    let countPerSheetMod: number = usingClipCount % this._renderTextureCount; // この番号のレンダーテクスチャまでに一つずつ配分する\r\n\r\n    // 小数点は切り捨てる\r\n    countPerSheetDiv = ~~countPerSheetDiv;\r\n    countPerSheetMod = ~~countPerSheetMod;\r\n\r\n    // RGBAを順番に使っていく\r\n    let div: number = countPerSheetDiv / ColorChannelCount; // 1チャンネルに配置する基本のマスク\r\n    let mod: number = countPerSheetDiv % ColorChannelCount; // 余り、この番号のチャンネルまでに一つずつ配分する\r\n\r\n    // 小数点は切り捨てる\r\n    div = ~~div;\r\n    mod = ~~mod;\r\n\r\n    // RGBAそれぞれのチャンネルを用意していく（0:R, 1:G, 2:B, 3:A）\r\n    let curClipIndex = 0; // 順番に設定していく\r\n\r\n    for (\r\n      let renderTextureNo = 0;\r\n      renderTextureNo < this._renderTextureCount;\r\n      renderTextureNo++\r\n    ) {\r\n      for (let channelNo = 0; channelNo < ColorChannelCount; channelNo++) {\r\n        // このチャンネルにレイアウトする数\r\n        let layoutCount: number = div + (channelNo < mod ? 1 : 0);\r\n\r\n        // このレンダーテクスチャにまだ割り当てられていなければ追加する\r\n        const checkChannelNo = mod + 1 >= ColorChannelCount ? 0 : mod + 1;\r\n        if (layoutCount < layoutCountMaxValue && channelNo == checkChannelNo) {\r\n          layoutCount += renderTextureNo < countPerSheetMod ? 1 : 0;\r\n        }\r\n\r\n        // 分割方法を決定する\r\n        if (layoutCount == 0) {\r\n          // 何もしない\r\n        } else if (layoutCount == 1) {\r\n          // 全てをそのまま使う\r\n          const clipContext: CubismClippingContext =\r\n            this._clippingContextListForMask.at(curClipIndex++);\r\n          clipContext._layoutChannelNo = channelNo;\r\n          clipContext._layoutBounds.x = 0.0;\r\n          clipContext._layoutBounds.y = 0.0;\r\n          clipContext._layoutBounds.width = 1.0;\r\n          clipContext._layoutBounds.height = 1.0;\r\n          clipContext._bufferIndex = renderTextureNo;\r\n        } else if (layoutCount == 2) {\r\n          for (let i = 0; i < layoutCount; i++) {\r\n            let xpos: number = i % 2;\r\n\r\n            // 小数点は切り捨てる\r\n            xpos = ~~xpos;\r\n\r\n            const cc: CubismClippingContext =\r\n              this._clippingContextListForMask.at(curClipIndex++);\r\n            cc._layoutChannelNo = channelNo;\r\n\r\n            // UVを2つに分解して使う\r\n            cc._layoutBounds.x = xpos * 0.5;\r\n            cc._layoutBounds.y = 0.0;\r\n            cc._layoutBounds.width = 0.5;\r\n            cc._layoutBounds.height = 1.0;\r\n            cc._bufferIndex = renderTextureNo;\r\n          }\r\n        } else if (layoutCount <= 4) {\r\n          // 4分割して使う\r\n          for (let i = 0; i < layoutCount; i++) {\r\n            let xpos: number = i % 2;\r\n            let ypos: number = i / 2;\r\n\r\n            // 小数点は切り捨てる\r\n            xpos = ~~xpos;\r\n            ypos = ~~ypos;\r\n\r\n            const cc = this._clippingContextListForMask.at(curClipIndex++);\r\n            cc._layoutChannelNo = channelNo;\r\n\r\n            cc._layoutBounds.x = xpos * 0.5;\r\n            cc._layoutBounds.y = ypos * 0.5;\r\n            cc._layoutBounds.width = 0.5;\r\n            cc._layoutBounds.height = 0.5;\r\n            cc._bufferIndex = renderTextureNo;\r\n          }\r\n        } else if (layoutCount <= layoutCountMaxValue) {\r\n          // 9分割して使う\r\n          for (let i = 0; i < layoutCount; i++) {\r\n            let xpos = i % 3;\r\n            let ypos = i / 3;\r\n\r\n            // 小数点は切り捨てる\r\n            xpos = ~~xpos;\r\n            ypos = ~~ypos;\r\n\r\n            const cc: CubismClippingContext =\r\n              this._clippingContextListForMask.at(curClipIndex++);\r\n            cc._layoutChannelNo = channelNo;\r\n\r\n            cc._layoutBounds.x = xpos / 3.0;\r\n            cc._layoutBounds.y = ypos / 3.0;\r\n            cc._layoutBounds.width = 1.0 / 3.0;\r\n            cc._layoutBounds.height = 1.0 / 3.0;\r\n            cc._bufferIndex = renderTextureNo;\r\n          }\r\n        } else {\r\n          // マスクの制限枚数を超えた場合の処理\r\n          CubismLogError(\r\n            'not supported mask count : {0}\\n[Details] render texture count : {1}, mask count : {2}',\r\n            usingClipCount - useClippingMaskMaxCount,\r\n            this._renderTextureCount,\r\n            usingClipCount\r\n          );\r\n\r\n          // SetupShaderProgramでオーバーアクセスが発生するので仮で数値を入れる\r\n          // もちろん描画結果は正しいものではなくなる\r\n          for (let index = 0; index < layoutCount; index++) {\r\n            const cc: CubismClippingContext =\r\n              this._clippingContextListForMask.at(curClipIndex++);\r\n\r\n            cc._layoutChannelNo = 0;\r\n\r\n            cc._layoutBounds.x = 0.0;\r\n            cc._layoutBounds.y = 0.0;\r\n            cc._layoutBounds.width = 1.0;\r\n            cc._layoutBounds.height = 1.0;\r\n            cc._bufferIndex = 0;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * カラーバッファを取得する\r\n   * @return カラーバッファ\r\n   */\r\n  public getColorBuffer(): csmVector<WebGLTexture> {\r\n    return this._maskColorBuffers;\r\n  }\r\n\r\n  /**\r\n   * 画面描画に使用するクリッピングマスクのリストを取得する\r\n   * @return 画面描画に使用するクリッピングマスクのリスト\r\n   */\r\n  public getClippingContextListForDraw(): csmVector<CubismClippingContext> {\r\n    return this._clippingContextListForDraw;\r\n  }\r\n\r\n  /**\r\n   * マスクの合計数をカウント\r\n   * @returns\r\n   */\r\n  public getClippingMaskCount(): number {\r\n    return this._clippingContextListForMask.getSize();\r\n  }\r\n\r\n  /**\r\n   * クリッピングマスクバッファのサイズを設定する\r\n   * @param size クリッピングマスクバッファのサイズ\r\n   */\r\n  public setClippingMaskBufferSize(size: number): void {\r\n    this._clippingMaskBufferSize = size;\r\n  }\r\n\r\n  /**\r\n   * クリッピングマスクバッファのサイズを取得する\r\n   * @return クリッピングマスクバッファのサイズ\r\n   */\r\n  public getClippingMaskBufferSize(): number {\r\n    return this._clippingMaskBufferSize;\r\n  }\r\n\r\n  /**\r\n   * このバッファのレンダーテクスチャの枚数を取得する\r\n   * @return このバッファのレンダーテクスチャの枚数\r\n   */\r\n  public getRenderTextureCount(): number {\r\n    return this._renderTextureCount;\r\n  }\r\n\r\n  public _currentMaskRenderTexture: WebGLFramebuffer; // マスク用レンダーテクスチャのアドレス\r\n  public _maskRenderTextures: csmVector<WebGLFramebuffer>; // レンダーテクスチャのリスト\r\n  public _maskColorBuffers: csmVector<WebGLTexture>; // マスク用カラーバッファーのアドレスのリスト\r\n  public _currentFrameNo: number; // マスクテクスチャに与えるフレーム番号\r\n\r\n  public _channelColors: csmVector<CubismTextureColor>;\r\n  public _maskTexture: CubismRenderTextureResource; // マスク用のテクスチャリソースのリスト\r\n  public _clippingContextListForMask: csmVector<CubismClippingContext>; // マスク用クリッピングコンテキストのリスト\r\n  public _clippingContextListForDraw: csmVector<CubismClippingContext>; // 描画用クリッピングコンテキストのリスト\r\n  public _clippingMaskBufferSize: number; // クリッピングマスクのバッファサイズ（初期値:256）\r\n  public _renderTextureCount: number; // 生成するレンダーテクスチャの枚数\r\n\r\n  private _tmpMatrix: CubismMatrix44; // マスク計算用の行列\r\n  private _tmpMatrixForMask: CubismMatrix44; // マスク計算用の行列\r\n  private _tmpMatrixForDraw: CubismMatrix44; // マスク計算用の行列\r\n  private _tmpBoundsOnModel: csmRect; // マスク配置計算用の矩形\r\n  private _clearedFrameBufferflags: csmVector<boolean>; //マスクのクリアフラグの配列\r\n\r\n  gl: WebGLRenderingContext; // WebGLレンダリングコンテキスト\r\n}\r\n\r\n/**\r\n * レンダーテクスチャのリソースを定義する構造体\r\n * クリッピングマスクで使用する\r\n */\r\nexport class CubismRenderTextureResource {\r\n  /**\r\n   * 引数付きコンストラクタ\r\n   * @param frameNo レンダラーのフレーム番号\r\n   * @param texture テクスチャのアドレス\r\n   */\r\n  public constructor(frameNo: number, texture: csmVector<WebGLFramebuffer>) {\r\n    this.frameNo = frameNo;\r\n    this.textures = texture;\r\n  }\r\n\r\n  public frameNo: number; // レンダラのフレーム番号\r\n  public textures: csmVector<WebGLFramebuffer>; // テクスチャのアドレス\r\n}\r\n\r\n/**\r\n * クリッピングマスクのコンテキスト\r\n */\r\nexport class CubismClippingContext {\r\n  /**\r\n   * 引数付きコンストラクタ\r\n   */\r\n  public constructor(\r\n    manager: CubismClippingManager_WebGL,\r\n    clippingDrawableIndices: Int32Array,\r\n    clipCount: number\r\n  ) {\r\n    this._owner = manager;\r\n\r\n    // クリップしている（＝マスク用の）Drawableのインデックスリスト\r\n    this._clippingIdList = clippingDrawableIndices;\r\n\r\n    // マスクの数\r\n    this._clippingIdCount = clipCount;\r\n\r\n    this._allClippedDrawRect = new csmRect();\r\n    this._layoutBounds = new csmRect();\r\n\r\n    this._clippedDrawableIndexList = [];\r\n\r\n    this._matrixForMask = new CubismMatrix44();\r\n    this._matrixForDraw = new CubismMatrix44();\r\n\r\n    this._bufferIndex = 0;\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    if (this._layoutBounds != null) {\r\n      this._layoutBounds = null;\r\n    }\r\n\r\n    if (this._allClippedDrawRect != null) {\r\n      this._allClippedDrawRect = null;\r\n    }\r\n\r\n    if (this._clippedDrawableIndexList != null) {\r\n      this._clippedDrawableIndexList = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * このマスクにクリップされる描画オブジェクトを追加する\r\n   *\r\n   * @param drawableIndex クリッピング対象に追加する描画オブジェクトのインデックス\r\n   */\r\n  public addClippedDrawable(drawableIndex: number) {\r\n    this._clippedDrawableIndexList.push(drawableIndex);\r\n  }\r\n\r\n  /**\r\n   * このマスクを管理するマネージャのインスタンスを取得する\r\n   * @return クリッピングマネージャのインスタンス\r\n   */\r\n  public getClippingManager(): CubismClippingManager_WebGL {\r\n    return this._owner;\r\n  }\r\n\r\n  public setGl(gl: WebGLRenderingContext): void {\r\n    this._owner.setGL(gl);\r\n  }\r\n\r\n  public _isUsing: boolean; // 現在の描画状態でマスクの準備が必要ならtrue\r\n  public readonly _clippingIdList: Int32Array; // クリッピングマスクのIDリスト\r\n  public _clippingIdCount: number; // クリッピングマスクの数\r\n  public _layoutChannelNo: number; // RGBAのいずれのチャンネルにこのクリップを配置するか（0:R, 1:G, 2:B, 3:A）\r\n  public _layoutBounds: csmRect; // マスク用チャンネルのどの領域にマスクを入れるか（View座標-1~1, UVは0~1に直す）\r\n  public _allClippedDrawRect: csmRect; // このクリッピングで、クリッピングされるすべての描画オブジェクトの囲み矩形（毎回更新）\r\n  public _matrixForMask: CubismMatrix44; // マスクの位置計算結果を保持する行列\r\n  public _matrixForDraw: CubismMatrix44; // 描画オブジェクトの位置計算結果を保持する行列\r\n  public _clippedDrawableIndexList: number[]; // このマスクにクリップされる描画オブジェクトのリスト\r\n  public _bufferIndex: number; // このマスクが割り当てられるレンダーテクスチャ（フレームバッファ）やカラーバッファのインデックス\r\n\r\n  private _owner: CubismClippingManager_WebGL; // このマスクを管理しているマネージャのインスタンス\r\n}\r\n\r\nexport class CubismRendererProfile_WebGL {\r\n  private setGlEnable(index: GLenum, enabled: GLboolean): void {\r\n    if (enabled) this.gl.enable(index);\r\n    else this.gl.disable(index);\r\n  }\r\n\r\n  private setGlEnableVertexAttribArray(\r\n    index: GLuint,\r\n    enabled: GLboolean\r\n  ): void {\r\n    if (enabled) this.gl.enableVertexAttribArray(index);\r\n    else this.gl.disableVertexAttribArray(index);\r\n  }\r\n\r\n  public save(): void {\r\n    if (this.gl == null) {\r\n      CubismLogError(\r\n        \"'gl' is null. WebGLRenderingContext is required.\\nPlease call 'CubimRenderer_WebGL.startUp' function.\"\r\n      );\r\n      return;\r\n    }\r\n    //-- push state --\r\n    this._lastArrayBufferBinding = this.gl.getParameter(\r\n      this.gl.ARRAY_BUFFER_BINDING\r\n    );\r\n    this._lastElementArrayBufferBinding = this.gl.getParameter(\r\n      this.gl.ELEMENT_ARRAY_BUFFER_BINDING\r\n    );\r\n    this._lastProgram = this.gl.getParameter(this.gl.CURRENT_PROGRAM);\r\n\r\n    this._lastActiveTexture = this.gl.getParameter(this.gl.ACTIVE_TEXTURE);\r\n    this.gl.activeTexture(this.gl.TEXTURE1); //テクスチャユニット1をアクティブに（以後の設定対象とする）\r\n    this._lastTexture1Binding2D = this.gl.getParameter(\r\n      this.gl.TEXTURE_BINDING_2D\r\n    );\r\n\r\n    this.gl.activeTexture(this.gl.TEXTURE0); //テクスチャユニット0をアクティブに（以後の設定対象とする）\r\n    this._lastTexture0Binding2D = this.gl.getParameter(\r\n      this.gl.TEXTURE_BINDING_2D\r\n    );\r\n\r\n    this._lastVertexAttribArrayEnabled[0] = this.gl.getVertexAttrib(\r\n      0,\r\n      this.gl.VERTEX_ATTRIB_ARRAY_ENABLED\r\n    );\r\n    this._lastVertexAttribArrayEnabled[1] = this.gl.getVertexAttrib(\r\n      1,\r\n      this.gl.VERTEX_ATTRIB_ARRAY_ENABLED\r\n    );\r\n    this._lastVertexAttribArrayEnabled[2] = this.gl.getVertexAttrib(\r\n      2,\r\n      this.gl.VERTEX_ATTRIB_ARRAY_ENABLED\r\n    );\r\n    this._lastVertexAttribArrayEnabled[3] = this.gl.getVertexAttrib(\r\n      3,\r\n      this.gl.VERTEX_ATTRIB_ARRAY_ENABLED\r\n    );\r\n\r\n    this._lastScissorTest = this.gl.isEnabled(this.gl.SCISSOR_TEST);\r\n    this._lastStencilTest = this.gl.isEnabled(this.gl.STENCIL_TEST);\r\n    this._lastDepthTest = this.gl.isEnabled(this.gl.DEPTH_TEST);\r\n    this._lastCullFace = this.gl.isEnabled(this.gl.CULL_FACE);\r\n    this._lastBlend = this.gl.isEnabled(this.gl.BLEND);\r\n\r\n    this._lastFrontFace = this.gl.getParameter(this.gl.FRONT_FACE);\r\n\r\n    this._lastColorMask = this.gl.getParameter(this.gl.COLOR_WRITEMASK);\r\n\r\n    // backup blending\r\n    this._lastBlending[0] = this.gl.getParameter(this.gl.BLEND_SRC_RGB);\r\n    this._lastBlending[1] = this.gl.getParameter(this.gl.BLEND_DST_RGB);\r\n    this._lastBlending[2] = this.gl.getParameter(this.gl.BLEND_SRC_ALPHA);\r\n    this._lastBlending[3] = this.gl.getParameter(this.gl.BLEND_DST_ALPHA);\r\n\r\n    // モデル描画直前のFBOとビューポートを保存\r\n    this._lastFBO = this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\r\n    this._lastViewport = this.gl.getParameter(this.gl.VIEWPORT);\r\n  }\r\n\r\n  public restore(): void {\r\n    if (this.gl == null) {\r\n      CubismLogError(\r\n        \"'gl' is null. WebGLRenderingContext is required.\\nPlease call 'CubimRenderer_WebGL.startUp' function.\"\r\n      );\r\n      return;\r\n    }\r\n    this.gl.useProgram(this._lastProgram);\r\n\r\n    this.setGlEnableVertexAttribArray(0, this._lastVertexAttribArrayEnabled[0]);\r\n    this.setGlEnableVertexAttribArray(1, this._lastVertexAttribArrayEnabled[1]);\r\n    this.setGlEnableVertexAttribArray(2, this._lastVertexAttribArrayEnabled[2]);\r\n    this.setGlEnableVertexAttribArray(3, this._lastVertexAttribArrayEnabled[3]);\r\n\r\n    this.setGlEnable(this.gl.SCISSOR_TEST, this._lastScissorTest);\r\n    this.setGlEnable(this.gl.STENCIL_TEST, this._lastStencilTest);\r\n    this.setGlEnable(this.gl.DEPTH_TEST, this._lastDepthTest);\r\n    this.setGlEnable(this.gl.CULL_FACE, this._lastCullFace);\r\n    this.setGlEnable(this.gl.BLEND, this._lastBlend);\r\n\r\n    this.gl.frontFace(this._lastFrontFace);\r\n\r\n    this.gl.colorMask(\r\n      this._lastColorMask[0],\r\n      this._lastColorMask[1],\r\n      this._lastColorMask[2],\r\n      this._lastColorMask[3]\r\n    );\r\n\r\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this._lastArrayBufferBinding); //前にバッファがバインドされていたら破棄する必要がある\r\n    this.gl.bindBuffer(\r\n      this.gl.ELEMENT_ARRAY_BUFFER,\r\n      this._lastElementArrayBufferBinding\r\n    );\r\n\r\n    this.gl.activeTexture(this.gl.TEXTURE1); //テクスチャユニット1を復元\r\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this._lastTexture1Binding2D);\r\n\r\n    this.gl.activeTexture(this.gl.TEXTURE0); //テクスチャユニット0を復元\r\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this._lastTexture0Binding2D);\r\n\r\n    this.gl.activeTexture(this._lastActiveTexture);\r\n\r\n    this.gl.blendFuncSeparate(\r\n      this._lastBlending[0],\r\n      this._lastBlending[1],\r\n      this._lastBlending[2],\r\n      this._lastBlending[3]\r\n    );\r\n  }\r\n\r\n  public setGl(gl: WebGLRenderingContext): void {\r\n    this.gl = gl;\r\n  }\r\n\r\n  constructor() {\r\n    this._lastVertexAttribArrayEnabled = new Array<GLboolean>(4);\r\n    this._lastColorMask = new Array<GLboolean>(4);\r\n    this._lastBlending = new Array<GLint>(4);\r\n    this._lastViewport = new Array<GLint>(4);\r\n  }\r\n\r\n  private _lastArrayBufferBinding: GLint; ///< モデル描画直前の頂点バッファ\r\n  private _lastElementArrayBufferBinding: GLint; ///< モデル描画直前のElementバッファ\r\n  private _lastProgram: GLint; ///< モデル描画直前のシェーダプログラムバッファ\r\n  private _lastActiveTexture: GLint; ///< モデル描画直前のアクティブなテクスチャ\r\n  private _lastTexture0Binding2D: GLint; ///< モデル描画直前のテクスチャユニット0\r\n  private _lastTexture1Binding2D: GLint; ///< モデル描画直前のテクスチャユニット1\r\n  private _lastVertexAttribArrayEnabled: GLboolean[]; ///< モデル描画直前のテクスチャユニット1\r\n  private _lastScissorTest: GLboolean; ///< モデル描画直前のGL_VERTEX_ATTRIB_ARRAY_ENABLEDパラメータ\r\n  private _lastBlend: GLboolean; ///< モデル描画直前のGL_SCISSOR_TESTパラメータ\r\n  private _lastStencilTest: GLboolean; ///< モデル描画直前のGL_STENCIL_TESTパラメータ\r\n  private _lastDepthTest: GLboolean; ///< モデル描画直前のGL_DEPTH_TESTパラメータ\r\n  private _lastCullFace: GLboolean; ///< モデル描画直前のGL_CULL_FACEパラメータ\r\n  private _lastFrontFace: GLint; ///< モデル描画直前のGL_CULL_FACEパラメータ\r\n  private _lastColorMask: GLboolean[]; ///< モデル描画直前のGL_COLOR_WRITEMASKパラメータ\r\n  private _lastBlending: GLint[]; ///< モデル描画直前のカラーブレンディングパラメータ\r\n  private _lastFBO: GLint; ///< モデル描画直前のフレームバッファ\r\n  private _lastViewport: GLint[]; ///< モデル描画直前のビューポート\r\n\r\n  gl: WebGLRenderingContext;\r\n}\r\n\r\n/**\r\n * WebGL用のシェーダープログラムを生成・破棄するクラス\r\n * シングルトンなクラスであり、CubismShader_WebGL.getInstanceからアクセスする。\r\n */\r\nexport class CubismShader_WebGL {\r\n  /**\r\n   * インスタンスを取得する（シングルトン）\r\n   * @return インスタンス\r\n   */\r\n  public static getInstance(): CubismShader_WebGL {\r\n    if (s_instance == null) {\r\n      s_instance = new CubismShader_WebGL();\r\n\r\n      return s_instance;\r\n    }\r\n    return s_instance;\r\n  }\r\n\r\n  /**\r\n   * インスタンスを開放する（シングルトン）\r\n   */\r\n  public static deleteInstance(): void {\r\n    if (s_instance) {\r\n      s_instance.release();\r\n      s_instance = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * privateなコンストラクタ\r\n   */\r\n  private constructor() {\r\n    this._shaderSets = new csmVector<CubismShaderSet>();\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    this.releaseShaderProgram();\r\n  }\r\n\r\n  /**\r\n   * シェーダープログラムの一連のセットアップを実行する\r\n   * @param renderer レンダラのインスタンス\r\n   * @param textureId GPUのテクスチャID\r\n   * @param vertexCount ポリゴンメッシュの頂点数\r\n   * @param vertexArray ポリゴンメッシュの頂点配列\r\n   * @param indexArray インデックスバッファの頂点配列\r\n   * @param uvArray uv配列\r\n   * @param opacity 不透明度\r\n   * @param colorBlendMode カラーブレンディングのタイプ\r\n   * @param baseColor ベースカラー\r\n   * @param isPremultipliedAlpha 乗算済みアルファかどうか\r\n   * @param matrix4x4 Model-View-Projection行列\r\n   * @param invertedMask マスクを反転して使用するフラグ\r\n   */\r\n  public setupShaderProgram(\r\n    renderer: CubismRenderer_WebGL,\r\n    textureId: WebGLTexture,\r\n    vertexCount: number,\r\n    vertexArray: Float32Array,\r\n    indexArray: Uint16Array,\r\n    uvArray: Float32Array,\r\n    bufferData: {\r\n      vertex: WebGLBuffer;\r\n      uv: WebGLBuffer;\r\n      index: WebGLBuffer;\r\n    },\r\n    opacity: number,\r\n    colorBlendMode: CubismBlendMode,\r\n    baseColor: CubismTextureColor,\r\n    multiplyColor: CubismTextureColor,\r\n    screenColor: CubismTextureColor,\r\n    isPremultipliedAlpha: boolean,\r\n    matrix4x4: CubismMatrix44,\r\n    invertedMask: boolean\r\n  ): void {\r\n    if (!isPremultipliedAlpha) {\r\n      CubismLogError('NoPremultipliedAlpha is not allowed');\r\n    }\r\n\r\n    if (this._shaderSets.getSize() == 0) {\r\n      this.generateShaders();\r\n    }\r\n\r\n    // Blending\r\n    let SRC_COLOR: number;\r\n    let DST_COLOR: number;\r\n    let SRC_ALPHA: number;\r\n    let DST_ALPHA: number;\r\n\r\n    if (renderer.getClippingContextBufferForMask() != null) {\r\n      // マスク生成時\r\n      const shaderSet: CubismShaderSet = this._shaderSets.at(\r\n        ShaderNames.ShaderNames_SetupMask\r\n      );\r\n      this.gl.useProgram(shaderSet.shaderProgram);\r\n\r\n      // テクスチャ設定\r\n      this.gl.activeTexture(this.gl.TEXTURE0);\r\n      this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);\r\n      this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);\r\n\r\n      // 頂点配列の設定(VBO)\r\n      if (bufferData.vertex == null) {\r\n        bufferData.vertex = this.gl.createBuffer();\r\n      }\r\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.vertex);\r\n      this.gl.bufferData(\r\n        this.gl.ARRAY_BUFFER,\r\n        vertexArray,\r\n        this.gl.DYNAMIC_DRAW\r\n      );\r\n      this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);\r\n      this.gl.vertexAttribPointer(\r\n        shaderSet.attributePositionLocation,\r\n        2,\r\n        this.gl.FLOAT,\r\n        false,\r\n        0,\r\n        0\r\n      );\r\n\r\n      // テクスチャ頂点の設定\r\n      if (bufferData.uv == null) {\r\n        bufferData.uv = this.gl.createBuffer();\r\n      }\r\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.uv);\r\n      this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);\r\n      this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);\r\n      this.gl.vertexAttribPointer(\r\n        shaderSet.attributeTexCoordLocation,\r\n        2,\r\n        this.gl.FLOAT,\r\n        false,\r\n        0,\r\n        0\r\n      );\r\n\r\n      // チャンネル\r\n      const channelNo: number =\r\n        renderer.getClippingContextBufferForMask()._layoutChannelNo;\r\n      const colorChannel: CubismTextureColor = renderer\r\n        .getClippingContextBufferForMask()\r\n        .getClippingManager()\r\n        .getChannelFlagAsColor(channelNo);\r\n      this.gl.uniform4f(\r\n        shaderSet.uniformChannelFlagLocation,\r\n        colorChannel.R,\r\n        colorChannel.G,\r\n        colorChannel.B,\r\n        colorChannel.A\r\n      );\r\n\r\n      this.gl.uniformMatrix4fv(\r\n        shaderSet.uniformClipMatrixLocation,\r\n        false,\r\n        renderer.getClippingContextBufferForMask()._matrixForMask.getArray()\r\n      );\r\n\r\n      const rect: csmRect =\r\n        renderer.getClippingContextBufferForMask()._layoutBounds;\r\n\r\n      this.gl.uniform4f(\r\n        shaderSet.uniformBaseColorLocation,\r\n        rect.x * 2.0 - 1.0,\r\n        rect.y * 2.0 - 1.0,\r\n        rect.getRight() * 2.0 - 1.0,\r\n        rect.getBottom() * 2.0 - 1.0\r\n      );\r\n\r\n      this.gl.uniform4f(\r\n        shaderSet.uniformMultiplyColorLocation,\r\n        multiplyColor.R,\r\n        multiplyColor.G,\r\n        multiplyColor.B,\r\n        multiplyColor.A\r\n      );\r\n\r\n      this.gl.uniform4f(\r\n        shaderSet.uniformScreenColorLocation,\r\n        screenColor.R,\r\n        screenColor.G,\r\n        screenColor.B,\r\n        screenColor.A\r\n      );\r\n\r\n      SRC_COLOR = this.gl.ZERO;\r\n      DST_COLOR = this.gl.ONE_MINUS_SRC_COLOR;\r\n      SRC_ALPHA = this.gl.ZERO;\r\n      DST_ALPHA = this.gl.ONE_MINUS_SRC_ALPHA;\r\n    } // マスク生成以外の場合\r\n    else {\r\n      const masked: boolean =\r\n        renderer.getClippingContextBufferForDraw() != null; // この描画オブジェクトはマスク対象か\r\n      const offset: number = masked ? (invertedMask ? 2 : 1) : 0;\r\n\r\n      let shaderSet: CubismShaderSet = new CubismShaderSet();\r\n\r\n      switch (colorBlendMode) {\r\n        case CubismBlendMode.CubismBlendMode_Normal:\r\n        default:\r\n          shaderSet = this._shaderSets.at(\r\n            ShaderNames.ShaderNames_NormalPremultipliedAlpha + offset\r\n          );\r\n          SRC_COLOR = this.gl.ONE;\r\n          DST_COLOR = this.gl.ONE_MINUS_SRC_ALPHA;\r\n          SRC_ALPHA = this.gl.ONE;\r\n          DST_ALPHA = this.gl.ONE_MINUS_SRC_ALPHA;\r\n          break;\r\n\r\n        case CubismBlendMode.CubismBlendMode_Additive:\r\n          shaderSet = this._shaderSets.at(\r\n            ShaderNames.ShaderNames_AddPremultipliedAlpha + offset\r\n          );\r\n          SRC_COLOR = this.gl.ONE;\r\n          DST_COLOR = this.gl.ONE;\r\n          SRC_ALPHA = this.gl.ZERO;\r\n          DST_ALPHA = this.gl.ONE;\r\n          break;\r\n\r\n        case CubismBlendMode.CubismBlendMode_Multiplicative:\r\n          shaderSet = this._shaderSets.at(\r\n            ShaderNames.ShaderNames_MultPremultipliedAlpha + offset\r\n          );\r\n          SRC_COLOR = this.gl.DST_COLOR;\r\n          DST_COLOR = this.gl.ONE_MINUS_SRC_ALPHA;\r\n          SRC_ALPHA = this.gl.ZERO;\r\n          DST_ALPHA = this.gl.ONE;\r\n          break;\r\n      }\r\n\r\n      this.gl.useProgram(shaderSet.shaderProgram);\r\n\r\n      // 頂点配列の設定\r\n      if (bufferData.vertex == null) {\r\n        bufferData.vertex = this.gl.createBuffer();\r\n      }\r\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.vertex);\r\n      this.gl.bufferData(\r\n        this.gl.ARRAY_BUFFER,\r\n        vertexArray,\r\n        this.gl.DYNAMIC_DRAW\r\n      );\r\n      this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);\r\n      this.gl.vertexAttribPointer(\r\n        shaderSet.attributePositionLocation,\r\n        2,\r\n        this.gl.FLOAT,\r\n        false,\r\n        0,\r\n        0\r\n      );\r\n\r\n      // テクスチャ頂点の設定\r\n      if (bufferData.uv == null) {\r\n        bufferData.uv = this.gl.createBuffer();\r\n      }\r\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.uv);\r\n      this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);\r\n      this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);\r\n      this.gl.vertexAttribPointer(\r\n        shaderSet.attributeTexCoordLocation,\r\n        2,\r\n        this.gl.FLOAT,\r\n        false,\r\n        0,\r\n        0\r\n      );\r\n\r\n      if (masked) {\r\n        this.gl.activeTexture(this.gl.TEXTURE1);\r\n        const tex: WebGLTexture = renderer\r\n          .getClippingContextBufferForDraw()\r\n          .getClippingManager()\r\n          .getColorBuffer()\r\n          .at(renderer.getClippingContextBufferForDraw()._bufferIndex);\r\n        this.gl.bindTexture(this.gl.TEXTURE_2D, tex);\r\n        this.gl.uniform1i(shaderSet.samplerTexture1Location, 1);\r\n\r\n        // view座標をClippingContextの座標に変換するための行列を設定\r\n        this.gl.uniformMatrix4fv(\r\n          shaderSet.uniformClipMatrixLocation,\r\n          false,\r\n          renderer.getClippingContextBufferForDraw()._matrixForDraw.getArray()\r\n        );\r\n\r\n        // 使用するカラーチャンネルを設定\r\n        const channelNo: number =\r\n          renderer.getClippingContextBufferForDraw()._layoutChannelNo;\r\n        const colorChannel: CubismTextureColor = renderer\r\n          .getClippingContextBufferForDraw()\r\n          .getClippingManager()\r\n          .getChannelFlagAsColor(channelNo);\r\n        this.gl.uniform4f(\r\n          shaderSet.uniformChannelFlagLocation,\r\n          colorChannel.R,\r\n          colorChannel.G,\r\n          colorChannel.B,\r\n          colorChannel.A\r\n        );\r\n      }\r\n\r\n      // テクスチャ設定\r\n      this.gl.activeTexture(this.gl.TEXTURE0);\r\n      this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);\r\n      this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);\r\n\r\n      // 座標変換\r\n      this.gl.uniformMatrix4fv(\r\n        shaderSet.uniformMatrixLocation,\r\n        false,\r\n        matrix4x4.getArray()\r\n      );\r\n\r\n      this.gl.uniform4f(\r\n        shaderSet.uniformBaseColorLocation,\r\n        baseColor.R,\r\n        baseColor.G,\r\n        baseColor.B,\r\n        baseColor.A\r\n      );\r\n\r\n      this.gl.uniform4f(\r\n        shaderSet.uniformMultiplyColorLocation,\r\n        multiplyColor.R,\r\n        multiplyColor.G,\r\n        multiplyColor.B,\r\n        multiplyColor.A\r\n      );\r\n\r\n      this.gl.uniform4f(\r\n        shaderSet.uniformScreenColorLocation,\r\n        screenColor.R,\r\n        screenColor.G,\r\n        screenColor.B,\r\n        screenColor.A\r\n      );\r\n    }\r\n\r\n    // IBOを作成し、データを転送\r\n    if (bufferData.index == null) {\r\n      bufferData.index = this.gl.createBuffer();\r\n    }\r\n    this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, bufferData.index);\r\n    this.gl.bufferData(\r\n      this.gl.ELEMENT_ARRAY_BUFFER,\r\n      indexArray,\r\n      this.gl.DYNAMIC_DRAW\r\n    );\r\n    this.gl.blendFuncSeparate(SRC_COLOR, DST_COLOR, SRC_ALPHA, DST_ALPHA);\r\n  }\r\n\r\n  /**\r\n   * シェーダープログラムを解放する\r\n   */\r\n  public releaseShaderProgram(): void {\r\n    for (let i = 0; i < this._shaderSets.getSize(); i++) {\r\n      this.gl.deleteProgram(this._shaderSets.at(i).shaderProgram);\r\n      this._shaderSets.at(i).shaderProgram = 0;\r\n      this._shaderSets.set(i, void 0);\r\n      this._shaderSets.set(i, null);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * シェーダープログラムを初期化する\r\n   * @param vertShaderSrc 頂点シェーダのソース\r\n   * @param fragShaderSrc フラグメントシェーダのソース\r\n   */\r\n  public generateShaders(): void {\r\n    for (let i = 0; i < ShaderCount; i++) {\r\n      this._shaderSets.pushBack(new CubismShaderSet());\r\n    }\r\n\r\n    this._shaderSets.at(0).shaderProgram = this.loadShaderProgram(\r\n      vertexShaderSrcSetupMask,\r\n      fragmentShaderSrcsetupMask\r\n    );\r\n\r\n    this._shaderSets.at(1).shaderProgram = this.loadShaderProgram(\r\n      vertexShaderSrc,\r\n      fragmentShaderSrcPremultipliedAlpha\r\n    );\r\n    this._shaderSets.at(2).shaderProgram = this.loadShaderProgram(\r\n      vertexShaderSrcMasked,\r\n      fragmentShaderSrcMaskPremultipliedAlpha\r\n    );\r\n    this._shaderSets.at(3).shaderProgram = this.loadShaderProgram(\r\n      vertexShaderSrcMasked,\r\n      fragmentShaderSrcMaskInvertedPremultipliedAlpha\r\n    );\r\n\r\n    // 加算も通常と同じシェーダーを利用する\r\n    this._shaderSets.at(4).shaderProgram = this._shaderSets.at(1).shaderProgram;\r\n    this._shaderSets.at(5).shaderProgram = this._shaderSets.at(2).shaderProgram;\r\n    this._shaderSets.at(6).shaderProgram = this._shaderSets.at(3).shaderProgram;\r\n\r\n    // 乗算も通常と同じシェーダーを利用する\r\n    this._shaderSets.at(7).shaderProgram = this._shaderSets.at(1).shaderProgram;\r\n    this._shaderSets.at(8).shaderProgram = this._shaderSets.at(2).shaderProgram;\r\n    this._shaderSets.at(9).shaderProgram = this._shaderSets.at(3).shaderProgram;\r\n\r\n    // SetupMask\r\n    this._shaderSets.at(0).attributePositionLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(0).shaderProgram,\r\n        'a_position'\r\n      );\r\n    this._shaderSets.at(0).attributeTexCoordLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(0).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n    this._shaderSets.at(0).samplerTexture0Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(0).shaderProgram,\r\n      's_texture0'\r\n    );\r\n    this._shaderSets.at(0).uniformClipMatrixLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(0).shaderProgram,\r\n        'u_clipMatrix'\r\n      );\r\n    this._shaderSets.at(0).uniformChannelFlagLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(0).shaderProgram,\r\n        'u_channelFlag'\r\n      );\r\n    this._shaderSets.at(0).uniformBaseColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(0).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n    this._shaderSets.at(0).uniformMultiplyColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(0).shaderProgram,\r\n        'u_multiplyColor'\r\n      );\r\n    this._shaderSets.at(0).uniformScreenColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(0).shaderProgram,\r\n        'u_screenColor'\r\n      );\r\n\r\n    // 通常（PremultipliedAlpha）\r\n    this._shaderSets.at(1).attributePositionLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(1).shaderProgram,\r\n        'a_position'\r\n      );\r\n    this._shaderSets.at(1).attributeTexCoordLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(1).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n    this._shaderSets.at(1).samplerTexture0Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(1).shaderProgram,\r\n      's_texture0'\r\n    );\r\n    this._shaderSets.at(1).uniformMatrixLocation = this.gl.getUniformLocation(\r\n      this._shaderSets.at(1).shaderProgram,\r\n      'u_matrix'\r\n    );\r\n    this._shaderSets.at(1).uniformBaseColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(1).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n    this._shaderSets.at(1).uniformMultiplyColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(1).shaderProgram,\r\n        'u_multiplyColor'\r\n      );\r\n    this._shaderSets.at(1).uniformScreenColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(1).shaderProgram,\r\n        'u_screenColor'\r\n      );\r\n\r\n    // 通常（クリッピング、PremultipliedAlpha）\r\n    this._shaderSets.at(2).attributePositionLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(2).shaderProgram,\r\n        'a_position'\r\n      );\r\n    this._shaderSets.at(2).attributeTexCoordLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(2).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n    this._shaderSets.at(2).samplerTexture0Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(2).shaderProgram,\r\n      's_texture0'\r\n    );\r\n    this._shaderSets.at(2).samplerTexture1Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(2).shaderProgram,\r\n      's_texture1'\r\n    );\r\n    this._shaderSets.at(2).uniformMatrixLocation = this.gl.getUniformLocation(\r\n      this._shaderSets.at(2).shaderProgram,\r\n      'u_matrix'\r\n    );\r\n    this._shaderSets.at(2).uniformClipMatrixLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(2).shaderProgram,\r\n        'u_clipMatrix'\r\n      );\r\n    this._shaderSets.at(2).uniformChannelFlagLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(2).shaderProgram,\r\n        'u_channelFlag'\r\n      );\r\n    this._shaderSets.at(2).uniformBaseColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(2).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n    this._shaderSets.at(2).uniformMultiplyColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(2).shaderProgram,\r\n        'u_multiplyColor'\r\n      );\r\n    this._shaderSets.at(2).uniformScreenColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(2).shaderProgram,\r\n        'u_screenColor'\r\n      );\r\n\r\n    // 通常（クリッピング・反転, PremultipliedAlpha）\r\n    this._shaderSets.at(3).attributePositionLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(3).shaderProgram,\r\n        'a_position'\r\n      );\r\n    this._shaderSets.at(3).attributeTexCoordLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(3).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n    this._shaderSets.at(3).samplerTexture0Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(3).shaderProgram,\r\n      's_texture0'\r\n    );\r\n    this._shaderSets.at(3).samplerTexture1Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(3).shaderProgram,\r\n      's_texture1'\r\n    );\r\n    this._shaderSets.at(3).uniformMatrixLocation = this.gl.getUniformLocation(\r\n      this._shaderSets.at(3).shaderProgram,\r\n      'u_matrix'\r\n    );\r\n    this._shaderSets.at(3).uniformClipMatrixLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(3).shaderProgram,\r\n        'u_clipMatrix'\r\n      );\r\n    this._shaderSets.at(3).uniformChannelFlagLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(3).shaderProgram,\r\n        'u_channelFlag'\r\n      );\r\n    this._shaderSets.at(3).uniformBaseColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(3).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n    this._shaderSets.at(3).uniformMultiplyColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(3).shaderProgram,\r\n        'u_multiplyColor'\r\n      );\r\n    this._shaderSets.at(3).uniformScreenColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(3).shaderProgram,\r\n        'u_screenColor'\r\n      );\r\n\r\n    // 加算（PremultipliedAlpha）\r\n    this._shaderSets.at(4).attributePositionLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(4).shaderProgram,\r\n        'a_position'\r\n      );\r\n    this._shaderSets.at(4).attributeTexCoordLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(4).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n    this._shaderSets.at(4).samplerTexture0Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(4).shaderProgram,\r\n      's_texture0'\r\n    );\r\n    this._shaderSets.at(4).uniformMatrixLocation = this.gl.getUniformLocation(\r\n      this._shaderSets.at(4).shaderProgram,\r\n      'u_matrix'\r\n    );\r\n    this._shaderSets.at(4).uniformBaseColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(4).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n    this._shaderSets.at(4).uniformMultiplyColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(4).shaderProgram,\r\n        'u_multiplyColor'\r\n      );\r\n    this._shaderSets.at(4).uniformScreenColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(4).shaderProgram,\r\n        'u_screenColor'\r\n      );\r\n\r\n    // 加算（クリッピング、PremultipliedAlpha）\r\n    this._shaderSets.at(5).attributePositionLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(5).shaderProgram,\r\n        'a_position'\r\n      );\r\n    this._shaderSets.at(5).attributeTexCoordLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(5).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n    this._shaderSets.at(5).samplerTexture0Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(5).shaderProgram,\r\n      's_texture0'\r\n    );\r\n    this._shaderSets.at(5).samplerTexture1Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(5).shaderProgram,\r\n      's_texture1'\r\n    );\r\n    this._shaderSets.at(5).uniformMatrixLocation = this.gl.getUniformLocation(\r\n      this._shaderSets.at(5).shaderProgram,\r\n      'u_matrix'\r\n    );\r\n    this._shaderSets.at(5).uniformClipMatrixLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(5).shaderProgram,\r\n        'u_clipMatrix'\r\n      );\r\n    this._shaderSets.at(5).uniformChannelFlagLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(5).shaderProgram,\r\n        'u_channelFlag'\r\n      );\r\n    this._shaderSets.at(5).uniformBaseColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(5).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n    this._shaderSets.at(5).uniformMultiplyColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(5).shaderProgram,\r\n        'u_multiplyColor'\r\n      );\r\n    this._shaderSets.at(5).uniformScreenColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(5).shaderProgram,\r\n        'u_screenColor'\r\n      );\r\n\r\n    // 加算（クリッピング・反転、PremultipliedAlpha）\r\n    this._shaderSets.at(6).attributePositionLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(6).shaderProgram,\r\n        'a_position'\r\n      );\r\n    this._shaderSets.at(6).attributeTexCoordLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(6).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n    this._shaderSets.at(6).samplerTexture0Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(6).shaderProgram,\r\n      's_texture0'\r\n    );\r\n    this._shaderSets.at(6).samplerTexture1Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(6).shaderProgram,\r\n      's_texture1'\r\n    );\r\n    this._shaderSets.at(6).uniformMatrixLocation = this.gl.getUniformLocation(\r\n      this._shaderSets.at(6).shaderProgram,\r\n      'u_matrix'\r\n    );\r\n    this._shaderSets.at(6).uniformClipMatrixLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(6).shaderProgram,\r\n        'u_clipMatrix'\r\n      );\r\n    this._shaderSets.at(6).uniformChannelFlagLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(6).shaderProgram,\r\n        'u_channelFlag'\r\n      );\r\n    this._shaderSets.at(6).uniformBaseColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(6).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n    this._shaderSets.at(6).uniformMultiplyColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(6).shaderProgram,\r\n        'u_multiplyColor'\r\n      );\r\n    this._shaderSets.at(6).uniformScreenColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(6).shaderProgram,\r\n        'u_screenColor'\r\n      );\r\n\r\n    // 乗算（PremultipliedAlpha）\r\n    this._shaderSets.at(7).attributePositionLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(7).shaderProgram,\r\n        'a_position'\r\n      );\r\n    this._shaderSets.at(7).attributeTexCoordLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(7).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n    this._shaderSets.at(7).samplerTexture0Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(7).shaderProgram,\r\n      's_texture0'\r\n    );\r\n    this._shaderSets.at(7).uniformMatrixLocation = this.gl.getUniformLocation(\r\n      this._shaderSets.at(7).shaderProgram,\r\n      'u_matrix'\r\n    );\r\n    this._shaderSets.at(7).uniformBaseColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(7).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n    this._shaderSets.at(7).uniformMultiplyColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(7).shaderProgram,\r\n        'u_multiplyColor'\r\n      );\r\n    this._shaderSets.at(7).uniformScreenColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(7).shaderProgram,\r\n        'u_screenColor'\r\n      );\r\n\r\n    // 乗算（クリッピング、PremultipliedAlpha）\r\n    this._shaderSets.at(8).attributePositionLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(8).shaderProgram,\r\n        'a_position'\r\n      );\r\n    this._shaderSets.at(8).attributeTexCoordLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(8).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n    this._shaderSets.at(8).samplerTexture0Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(8).shaderProgram,\r\n      's_texture0'\r\n    );\r\n    this._shaderSets.at(8).samplerTexture1Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(8).shaderProgram,\r\n      's_texture1'\r\n    );\r\n    this._shaderSets.at(8).uniformMatrixLocation = this.gl.getUniformLocation(\r\n      this._shaderSets.at(8).shaderProgram,\r\n      'u_matrix'\r\n    );\r\n    this._shaderSets.at(8).uniformClipMatrixLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(8).shaderProgram,\r\n        'u_clipMatrix'\r\n      );\r\n    this._shaderSets.at(8).uniformChannelFlagLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(8).shaderProgram,\r\n        'u_channelFlag'\r\n      );\r\n    this._shaderSets.at(8).uniformBaseColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(8).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n    this._shaderSets.at(8).uniformMultiplyColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(8).shaderProgram,\r\n        'u_multiplyColor'\r\n      );\r\n    this._shaderSets.at(8).uniformScreenColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(8).shaderProgram,\r\n        'u_screenColor'\r\n      );\r\n\r\n    // 乗算（クリッピング・反転、PremultipliedAlpha）\r\n    this._shaderSets.at(9).attributePositionLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(9).shaderProgram,\r\n        'a_position'\r\n      );\r\n    this._shaderSets.at(9).attributeTexCoordLocation =\r\n      this.gl.getAttribLocation(\r\n        this._shaderSets.at(9).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n    this._shaderSets.at(9).samplerTexture0Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(9).shaderProgram,\r\n      's_texture0'\r\n    );\r\n    this._shaderSets.at(9).samplerTexture1Location = this.gl.getUniformLocation(\r\n      this._shaderSets.at(9).shaderProgram,\r\n      's_texture1'\r\n    );\r\n    this._shaderSets.at(9).uniformMatrixLocation = this.gl.getUniformLocation(\r\n      this._shaderSets.at(9).shaderProgram,\r\n      'u_matrix'\r\n    );\r\n    this._shaderSets.at(9).uniformClipMatrixLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(9).shaderProgram,\r\n        'u_clipMatrix'\r\n      );\r\n    this._shaderSets.at(9).uniformChannelFlagLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(9).shaderProgram,\r\n        'u_channelFlag'\r\n      );\r\n    this._shaderSets.at(9).uniformBaseColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(9).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n    this._shaderSets.at(9).uniformMultiplyColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(9).shaderProgram,\r\n        'u_multiplyColor'\r\n      );\r\n    this._shaderSets.at(9).uniformScreenColorLocation =\r\n      this.gl.getUniformLocation(\r\n        this._shaderSets.at(9).shaderProgram,\r\n        'u_screenColor'\r\n      );\r\n  }\r\n\r\n  /**\r\n   * シェーダプログラムをロードしてアドレスを返す\r\n   * @param vertexShaderSource    頂点シェーダのソース\r\n   * @param fragmentShaderSource  フラグメントシェーダのソース\r\n   * @return シェーダプログラムのアドレス\r\n   */\r\n  public loadShaderProgram(\r\n    vertexShaderSource: string,\r\n    fragmentShaderSource: string\r\n  ): WebGLProgram {\r\n    // Create Shader Program\r\n    let shaderProgram: WebGLProgram = this.gl.createProgram();\r\n\r\n    let vertShader = this.compileShaderSource(\r\n      this.gl.VERTEX_SHADER,\r\n      vertexShaderSource\r\n    );\r\n\r\n    if (!vertShader) {\r\n      CubismLogError('Vertex shader compile error!');\r\n      return 0;\r\n    }\r\n\r\n    let fragShader = this.compileShaderSource(\r\n      this.gl.FRAGMENT_SHADER,\r\n      fragmentShaderSource\r\n    );\r\n    if (!fragShader) {\r\n      CubismLogError('Vertex shader compile error!');\r\n      return 0;\r\n    }\r\n\r\n    // Attach vertex shader to program\r\n    this.gl.attachShader(shaderProgram, vertShader);\r\n\r\n    // Attach fragment shader to program\r\n    this.gl.attachShader(shaderProgram, fragShader);\r\n\r\n    // link program\r\n    this.gl.linkProgram(shaderProgram);\r\n    const linkStatus = this.gl.getProgramParameter(\r\n      shaderProgram,\r\n      this.gl.LINK_STATUS\r\n    );\r\n\r\n    // リンクに失敗したらシェーダーを削除\r\n    if (!linkStatus) {\r\n      CubismLogError('Failed to link program: {0}', shaderProgram);\r\n\r\n      this.gl.deleteShader(vertShader);\r\n      vertShader = 0;\r\n\r\n      this.gl.deleteShader(fragShader);\r\n      fragShader = 0;\r\n\r\n      if (shaderProgram) {\r\n        this.gl.deleteProgram(shaderProgram);\r\n        shaderProgram = 0;\r\n      }\r\n\r\n      return 0;\r\n    }\r\n\r\n    // Release vertex and fragment shaders.\r\n    this.gl.deleteShader(vertShader);\r\n    this.gl.deleteShader(fragShader);\r\n\r\n    return shaderProgram;\r\n  }\r\n\r\n  /**\r\n   * シェーダープログラムをコンパイルする\r\n   * @param shaderType シェーダタイプ(Vertex/Fragment)\r\n   * @param shaderSource シェーダソースコード\r\n   *\r\n   * @return コンパイルされたシェーダープログラム\r\n   */\r\n  public compileShaderSource(\r\n    shaderType: GLenum,\r\n    shaderSource: string\r\n  ): WebGLProgram {\r\n    const source: string = shaderSource;\r\n\r\n    const shader: WebGLProgram = this.gl.createShader(shaderType);\r\n    this.gl.shaderSource(shader, source);\r\n    this.gl.compileShader(shader);\r\n\r\n    if (!shader) {\r\n      const log: string = this.gl.getShaderInfoLog(shader);\r\n      CubismLogError('Shader compile log: {0} ', log);\r\n    }\r\n\r\n    const status: any = this.gl.getShaderParameter(\r\n      shader,\r\n      this.gl.COMPILE_STATUS\r\n    );\r\n    if (!status) {\r\n      this.gl.deleteShader(shader);\r\n      return null;\r\n    }\r\n\r\n    return shader;\r\n  }\r\n\r\n  public setGl(gl: WebGLRenderingContext): void {\r\n    this.gl = gl;\r\n  }\r\n\r\n  _shaderSets: csmVector<CubismShaderSet>; // ロードしたシェーダープログラムを保持する変数\r\n  gl: WebGLRenderingContext; // webglコンテキスト\r\n}\r\n\r\n/**\r\n * CubismShader_WebGLのインナークラス\r\n */\r\nexport class CubismShaderSet {\r\n  shaderProgram: WebGLProgram; // シェーダープログラムのアドレス\r\n  attributePositionLocation: GLuint; // シェーダープログラムに渡す変数のアドレス（Position）\r\n  attributeTexCoordLocation: GLuint; // シェーダープログラムに渡す変数のアドレス（TexCoord）\r\n  uniformMatrixLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（Matrix）\r\n  uniformClipMatrixLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（ClipMatrix）\r\n  samplerTexture0Location: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（Texture0）\r\n  samplerTexture1Location: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（Texture1）\r\n  uniformBaseColorLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（BaseColor）\r\n  uniformChannelFlagLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（ChannelFlag）\r\n  uniformMultiplyColorLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（MultiplyColor）\r\n  uniformScreenColorLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（ScreenColor）\r\n}\r\n\r\nexport enum ShaderNames {\r\n  // SetupMask\r\n  ShaderNames_SetupMask,\r\n\r\n  // Normal\r\n  ShaderNames_NormalPremultipliedAlpha,\r\n  ShaderNames_NormalMaskedPremultipliedAlpha,\r\n  ShaderNames_NomralMaskedInvertedPremultipliedAlpha,\r\n\r\n  // Add\r\n  ShaderNames_AddPremultipliedAlpha,\r\n  ShaderNames_AddMaskedPremultipliedAlpha,\r\n  ShaderNames_AddMaskedPremultipliedAlphaInverted,\r\n\r\n  // Mult\r\n  ShaderNames_MultPremultipliedAlpha,\r\n  ShaderNames_MultMaskedPremultipliedAlpha,\r\n  ShaderNames_MultMaskedPremultipliedAlphaInverted,\r\n}\r\n\r\nexport const vertexShaderSrcSetupMask =\r\n  'attribute vec4     a_position;' +\r\n  'attribute vec2     a_texCoord;' +\r\n  'varying vec2       v_texCoord;' +\r\n  'varying vec4       v_myPos;' +\r\n  'uniform mat4       u_clipMatrix;' +\r\n  'void main()' +\r\n  '{' +\r\n  '   gl_Position = u_clipMatrix * a_position;' +\r\n  '   v_myPos = u_clipMatrix * a_position;' +\r\n  '   v_texCoord = a_texCoord;' +\r\n  '   v_texCoord.y = 1.0 - v_texCoord.y;' +\r\n  '}';\r\nexport const fragmentShaderSrcsetupMask =\r\n  'precision mediump float;' +\r\n  'varying vec2       v_texCoord;' +\r\n  'varying vec4       v_myPos;' +\r\n  'uniform vec4       u_baseColor;' +\r\n  'uniform vec4       u_channelFlag;' +\r\n  'uniform sampler2D  s_texture0;' +\r\n  'void main()' +\r\n  '{' +\r\n  '   float isInside = ' +\r\n  '       step(u_baseColor.x, v_myPos.x/v_myPos.w)' +\r\n  '       * step(u_baseColor.y, v_myPos.y/v_myPos.w)' +\r\n  '       * step(v_myPos.x/v_myPos.w, u_baseColor.z)' +\r\n  '       * step(v_myPos.y/v_myPos.w, u_baseColor.w);' +\r\n  '   gl_FragColor = u_channelFlag * texture2D(s_texture0, v_texCoord).a * isInside;' +\r\n  '}';\r\n\r\n//----- バーテックスシェーダプログラム -----\r\n// Normal & Add & Mult 共通\r\nexport const vertexShaderSrc =\r\n  'attribute vec4     a_position;' + //v.vertex\r\n  'attribute vec2     a_texCoord;' + //v.texcoord\r\n  'varying vec2       v_texCoord;' + //v2f.texcoord\r\n  'uniform mat4       u_matrix;' +\r\n  'void main()' +\r\n  '{' +\r\n  '   gl_Position = u_matrix * a_position;' +\r\n  '   v_texCoord = a_texCoord;' +\r\n  '   v_texCoord.y = 1.0 - v_texCoord.y;' +\r\n  '}';\r\n\r\n// Normal & Add & Mult 共通（クリッピングされたものの描画用）\r\nexport const vertexShaderSrcMasked =\r\n  'attribute vec4     a_position;' +\r\n  'attribute vec2     a_texCoord;' +\r\n  'varying vec2       v_texCoord;' +\r\n  'varying vec4       v_clipPos;' +\r\n  'uniform mat4       u_matrix;' +\r\n  'uniform mat4       u_clipMatrix;' +\r\n  'void main()' +\r\n  '{' +\r\n  '   gl_Position = u_matrix * a_position;' +\r\n  '   v_clipPos = u_clipMatrix * a_position;' +\r\n  '   v_texCoord = a_texCoord;' +\r\n  '   v_texCoord.y = 1.0 - v_texCoord.y;' +\r\n  '}';\r\n\r\n//----- フラグメントシェーダプログラム -----\r\n// Normal & Add & Mult 共通 （PremultipliedAlpha）\r\nexport const fragmentShaderSrcPremultipliedAlpha =\r\n  'precision mediump float;' +\r\n  'varying vec2       v_texCoord;' + //v2f.texcoord\r\n  'uniform vec4       u_baseColor;' +\r\n  'uniform sampler2D  s_texture0;' + //_MainTex\r\n  'uniform vec4       u_multiplyColor;' +\r\n  'uniform vec4       u_screenColor;' +\r\n  'void main()' +\r\n  '{' +\r\n  '   vec4 texColor = texture2D(s_texture0, v_texCoord);' +\r\n  '   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;' +\r\n  '   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);' +\r\n  '   vec4 color = texColor * u_baseColor;' +\r\n  '   gl_FragColor = vec4(color.rgb, color.a);' +\r\n  '}';\r\n\r\n// Normal （クリッピングされたものの描画用、PremultipliedAlpha兼用）\r\nexport const fragmentShaderSrcMaskPremultipliedAlpha =\r\n  'precision mediump float;' +\r\n  'varying vec2       v_texCoord;' +\r\n  'varying vec4       v_clipPos;' +\r\n  'uniform vec4       u_baseColor;' +\r\n  'uniform vec4       u_channelFlag;' +\r\n  'uniform sampler2D  s_texture0;' +\r\n  'uniform sampler2D  s_texture1;' +\r\n  'uniform vec4       u_multiplyColor;' +\r\n  'uniform vec4       u_screenColor;' +\r\n  'void main()' +\r\n  '{' +\r\n  '   vec4 texColor = texture2D(s_texture0, v_texCoord);' +\r\n  '   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;' +\r\n  '   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);' +\r\n  '   vec4 col_formask = texColor * u_baseColor;' +\r\n  '   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;' +\r\n  '   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;' +\r\n  '   col_formask = col_formask * maskVal;' +\r\n  '   gl_FragColor = col_formask;' +\r\n  '}';\r\n\r\n// Normal & Add & Mult 共通（クリッピングされて反転使用の描画用、PremultipliedAlphaの場合）\r\nexport const fragmentShaderSrcMaskInvertedPremultipliedAlpha =\r\n  'precision mediump float;' +\r\n  'varying vec2      v_texCoord;' +\r\n  'varying vec4      v_clipPos;' +\r\n  'uniform sampler2D s_texture0;' +\r\n  'uniform sampler2D s_texture1;' +\r\n  'uniform vec4      u_channelFlag;' +\r\n  'uniform vec4      u_baseColor;' +\r\n  'uniform vec4      u_multiplyColor;' +\r\n  'uniform vec4      u_screenColor;' +\r\n  'void main()' +\r\n  '{' +\r\n  '   vec4 texColor = texture2D(s_texture0, v_texCoord);' +\r\n  '   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;' +\r\n  '   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);' +\r\n  '   vec4 col_formask = texColor * u_baseColor;' +\r\n  '   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;' +\r\n  '   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;' +\r\n  '   col_formask = col_formask * (1.0 - maskVal);' +\r\n  '   gl_FragColor = col_formask;' +\r\n  '}';\r\n\r\n/**\r\n * WebGL用の描画命令を実装したクラス\r\n */\r\nexport class CubismRenderer_WebGL extends CubismRenderer {\r\n  /**\r\n   * レンダラの初期化処理を実行する\r\n   * 引数に渡したモデルからレンダラの初期化処理に必要な情報を取り出すことができる\r\n   *\r\n   * @param model モデルのインスタンス\r\n   * @param maskBufferCount バッファの生成数\r\n   */\r\n  public initialize(model: CubismModel, maskBufferCount = 1): void {\r\n    if (model.isUsingMasking()) {\r\n      this._clippingManager = new CubismClippingManager_WebGL(); // クリッピングマスク・バッファ前処理方式を初期化\r\n      this._clippingManager.initialize(\r\n        model,\r\n        model.getDrawableCount(),\r\n        model.getDrawableMasks(),\r\n        model.getDrawableMaskCounts(),\r\n        maskBufferCount\r\n      );\r\n    }\r\n\r\n    this._sortedDrawableIndexList.resize(model.getDrawableCount(), 0);\r\n\r\n    super.initialize(model); // 親クラスの処理を呼ぶ\r\n  }\r\n\r\n  /**\r\n   * WebGLテクスチャのバインド処理\r\n   * CubismRendererにテクスチャを設定し、CubismRenderer内でその画像を参照するためのIndex値を戻り値とする\r\n   * @param modelTextureNo セットするモデルテクスチャの番号\r\n   * @param glTextureNo WebGLテクスチャの番号\r\n   */\r\n  public bindTexture(modelTextureNo: number, glTexture: WebGLTexture): void {\r\n    this._textures.setValue(modelTextureNo, glTexture);\r\n  }\r\n\r\n  /**\r\n   * WebGLにバインドされたテクスチャのリストを取得する\r\n   * @return テクスチャのリスト\r\n   */\r\n  public getBindedTextures(): csmMap<number, WebGLTexture> {\r\n    return this._textures;\r\n  }\r\n\r\n  /**\r\n   * クリッピングマスクバッファのサイズを設定する\r\n   * マスク用のFrameBufferを破棄、再作成する為処理コストは高い\r\n   * @param size クリッピングマスクバッファのサイズ\r\n   */\r\n  public setClippingMaskBufferSize(size: number) {\r\n    // クリッピングマスクを利用しない場合は早期リターン\r\n    if (!this._model.isUsingMasking()) {\r\n      return;\r\n    }\r\n\r\n    // インスタンス破棄前にレンダーテクスチャの数を保存\r\n    const renderTextureCount: number =\r\n      this._clippingManager.getRenderTextureCount();\r\n\r\n    // FrameBufferのサイズを変更するためにインスタンスを破棄・再作成する\r\n    this._clippingManager.release();\r\n    this._clippingManager = void 0;\r\n    this._clippingManager = null;\r\n\r\n    this._clippingManager = new CubismClippingManager_WebGL();\r\n\r\n    this._clippingManager.setClippingMaskBufferSize(size);\r\n\r\n    this._clippingManager.initialize(\r\n      this.getModel(),\r\n      this.getModel().getDrawableCount(),\r\n      this.getModel().getDrawableMasks(),\r\n      this.getModel().getDrawableMaskCounts(),\r\n      renderTextureCount // インスタンス破棄前に保存したレンダーテクスチャの数\r\n    );\r\n  }\r\n\r\n  /**\r\n   * クリッピングマスクバッファのサイズを取得する\r\n   * @return クリッピングマスクバッファのサイズ\r\n   */\r\n  public getClippingMaskBufferSize(): number {\r\n    return this._model.isUsingMasking()\r\n      ? this._clippingManager.getClippingMaskBufferSize()\r\n      : -1;\r\n  }\r\n\r\n  /**\r\n   * レンダーテクスチャの枚数を取得する\r\n   * @return レンダーテクスチャの枚数\r\n   */\r\n  public getRenderTextureCount(): number {\r\n    return this._model.isUsingMasking()\r\n      ? this._clippingManager.getRenderTextureCount()\r\n      : -1;\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    super();\r\n    this._clippingContextBufferForMask = null;\r\n    this._clippingContextBufferForDraw = null;\r\n    this._rendererProfile = new CubismRendererProfile_WebGL();\r\n    this.firstDraw = true;\r\n    this._textures = new csmMap<number, number>();\r\n    this._sortedDrawableIndexList = new csmVector<number>();\r\n    this._bufferData = {\r\n      vertex: (WebGLBuffer = null),\r\n      uv: (WebGLBuffer = null),\r\n      index: (WebGLBuffer = null),\r\n    };\r\n\r\n    // テクスチャ対応マップの容量を確保しておく\r\n    this._textures.prepareCapacity(32, true);\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    if (this._clippingManager) {\r\n      this._clippingManager.release();\r\n      this._clippingManager = void 0;\r\n      this._clippingManager = null;\r\n    }\r\n\r\n    if (this.gl == null) {\r\n      return;\r\n    }\r\n    this.gl.deleteBuffer(this._bufferData.vertex);\r\n    this._bufferData.vertex = null;\r\n    this.gl.deleteBuffer(this._bufferData.uv);\r\n    this._bufferData.uv = null;\r\n    this.gl.deleteBuffer(this._bufferData.index);\r\n    this._bufferData.index = null;\r\n    this._bufferData = null;\r\n\r\n    this._textures = null;\r\n  }\r\n\r\n  /**\r\n   * モデルを描画する実際の処理\r\n   */\r\n  public doDrawModel(): void {\r\n    if (this.gl == null) {\r\n      CubismLogError(\r\n        \"'gl' is null. WebGLRenderingContext is required.\\nPlease call 'CubimRenderer_WebGL.startUp' function.\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    //------------ クリッピングマスク・バッファ前処理方式の場合 ------------\r\n    if (this._clippingManager != null) {\r\n      this.preDraw();\r\n      this._clippingManager.setupClippingContext(this.getModel(), this);\r\n    }\r\n\r\n    // 上記クリッピング処理内でも一度PreDrawを呼ぶので注意!!\r\n    this.preDraw();\r\n\r\n    const drawableCount: number = this.getModel().getDrawableCount();\r\n    const renderOrder: Int32Array = this.getModel().getDrawableRenderOrders();\r\n\r\n    // インデックスを描画順でソート\r\n    for (let i = 0; i < drawableCount; ++i) {\r\n      const order: number = renderOrder[i];\r\n      this._sortedDrawableIndexList.set(order, i);\r\n    }\r\n\r\n    // 描画\r\n    for (let i = 0; i < drawableCount; ++i) {\r\n      const drawableIndex: number = this._sortedDrawableIndexList.at(i);\r\n\r\n      // Drawableが表示状態でなければ処理をパスする\r\n      if (!this.getModel().getDrawableDynamicFlagIsVisible(drawableIndex)) {\r\n        continue;\r\n      }\r\n\r\n      const clipContext =\r\n        this._clippingManager != null\r\n          ? this._clippingManager\r\n              .getClippingContextListForDraw()\r\n              .at(drawableIndex)\r\n          : null;\r\n\r\n      if (clipContext != null && this.isUsingHighPrecisionMask()) {\r\n        // 描くことになっていた\r\n        if (clipContext._isUsing) {\r\n          // 生成したFrameBufferと同じサイズでビューポートを設定\r\n          this.gl.viewport(\r\n            0,\r\n            0,\r\n            this._clippingManager.getClippingMaskBufferSize(),\r\n            this._clippingManager.getClippingMaskBufferSize()\r\n          );\r\n\r\n          this.preDraw(); // バッファをクリアする\r\n\r\n          // ---------- マスク描画処理 ----------\r\n          // マスク用RenderTextureをactiveにセット\r\n          this.gl.bindFramebuffer(\r\n            this.gl.FRAMEBUFFER,\r\n            clipContext\r\n              .getClippingManager()\r\n              .getMaskRenderTexture()\r\n              .at(clipContext._bufferIndex)\r\n          );\r\n\r\n          // マスクをクリアする\r\n          // (仮仕様) 1が無効（描かれない）領域、0が有効（描かれる）領域。（シェーダーCd*Csで0に近い値をかけてマスクを作る。1をかけると何も起こらない）\r\n          this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\r\n          this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n        }\r\n\r\n        {\r\n          const clipDrawCount: number = clipContext._clippingIdCount;\r\n\r\n          for (let index = 0; index < clipDrawCount; index++) {\r\n            const clipDrawIndex: number = clipContext._clippingIdList[index];\r\n\r\n            // 頂点情報が更新されておらず、信頼性がない場合は描画をパスする\r\n            if (\r\n              !this._model.getDrawableDynamicFlagVertexPositionsDidChange(\r\n                clipDrawIndex\r\n              )\r\n            ) {\r\n              continue;\r\n            }\r\n\r\n            this.setIsCulling(\r\n              this._model.getDrawableCulling(clipDrawIndex) != false\r\n            );\r\n\r\n            // 今回専用の変換を適用して描く\r\n            // チャンネルも切り替える必要がある(A,R,G,B)\r\n            this.setClippingContextBufferForMask(clipContext);\r\n\r\n            this.drawMesh(\r\n              this.getModel().getDrawableTextureIndex(clipDrawIndex),\r\n              this.getModel().getDrawableVertexIndexCount(clipDrawIndex),\r\n              this.getModel().getDrawableVertexCount(clipDrawIndex),\r\n              this.getModel().getDrawableVertexIndices(clipDrawIndex),\r\n              this.getModel().getDrawableVertices(clipDrawIndex),\r\n              this.getModel().getDrawableVertexUvs(clipDrawIndex),\r\n              this.getModel().getMultiplyColor(clipDrawIndex),\r\n              this.getModel().getScreenColor(clipDrawIndex),\r\n              this.getModel().getDrawableOpacity(clipDrawIndex),\r\n              CubismBlendMode.CubismBlendMode_Normal, // クリッピングは通常描画を強制\r\n              false // マスク生成時はクリッピングの反転使用は全く関係がない\r\n            );\r\n          }\r\n        }\r\n\r\n        {\r\n          // --- 後処理 ---\r\n          this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo); // 描画対象を戻す\r\n          this.setClippingContextBufferForMask(null);\r\n\r\n          this.gl.viewport(\r\n            s_viewport[0],\r\n            s_viewport[1],\r\n            s_viewport[2],\r\n            s_viewport[3]\r\n          );\r\n\r\n          this.preDraw(); // バッファをクリアする\r\n        }\r\n      }\r\n\r\n      // クリッピングマスクをセットする\r\n      this.setClippingContextBufferForDraw(clipContext);\r\n\r\n      this.setIsCulling(this.getModel().getDrawableCulling(drawableIndex));\r\n\r\n      this.drawMesh(\r\n        this.getModel().getDrawableTextureIndex(drawableIndex),\r\n        this.getModel().getDrawableVertexIndexCount(drawableIndex),\r\n        this.getModel().getDrawableVertexCount(drawableIndex),\r\n        this.getModel().getDrawableVertexIndices(drawableIndex),\r\n        this.getModel().getDrawableVertices(drawableIndex),\r\n        this.getModel().getDrawableVertexUvs(drawableIndex),\r\n        this.getModel().getMultiplyColor(drawableIndex),\r\n        this.getModel().getScreenColor(drawableIndex),\r\n        this.getModel().getDrawableOpacity(drawableIndex),\r\n        this.getModel().getDrawableBlendMode(drawableIndex),\r\n        this.getModel().getDrawableInvertedMaskBit(drawableIndex)\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * [オーバーライド]\r\n   * 描画オブジェクト（アートメッシュ）を描画する。\r\n   * ポリゴンメッシュとテクスチャ番号をセットで渡す。\r\n   * @param textureNo 描画するテクスチャ番号\r\n   * @param indexCount 描画オブジェクトのインデックス値\r\n   * @param vertexCount ポリゴンメッシュの頂点数\r\n   * @param indexArray ポリゴンメッシュのインデックス配列\r\n   * @param vertexArray ポリゴンメッシュの頂点配列\r\n   * @param uvArray uv配列\r\n   * @param opacity 不透明度\r\n   * @param colorBlendMode カラー合成タイプ\r\n   * @param invertedMask マスク使用時のマスクの反転使用\r\n   */\r\n  public drawMesh(\r\n    textureNo: number,\r\n    indexCount: number,\r\n    vertexCount: number,\r\n    indexArray: Uint16Array,\r\n    vertexArray: Float32Array,\r\n    uvArray: Float32Array,\r\n    multiplyColor: CubismTextureColor,\r\n    screenColor: CubismTextureColor,\r\n    opacity: number,\r\n    colorBlendMode: CubismBlendMode,\r\n    invertedMask: boolean\r\n  ): void {\r\n    // 裏面描画の有効・無効\r\n    if (this.isCulling()) {\r\n      this.gl.enable(this.gl.CULL_FACE);\r\n    } else {\r\n      this.gl.disable(this.gl.CULL_FACE);\r\n    }\r\n\r\n    this.gl.frontFace(this.gl.CCW); // Cubism SDK OpenGLはマスク・アートメッシュ共にCCWが表面\r\n\r\n    const modelColorRGBA: CubismTextureColor = this.getModelColor();\r\n\r\n    if (this.getClippingContextBufferForMask() == null) {\r\n      // マスク生成時以外\r\n      modelColorRGBA.A *= opacity;\r\n      if (this.isPremultipliedAlpha()) {\r\n        modelColorRGBA.R *= modelColorRGBA.A;\r\n        modelColorRGBA.G *= modelColorRGBA.A;\r\n        modelColorRGBA.B *= modelColorRGBA.A;\r\n      }\r\n    }\r\n\r\n    let drawtexture: WebGLTexture; // シェーダに渡すテクスチャ\r\n\r\n    // テクスチャマップからバインド済みテクスチャＩＤを取得\r\n    // バインドされていなければダミーのテクスチャIDをセットする\r\n    if (this._textures.getValue(textureNo) != null) {\r\n      drawtexture = this._textures.getValue(textureNo);\r\n    } else {\r\n      drawtexture = null;\r\n    }\r\n\r\n    CubismShader_WebGL.getInstance().setupShaderProgram(\r\n      this,\r\n      drawtexture,\r\n      vertexCount,\r\n      vertexArray,\r\n      indexArray,\r\n      uvArray,\r\n      this._bufferData,\r\n      opacity,\r\n      colorBlendMode,\r\n      modelColorRGBA,\r\n      multiplyColor,\r\n      screenColor,\r\n      this.isPremultipliedAlpha(),\r\n      this.getMvpMatrix(),\r\n      invertedMask\r\n    );\r\n\r\n    // ポリゴンメッシュを描画する\r\n    this.gl.drawElements(\r\n      this.gl.TRIANGLES,\r\n      indexCount,\r\n      this.gl.UNSIGNED_SHORT,\r\n      0\r\n    );\r\n\r\n    // 後処理\r\n    this.gl.useProgram(null);\r\n    this.setClippingContextBufferForDraw(null);\r\n    this.setClippingContextBufferForMask(null);\r\n  }\r\n\r\n  protected saveProfile(): void {\r\n    this._rendererProfile.save();\r\n  }\r\n\r\n  protected restoreProfile(): void {\r\n    this._rendererProfile.restore();\r\n  }\r\n\r\n  /**\r\n   * レンダラが保持する静的なリソースを解放する\r\n   * WebGLの静的なシェーダープログラムを解放する\r\n   */\r\n  public static doStaticRelease(): void {\r\n    CubismShader_WebGL.deleteInstance();\r\n  }\r\n\r\n  /**\r\n   * レンダーステートを設定する\r\n   * @param fbo アプリケーション側で指定しているフレームバッファ\r\n   * @param viewport ビューポート\r\n   */\r\n  public setRenderState(fbo: WebGLFramebuffer, viewport: number[]): void {\r\n    s_fbo = fbo;\r\n    s_viewport = viewport;\r\n  }\r\n\r\n  /**\r\n   * 描画開始時の追加処理\r\n   * モデルを描画する前にクリッピングマスクに必要な処理を実装している\r\n   */\r\n  public preDraw(): void {\r\n    if (this.firstDraw) {\r\n      this.firstDraw = false;\r\n    }\r\n\r\n    this.gl.disable(this.gl.SCISSOR_TEST);\r\n    this.gl.disable(this.gl.STENCIL_TEST);\r\n    this.gl.disable(this.gl.DEPTH_TEST);\r\n\r\n    // カリング（1.0beta3）\r\n    this.gl.frontFace(this.gl.CW);\r\n\r\n    this.gl.enable(this.gl.BLEND);\r\n    this.gl.colorMask(true, true, true, true);\r\n\r\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null); // 前にバッファがバインドされていたら破棄する必要がある\r\n    this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);\r\n\r\n    // 異方性フィルタリングを適用する\r\n    if (this.getAnisotropy() > 0.0 && this._extension) {\r\n      for (let i = 0; i < this._textures.getSize(); ++i) {\r\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this._textures.getValue(i));\r\n        this.gl.texParameterf(\r\n          this.gl.TEXTURE_2D,\r\n          this._extension.TEXTURE_MAX_ANISOTROPY_EXT,\r\n          this.getAnisotropy()\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * マスクテクスチャに描画するクリッピングコンテキストをセットする\r\n   */\r\n  public setClippingContextBufferForMask(clip: CubismClippingContext) {\r\n    this._clippingContextBufferForMask = clip;\r\n  }\r\n\r\n  /**\r\n   * マスクテクスチャに描画するクリッピングコンテキストを取得する\r\n   * @return マスクテクスチャに描画するクリッピングコンテキスト\r\n   */\r\n  public getClippingContextBufferForMask(): CubismClippingContext {\r\n    return this._clippingContextBufferForMask;\r\n  }\r\n\r\n  /**\r\n   * 画面上に描画するクリッピングコンテキストをセットする\r\n   */\r\n  public setClippingContextBufferForDraw(clip: CubismClippingContext): void {\r\n    this._clippingContextBufferForDraw = clip;\r\n  }\r\n\r\n  /**\r\n   * 画面上に描画するクリッピングコンテキストを取得する\r\n   * @return 画面上に描画するクリッピングコンテキスト\r\n   */\r\n  public getClippingContextBufferForDraw(): CubismClippingContext {\r\n    return this._clippingContextBufferForDraw;\r\n  }\r\n\r\n  /**\r\n   * glの設定\r\n   */\r\n  public startUp(gl: WebGLRenderingContext): void {\r\n    this.gl = gl;\r\n\r\n    if (this._clippingManager) {\r\n      this._clippingManager.setGL(gl);\r\n    }\r\n\r\n    CubismShader_WebGL.getInstance().setGl(gl);\r\n    this._rendererProfile.setGl(gl);\r\n\r\n    // 異方性フィルタリングが使用できるかチェック\r\n    this._extension =\r\n      this.gl.getExtension('EXT_texture_filter_anisotropic') ||\r\n      this.gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic') ||\r\n      this.gl.getExtension('MOZ_EXT_texture_filter_anisotropic');\r\n  }\r\n\r\n  _textures: csmMap<number, WebGLTexture>; // モデルが参照するテクスチャとレンダラでバインドしているテクスチャとのマップ\r\n  _sortedDrawableIndexList: csmVector<number>; // 描画オブジェクトのインデックスを描画順に並べたリスト\r\n  _clippingManager: CubismClippingManager_WebGL; // クリッピングマスク管理オブジェクト\r\n  _clippingContextBufferForMask: CubismClippingContext; // マスクテクスチャに描画するためのクリッピングコンテキスト\r\n  _clippingContextBufferForDraw: CubismClippingContext; // 画面上描画するためのクリッピングコンテキスト\r\n  _rendererProfile: CubismRendererProfile_WebGL;\r\n  firstDraw: boolean;\r\n  _bufferData: {\r\n    vertex: WebGLBuffer;\r\n    uv: WebGLBuffer;\r\n    index: WebGLBuffer;\r\n  }; // 頂点バッファデータ\r\n  _extension: any; // 拡張機能\r\n  gl: WebGLRenderingContext; // webglコンテキスト\r\n}\r\n\r\n/**\r\n * レンダラが保持する静的なリソースを開放する\r\n */\r\nCubismRenderer.staticRelease = (): void => {\r\n  CubismRenderer_WebGL.doStaticRelease();\r\n};\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismrenderer_webgl';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismClippingContext = $.CubismClippingContext;\r\n  export type CubismClippingContext = $.CubismClippingContext;\r\n  export const CubismClippingManager_WebGL = $.CubismClippingManager_WebGL;\r\n  export type CubismClippingManager_WebGL = $.CubismClippingManager_WebGL;\r\n  export const CubismRenderTextureResource = $.CubismRenderTextureResource;\r\n  export type CubismRenderTextureResource = $.CubismRenderTextureResource;\r\n  export const CubismRenderer_WebGL = $.CubismRenderer_WebGL;\r\n  export type CubismRenderer_WebGL = $.CubismRenderer_WebGL;\r\n  export const CubismShaderSet = $.CubismShaderSet;\r\n  export type CubismShaderSet = $.CubismShaderSet;\r\n  export const CubismShader_WebGL = $.CubismShader_WebGL;\r\n  export type CubismShader_WebGL = $.CubismShader_WebGL;\r\n  export const ShaderNames = $.ShaderNames;\r\n  export type ShaderNames = $.ShaderNames;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismIdHandle } from '../id/cubismid';\r\nimport { CubismFramework } from '../live2dcubismframework';\r\nimport {\r\n  CubismBlendMode,\r\n  CubismTextureColor,\r\n} from '../rendering/cubismrenderer';\r\nimport { csmMap } from '../type/csmmap';\r\nimport { csmVector } from '../type/csmvector';\r\nimport { CSM_ASSERT } from '../utils/cubismdebug';\r\n\r\n/**\r\n * SDK側から与えられたDrawableの乗算色・スクリーン色上書きフラグと\r\n * その色を保持する構造体\r\n */\r\nexport class DrawableColorData {\r\n  isOverwritten = false;\r\n  Color: CubismTextureColor = new CubismTextureColor();\r\n}\r\n\r\n/**\r\n * テクスチャのカリング設定を管理するための構造体\r\n */\r\nexport class DrawableCullingData {\r\n  /**\r\n   * コンストラクタ\r\n   *\r\n   * @param isOverwritten\r\n   * @param isCulling\r\n   */\r\n  public constructor(isOverwritten = false, isCulling = false) {\r\n    isOverwritten = this.isOverwritten;\r\n    isCulling = this.isCulling;\r\n  }\r\n\r\n  public isOverwritten: boolean;\r\n  public isCulling: boolean;\r\n}\r\n\r\n/**\r\n * モデル\r\n *\r\n * Mocデータから生成されるモデルのクラス。\r\n */\r\nexport class CubismModel {\r\n  /**\r\n   * モデルのパラメータの更新\r\n   */\r\n  public update(): void {\r\n    // Update model\r\n    this._model.update();\r\n\r\n    this._model.drawables.resetDynamicFlags();\r\n  }\r\n\r\n  /**\r\n   * PixelsPerUnitを取得する\r\n   * @returns PixelsPerUnit\r\n   */\r\n  public getPixelsPerUnit(): number {\r\n    if (this._model == null) {\r\n      return 0.0;\r\n    }\r\n\r\n    return this._model.canvasinfo.PixelsPerUnit;\r\n  }\r\n\r\n  /**\r\n   * キャンバスの幅を取得する\r\n   */\r\n  public getCanvasWidth(): number {\r\n    if (this._model == null) {\r\n      return 0.0;\r\n    }\r\n\r\n    return (\r\n      this._model.canvasinfo.CanvasWidth / this._model.canvasinfo.PixelsPerUnit\r\n    );\r\n  }\r\n\r\n  /**\r\n   * キャンバスの高さを取得する\r\n   */\r\n  public getCanvasHeight(): number {\r\n    if (this._model == null) {\r\n      return 0.0;\r\n    }\r\n\r\n    return (\r\n      this._model.canvasinfo.CanvasHeight / this._model.canvasinfo.PixelsPerUnit\r\n    );\r\n  }\r\n\r\n  /**\r\n   * パラメータを保存する\r\n   */\r\n  public saveParameters(): void {\r\n    const parameterCount: number = this._model.parameters.count;\r\n    const savedParameterCount: number = this._savedParameters.getSize();\r\n\r\n    for (let i = 0; i < parameterCount; ++i) {\r\n      if (i < savedParameterCount) {\r\n        this._savedParameters.set(i, this._parameterValues[i]);\r\n      } else {\r\n        this._savedParameters.pushBack(this._parameterValues[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 乗算色を取得する\r\n   * @param index Drawablesのインデックス\r\n   * @returns 指定したdrawableの乗算色(RGBA)\r\n   */\r\n  public getMultiplyColor(index: number): CubismTextureColor {\r\n    // Drawableとモデル全体の乗算色上書きフラグがどちらもtrueな場合、モデル全体の上書きフラグが優先される\r\n    if (\r\n      this.getOverwriteFlagForModelMultiplyColors() ||\r\n      this.getOverwriteFlagForDrawableMultiplyColors(index)\r\n    ) {\r\n      return this._userMultiplyColors.at(index).Color;\r\n    }\r\n\r\n    const color = this.getDrawableMultiplyColor(index);\r\n    return color;\r\n  }\r\n\r\n  /**\r\n   * スクリーン色を取得する\r\n   * @param index Drawablesのインデックス\r\n   * @returns 指定したdrawableのスクリーン色(RGBA)\r\n   */\r\n  public getScreenColor(index: number): CubismTextureColor {\r\n    // Drawableとモデル全体のスクリーン色上書きフラグがどちらもtrueな場合、モデル全体の上書きフラグが優先される\r\n    if (\r\n      this.getOverwriteFlagForModelScreenColors() ||\r\n      this.getOverwriteFlagForDrawableScreenColors(index)\r\n    ) {\r\n      return this._userScreenColors.at(index).Color;\r\n    }\r\n\r\n    const color = this.getDrawableScreenColor(index);\r\n    return color;\r\n  }\r\n\r\n  /**\r\n   * 乗算色をセットする\r\n   * @param index Drawablesのインデックス\r\n   * @param color 設定する乗算色(CubismTextureColor)\r\n   */\r\n  public setMultiplyColorByTextureColor(\r\n    index: number,\r\n    color: CubismTextureColor\r\n  ) {\r\n    this.setMultiplyColorByRGBA(index, color.R, color.G, color.B, color.A);\r\n  }\r\n\r\n  /**\r\n   * 乗算色をセットする\r\n   * @param index Drawablesのインデックス\r\n   * @param r 設定する乗算色のR値\r\n   * @param g 設定する乗算色のG値\r\n   * @param b 設定する乗算色のB値\r\n   * @param a 設定する乗算色のA値\r\n   */\r\n  public setMultiplyColorByRGBA(\r\n    index: number,\r\n    r: number,\r\n    g: number,\r\n    b: number,\r\n    a = 1.0\r\n  ) {\r\n    this._userMultiplyColors.at(index).Color.R = r;\r\n    this._userMultiplyColors.at(index).Color.G = g;\r\n    this._userMultiplyColors.at(index).Color.B = b;\r\n    this._userMultiplyColors.at(index).Color.A = a;\r\n  }\r\n\r\n  /**\r\n   * スクリーン色をセットする\r\n   * @param index Drawablesのインデックス\r\n   * @param color 設定するスクリーン色(CubismTextureColor)\r\n   */\r\n  public setScreenColorByTextureColor(\r\n    index: number,\r\n    color: CubismTextureColor\r\n  ) {\r\n    this.setScreenColorByRGBA(index, color.R, color.G, color.B, color.A);\r\n  }\r\n\r\n  /**\r\n   * スクリーン色をセットする\r\n   * @param index Drawablesのインデックス\r\n   * @param r 設定するスクリーン色のR値\r\n   * @param g 設定するスクリーン色のG値\r\n   * @param b 設定するスクリーン色のB値\r\n   * @param a 設定するスクリーン色のA値\r\n   */\r\n  public setScreenColorByRGBA(\r\n    index: number,\r\n    r: number,\r\n    g: number,\r\n    b: number,\r\n    a = 1.0\r\n  ) {\r\n    this._userScreenColors.at(index).Color.R = r;\r\n    this._userScreenColors.at(index).Color.G = g;\r\n    this._userScreenColors.at(index).Color.B = b;\r\n    this._userScreenColors.at(index).Color.A = a;\r\n  }\r\n\r\n  /**\r\n   * SDKから指定したモデルの乗算色を上書きするか\r\n   * @returns true -> SDKからの情報を優先する\r\n   *          false -> モデルに設定されている色情報を使用\r\n   */\r\n  public getOverwriteFlagForModelMultiplyColors(): boolean {\r\n    return this._isOverwrittenModelMultiplyColors;\r\n  }\r\n\r\n  /**\r\n   * SDKから指定したモデルのスクリーン色を上書きするか\r\n   * @returns true -> SDKからの情報を優先する\r\n   *          false -> モデルに設定されている色情報を使用\r\n   */\r\n  public getOverwriteFlagForModelScreenColors(): boolean {\r\n    return this._isOverwrittenModelScreenColors;\r\n  }\r\n\r\n  /**\r\n   * SDKから指定したモデルの乗算色を上書きするかセットする\r\n   * @param value true -> SDKからの情報を優先する\r\n   *              false -> モデルに設定されている色情報を使用\r\n   */\r\n  public setOverwriteFlagForModelMultiplyColors(value: boolean) {\r\n    this._isOverwrittenModelMultiplyColors = value;\r\n  }\r\n\r\n  /**\r\n   * SDKから指定したモデルのスクリーン色を上書きするかセットする\r\n   * @param value true -> SDKからの情報を優先する\r\n   *              false -> モデルに設定されている色情報を使用\r\n   */\r\n  public setOverwriteFlagForModelScreenColors(value: boolean) {\r\n    this._isOverwrittenModelScreenColors = value;\r\n  }\r\n\r\n  /**\r\n   * SDKから指定したDrawableIndexの乗算色を上書きするか\r\n   * @returns true -> SDKからの情報を優先する\r\n   *          false -> モデルに設定されている色情報を使用\r\n   */\r\n  public getOverwriteFlagForDrawableMultiplyColors(\r\n    drawableindex: number\r\n  ): boolean {\r\n    return this._userMultiplyColors.at(drawableindex).isOverwritten;\r\n  }\r\n\r\n  /**\r\n   * SDKから指定したDrawableIndexのスクリーン色を上書きするか\r\n   * @returns true -> SDKからの情報を優先する\r\n   *          false -> モデルに設定されている色情報を使用\r\n   */\r\n  public getOverwriteFlagForDrawableScreenColors(\r\n    drawableindex: number\r\n  ): boolean {\r\n    return this._userMultiplyColors.at(drawableindex).isOverwritten;\r\n  }\r\n\r\n  /**\r\n   * SDKから指定したDrawableIndexの乗算色を上書きするかセットする\r\n   * @param value true -> SDKからの情報を優先する\r\n   *              false -> モデルに設定されている色情報を使用\r\n   */\r\n  public setOverwriteFlagForDrawableMultiplyColors(\r\n    drawableindex: number,\r\n    value: boolean\r\n  ) {\r\n    this._userMultiplyColors.at(drawableindex).isOverwritten = value;\r\n  }\r\n\r\n  /**\r\n   * SDKから指定したDrawableIndexのスクリーン色を上書きするかセットする\r\n   * @param value true -> SDKからの情報を優先する\r\n   *              false -> モデルに設定されている色情報を使用\r\n   */\r\n  public setOverwriteFlagForDrawableScreenColors(\r\n    drawableindex: number,\r\n    value: boolean\r\n  ) {\r\n    this._userScreenColors.at(drawableindex).isOverwritten = value;\r\n  }\r\n\r\n  /**\r\n   * Drawableのカリング情報を取得する。\r\n   *\r\n   * @param   drawableIndex   Drawableのインデックス\r\n   * @return  Drawableのカリング情報\r\n   */\r\n  public getDrawableCulling(drawableIndex: number): boolean {\r\n    if (\r\n      this.getOverwriteFlagForModelCullings() ||\r\n      this.getOverwriteFlagForDrawableCullings(drawableIndex)\r\n    ) {\r\n      return this._userCullings.at(drawableIndex).isCulling;\r\n    }\r\n\r\n    const constantFlags = this._model.drawables.constantFlags;\r\n    return !Live2DCubismCore.Utils.hasIsDoubleSidedBit(\r\n      constantFlags[drawableIndex]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Drawableのカリング情報を設定する。\r\n   *\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @param isCulling カリング情報\r\n   */\r\n  public setDrawableCulling(drawableIndex: number, isCulling: boolean): void {\r\n    this._userCullings.at(drawableIndex).isCulling = isCulling;\r\n  }\r\n\r\n  /**\r\n   * SDKからモデル全体のカリング設定を上書きするか。\r\n   *\r\n   * @retval  true    ->  SDK上のカリング設定を使用\r\n   * @retval  false   ->  モデルのカリング設定を使用\r\n   */\r\n  public getOverwriteFlagForModelCullings(): boolean {\r\n    return this._isOverwrittenCullings;\r\n  }\r\n\r\n  /**\r\n   * SDKからモデル全体のカリング設定を上書きするかを設定する。\r\n   *\r\n   * @param isOverwrittenCullings SDK上のカリング設定を使うならtrue、モデルのカリング設定を使うならfalse\r\n   */\r\n  public setOverwriteFlagForModelCullings(\r\n    isOverwrittenCullings: boolean\r\n  ): void {\r\n    this._isOverwrittenCullings = isOverwrittenCullings;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @retval  true    ->  SDK上のカリング設定を使用\r\n   * @retval  false   ->  モデルのカリング設定を使用\r\n   */\r\n  public getOverwriteFlagForDrawableCullings(drawableIndex: number): boolean {\r\n    return this._userCullings.at(drawableIndex).isOverwritten;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @param isOverwrittenCullings SDK上のカリング設定を使うならtrue、モデルのカリング設定を使うならfalse\r\n   */\r\n  public setOverwriteFlagForDrawableCullings(\r\n    drawableIndex: number,\r\n    isOverwrittenCullings: boolean\r\n  ): void {\r\n    this._userCullings.at(drawableIndex).isOverwritten = isOverwrittenCullings;\r\n  }\r\n\r\n  /**\r\n   * モデルを取得\r\n   */\r\n  public getModel(): Live2DCubismCore.Model {\r\n    return this._model;\r\n  }\r\n\r\n  /**\r\n   * パーツのインデックスを取得\r\n   * @param partId パーツのID\r\n   * @return パーツのインデックス\r\n   */\r\n  public getPartIndex(partId: CubismIdHandle): number {\r\n    let partIndex: number;\r\n    const partCount: number = this._model.parts.count;\r\n\r\n    for (partIndex = 0; partIndex < partCount; ++partIndex) {\r\n      if (partId == this._partIds.at(partIndex)) {\r\n        return partIndex;\r\n      }\r\n    }\r\n\r\n    // モデルに存在していない場合、非存在パーツIDリスト内にあるかを検索し、そのインデックスを返す\r\n    if (this._notExistPartId.isExist(partId)) {\r\n      return this._notExistPartId.getValue(partId);\r\n    }\r\n\r\n    // 非存在パーツIDリストにない場合、新しく要素を追加する\r\n    partIndex = partCount + this._notExistPartId.getSize();\r\n    this._notExistPartId.setValue(partId, partIndex);\r\n    this._notExistPartOpacities.appendKey(partIndex);\r\n\r\n    return partIndex;\r\n  }\r\n\r\n  /**\r\n   * パーツの個数の取得\r\n   * @return パーツの個数\r\n   */\r\n  public getPartCount(): number {\r\n    const partCount: number = this._model.parts.count;\r\n    return partCount;\r\n  }\r\n\r\n  /**\r\n   * パーツの不透明度の設定(Index)\r\n   * @param partIndex パーツのインデックス\r\n   * @param opacity 不透明度\r\n   */\r\n  public setPartOpacityByIndex(partIndex: number, opacity: number): void {\r\n    if (this._notExistPartOpacities.isExist(partIndex)) {\r\n      this._notExistPartOpacities.setValue(partIndex, opacity);\r\n      return;\r\n    }\r\n\r\n    // インデックスの範囲内検知\r\n    CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());\r\n\r\n    this._partOpacities[partIndex] = opacity;\r\n  }\r\n\r\n  /**\r\n   * パーツの不透明度の設定(Id)\r\n   * @param partId パーツのID\r\n   * @param opacity パーツの不透明度\r\n   */\r\n  public setPartOpacityById(partId: CubismIdHandle, opacity: number): void {\r\n    // 高速化のためにPartIndexを取得できる機構になっているが、外部からの設定の時は呼び出し頻度が低いため不要\r\n    const index: number = this.getPartIndex(partId);\r\n\r\n    if (index < 0) {\r\n      return; // パーツがないのでスキップ\r\n    }\r\n\r\n    this.setPartOpacityByIndex(index, opacity);\r\n  }\r\n\r\n  /**\r\n   * パーツの不透明度の取得(index)\r\n   * @param partIndex パーツのインデックス\r\n   * @return パーツの不透明度\r\n   */\r\n  public getPartOpacityByIndex(partIndex: number): number {\r\n    if (this._notExistPartOpacities.isExist(partIndex)) {\r\n      // モデルに存在しないパーツIDの場合、非存在パーツリストから不透明度を返す。\r\n      return this._notExistPartOpacities.getValue(partIndex);\r\n    }\r\n\r\n    // インデックスの範囲内検知\r\n    CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());\r\n\r\n    return this._partOpacities[partIndex];\r\n  }\r\n\r\n  /**\r\n   * パーツの不透明度の取得(id)\r\n   * @param partId パーツのＩｄ\r\n   * @return パーツの不透明度\r\n   */\r\n  public getPartOpacityById(partId: CubismIdHandle): number {\r\n    // 高速化のためにPartIndexを取得できる機構になっているが、外部からの設定の時は呼び出し頻度が低いため不要\r\n    const index: number = this.getPartIndex(partId);\r\n\r\n    if (index < 0) {\r\n      return 0; // パーツが無いのでスキップ\r\n    }\r\n\r\n    return this.getPartOpacityByIndex(index);\r\n  }\r\n\r\n  /**\r\n   * パラメータのインデックスの取得\r\n   * @param パラメータID\r\n   * @return パラメータのインデックス\r\n   */\r\n  public getParameterIndex(parameterId: CubismIdHandle): number {\r\n    let parameterIndex: number;\r\n    const idCount: number = this._model.parameters.count;\r\n\r\n    for (parameterIndex = 0; parameterIndex < idCount; ++parameterIndex) {\r\n      if (parameterId != this._parameterIds.at(parameterIndex)) {\r\n        continue;\r\n      }\r\n\r\n      return parameterIndex;\r\n    }\r\n\r\n    // モデルに存在していない場合、非存在パラメータIDリスト内を検索し、そのインデックスを返す\r\n    if (this._notExistParameterId.isExist(parameterId)) {\r\n      return this._notExistParameterId.getValue(parameterId);\r\n    }\r\n\r\n    // 非存在パラメータIDリストにない場合新しく要素を追加する\r\n    parameterIndex =\r\n      this._model.parameters.count + this._notExistParameterId.getSize();\r\n\r\n    this._notExistParameterId.setValue(parameterId, parameterIndex);\r\n    this._notExistParameterValues.appendKey(parameterIndex);\r\n\r\n    return parameterIndex;\r\n  }\r\n\r\n  /**\r\n   * パラメータの個数の取得\r\n   * @return パラメータの個数\r\n   */\r\n  public getParameterCount(): number {\r\n    return this._model.parameters.count;\r\n  }\r\n\r\n  /**\r\n   * パラメータの種類の取得\r\n   * @param parameterIndex パラメータのインデックス\r\n   * @return csmParameterType_Normal -> 通常のパラメータ\r\n   *          csmParameterType_BlendShape -> ブレンドシェイプパラメータ\r\n   */\r\n  public getParameterType(\r\n    parameterIndex: number\r\n  ): Live2DCubismCore.csmParameterType {\r\n    return this._model.parameters.types[parameterIndex];\r\n  }\r\n\r\n  /**\r\n   * パラメータの最大値の取得\r\n   * @param parameterIndex パラメータのインデックス\r\n   * @return パラメータの最大値\r\n   */\r\n  public getParameterMaximumValue(parameterIndex: number): number {\r\n    return this._model.parameters.maximumValues[parameterIndex];\r\n  }\r\n\r\n  /**\r\n   * パラメータの最小値の取得\r\n   * @param parameterIndex パラメータのインデックス\r\n   * @return パラメータの最小値\r\n   */\r\n  public getParameterMinimumValue(parameterIndex: number): number {\r\n    return this._model.parameters.minimumValues[parameterIndex];\r\n  }\r\n\r\n  /**\r\n   * パラメータのデフォルト値の取得\r\n   * @param parameterIndex パラメータのインデックス\r\n   * @return パラメータのデフォルト値\r\n   */\r\n  public getParameterDefaultValue(parameterIndex: number): number {\r\n    return this._model.parameters.defaultValues[parameterIndex];\r\n  }\r\n\r\n  /**\r\n   * パラメータの値の取得\r\n   * @param parameterIndex    パラメータのインデックス\r\n   * @return パラメータの値\r\n   */\r\n  public getParameterValueByIndex(parameterIndex: number): number {\r\n    if (this._notExistParameterValues.isExist(parameterIndex)) {\r\n      return this._notExistParameterValues.getValue(parameterIndex);\r\n    }\r\n\r\n    // インデックスの範囲内検知\r\n    CSM_ASSERT(\r\n      0 <= parameterIndex && parameterIndex < this.getParameterCount()\r\n    );\r\n\r\n    return this._parameterValues[parameterIndex];\r\n  }\r\n\r\n  /**\r\n   * パラメータの値の取得\r\n   * @param parameterId    パラメータのID\r\n   * @return パラメータの値\r\n   */\r\n  public getParameterValueById(parameterId: CubismIdHandle): number {\r\n    // 高速化のためにparameterIndexを取得できる機構になっているが、外部からの設定の時は呼び出し頻度が低いため不要\r\n    const parameterIndex: number = this.getParameterIndex(parameterId);\r\n    return this.getParameterValueByIndex(parameterIndex);\r\n  }\r\n\r\n  /**\r\n   * パラメータの値の設定\r\n   * @param parameterIndex パラメータのインデックス\r\n   * @param value パラメータの値\r\n   * @param weight 重み\r\n   */\r\n  public setParameterValueByIndex(\r\n    parameterIndex: number,\r\n    value: number,\r\n    weight = 1.0\r\n  ): void {\r\n    if (this._notExistParameterValues.isExist(parameterIndex)) {\r\n      this._notExistParameterValues.setValue(\r\n        parameterIndex,\r\n        weight == 1\r\n          ? value\r\n          : this._notExistParameterValues.getValue(parameterIndex) *\r\n              (1 - weight) +\r\n              value * weight\r\n      );\r\n\r\n      return;\r\n    }\r\n\r\n    // インデックスの範囲内検知\r\n    CSM_ASSERT(\r\n      0 <= parameterIndex && parameterIndex < this.getParameterCount()\r\n    );\r\n\r\n    if (this._model.parameters.maximumValues[parameterIndex] < value) {\r\n      value = this._model.parameters.maximumValues[parameterIndex];\r\n    }\r\n    if (this._model.parameters.minimumValues[parameterIndex] > value) {\r\n      value = this._model.parameters.minimumValues[parameterIndex];\r\n    }\r\n\r\n    this._parameterValues[parameterIndex] =\r\n      weight == 1\r\n        ? value\r\n        : (this._parameterValues[parameterIndex] =\r\n            this._parameterValues[parameterIndex] * (1 - weight) +\r\n            value * weight);\r\n  }\r\n\r\n  /**\r\n   * パラメータの値の設定\r\n   * @param parameterId パラメータのID\r\n   * @param value パラメータの値\r\n   * @param weight 重み\r\n   */\r\n  public setParameterValueById(\r\n    parameterId: CubismIdHandle,\r\n    value: number,\r\n    weight = 1.0\r\n  ): void {\r\n    const index: number = this.getParameterIndex(parameterId);\r\n    this.setParameterValueByIndex(index, value, weight);\r\n  }\r\n\r\n  /**\r\n   * パラメータの値の加算(index)\r\n   * @param parameterIndex パラメータインデックス\r\n   * @param value 加算する値\r\n   * @param weight 重み\r\n   */\r\n  public addParameterValueByIndex(\r\n    parameterIndex: number,\r\n    value: number,\r\n    weight = 1.0\r\n  ): void {\r\n    this.setParameterValueByIndex(\r\n      parameterIndex,\r\n      this.getParameterValueByIndex(parameterIndex) + value * weight\r\n    );\r\n  }\r\n\r\n  /**\r\n   * パラメータの値の加算(id)\r\n   * @param parameterId パラメータＩＤ\r\n   * @param value 加算する値\r\n   * @param weight 重み\r\n   */\r\n  public addParameterValueById(\r\n    parameterId: any,\r\n    value: number,\r\n    weight = 1.0\r\n  ): void {\r\n    const index: number = this.getParameterIndex(parameterId);\r\n    this.addParameterValueByIndex(index, value, weight);\r\n  }\r\n\r\n  /**\r\n   * パラメータの値の乗算\r\n   * @param parameterId パラメータのID\r\n   * @param value 乗算する値\r\n   * @param weight 重み\r\n   */\r\n  public multiplyParameterValueById(\r\n    parameterId: CubismIdHandle,\r\n    value: number,\r\n    weight = 1.0\r\n  ): void {\r\n    const index: number = this.getParameterIndex(parameterId);\r\n    this.multiplyParameterValueByIndex(index, value, weight);\r\n  }\r\n\r\n  /**\r\n   * パラメータの値の乗算\r\n   * @param parameterIndex パラメータのインデックス\r\n   * @param value 乗算する値\r\n   * @param weight 重み\r\n   */\r\n  public multiplyParameterValueByIndex(\r\n    parameterIndex: number,\r\n    value: number,\r\n    weight = 1.0\r\n  ): void {\r\n    this.setParameterValueByIndex(\r\n      parameterIndex,\r\n      this.getParameterValueByIndex(parameterIndex) *\r\n        (1.0 + (value - 1.0) * weight)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Drawableのインデックスの取得\r\n   * @param drawableId DrawableのID\r\n   * @return Drawableのインデックス\r\n   */\r\n  public getDrawableIndex(drawableId: CubismIdHandle): number {\r\n    const drawableCount = this._model.drawables.count;\r\n\r\n    for (\r\n      let drawableIndex = 0;\r\n      drawableIndex < drawableCount;\r\n      ++drawableIndex\r\n    ) {\r\n      if (this._drawableIds.at(drawableIndex) == drawableId) {\r\n        return drawableIndex;\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Drawableの個数の取得\r\n   * @return drawableの個数\r\n   */\r\n  public getDrawableCount(): number {\r\n    const drawableCount = this._model.drawables.count;\r\n    return drawableCount;\r\n  }\r\n\r\n  /**\r\n   * DrawableのIDを取得する\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return drawableのID\r\n   */\r\n  public getDrawableId(drawableIndex: number): CubismIdHandle {\r\n    const parameterIds: string[] = this._model.drawables.ids;\r\n    return CubismFramework.getIdManager().getId(parameterIds[drawableIndex]);\r\n  }\r\n\r\n  /**\r\n   * Drawableの描画順リストの取得\r\n   * @return Drawableの描画順リスト\r\n   */\r\n  public getDrawableRenderOrders(): Int32Array {\r\n    const renderOrders: Int32Array = this._model.drawables.renderOrders;\r\n    return renderOrders;\r\n  }\r\n\r\n  /**\r\n   * @deprecated\r\n   * 関数名が誤っていたため、代替となる getDrawableTextureIndex を追加し、この関数は非推奨となりました。\r\n   *\r\n   * Drawableのテクスチャインデックスリストの取得\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return drawableのテクスチャインデックスリスト\r\n   */\r\n  public getDrawableTextureIndices(drawableIndex: number): number {\r\n    return this.getDrawableTextureIndex(drawableIndex);\r\n  }\r\n\r\n  /**\r\n   * Drawableのテクスチャインデックスの取得\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return drawableのテクスチャインデックス\r\n   */\r\n  public getDrawableTextureIndex(drawableIndex: number): number {\r\n    const textureIndices: Int32Array = this._model.drawables.textureIndices;\r\n    return textureIndices[drawableIndex];\r\n  }\r\n\r\n  /**\r\n   * DrawableのVertexPositionsの変化情報の取得\r\n   *\r\n   * 直近のCubismModel.update関数でDrawableの頂点情報が変化したかを取得する。\r\n   *\r\n   * @param   drawableIndex   Drawableのインデックス\r\n   * @retval  true    Drawableの頂点情報が直近のCubismModel.update関数で変化した\r\n   * @retval  false   Drawableの頂点情報が直近のCubismModel.update関数で変化していない\r\n   */\r\n  public getDrawableDynamicFlagVertexPositionsDidChange(\r\n    drawableIndex: number\r\n  ): boolean {\r\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\r\n    return Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(\r\n      dynamicFlags[drawableIndex]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Drawableの頂点インデックスの個数の取得\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return drawableの頂点インデックスの個数\r\n   */\r\n  public getDrawableVertexIndexCount(drawableIndex: number): number {\r\n    const indexCounts: Int32Array = this._model.drawables.indexCounts;\r\n    return indexCounts[drawableIndex];\r\n  }\r\n\r\n  /**\r\n   * Drawableの頂点の個数の取得\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return drawableの頂点の個数\r\n   */\r\n  public getDrawableVertexCount(drawableIndex: number): number {\r\n    const vertexCounts = this._model.drawables.vertexCounts;\r\n    return vertexCounts[drawableIndex];\r\n  }\r\n\r\n  /**\r\n   * Drawableの頂点リストの取得\r\n   * @param drawableIndex drawableのインデックス\r\n   * @return drawableの頂点リスト\r\n   */\r\n  public getDrawableVertices(drawableIndex: number): Float32Array {\r\n    return this.getDrawableVertexPositions(drawableIndex);\r\n  }\r\n\r\n  /**\r\n   * Drawableの頂点インデックスリストの取得\r\n   * @param drarableIndex Drawableのインデックス\r\n   * @return drawableの頂点インデックスリスト\r\n   */\r\n  public getDrawableVertexIndices(drawableIndex: number): Uint16Array {\r\n    const indicesArray: Uint16Array[] = this._model.drawables.indices;\r\n    return indicesArray[drawableIndex];\r\n  }\r\n\r\n  /**\r\n   * Drawableの頂点リストの取得\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return drawableの頂点リスト\r\n   */\r\n  public getDrawableVertexPositions(drawableIndex: number): Float32Array {\r\n    const verticesArray: Float32Array[] = this._model.drawables.vertexPositions;\r\n    return verticesArray[drawableIndex];\r\n  }\r\n\r\n  /**\r\n   * Drawableの頂点のUVリストの取得\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return drawableの頂点UVリスト\r\n   */\r\n  public getDrawableVertexUvs(drawableIndex: number): Float32Array {\r\n    const uvsArray: Float32Array[] = this._model.drawables.vertexUvs;\r\n    return uvsArray[drawableIndex];\r\n  }\r\n\r\n  /**\r\n   * Drawableの不透明度の取得\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return drawableの不透明度\r\n   */\r\n  public getDrawableOpacity(drawableIndex: number): number {\r\n    const opacities: Float32Array = this._model.drawables.opacities;\r\n    return opacities[drawableIndex];\r\n  }\r\n\r\n  /**\r\n   * Drawableの乗算色の取得\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return drawableの乗算色(RGBA)\r\n   * スクリーン色はRGBAで取得されるが、Aは必ず0\r\n   */\r\n  public getDrawableMultiplyColor(drawableIndex: number): CubismTextureColor {\r\n    const multiplyColors: Float32Array = this._model.drawables.multiplyColors;\r\n    const index = drawableIndex * 4;\r\n    const multiplyColor: CubismTextureColor = new CubismTextureColor();\r\n    multiplyColor.R = multiplyColors[index];\r\n    multiplyColor.G = multiplyColors[index + 1];\r\n    multiplyColor.B = multiplyColors[index + 2];\r\n    multiplyColor.A = multiplyColors[index + 3];\r\n    return multiplyColor;\r\n  }\r\n\r\n  /**\r\n   * Drawableのスクリーン色の取得\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return drawableのスクリーン色(RGBA)\r\n   * スクリーン色はRGBAで取得されるが、Aは必ず0\r\n   */\r\n  public getDrawableScreenColor(drawableIndex: number): CubismTextureColor {\r\n    const screenColors: Float32Array = this._model.drawables.screenColors;\r\n    const index = drawableIndex * 4;\r\n    const screenColor: CubismTextureColor = new CubismTextureColor();\r\n    screenColor.R = screenColors[index];\r\n    screenColor.G = screenColors[index + 1];\r\n    screenColor.B = screenColors[index + 2];\r\n    screenColor.A = screenColors[index + 3];\r\n    return screenColor;\r\n  }\r\n\r\n  /**\r\n   * Drawableの親パーツのインデックスの取得\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return drawableの親パーツのインデックス\r\n   */\r\n  public getDrawableParentPartIndex(drawableIndex: number): number {\r\n    return this._model.drawables.parentPartIndices[drawableIndex];\r\n  }\r\n\r\n  /**\r\n   * Drawableのブレンドモードを取得\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return drawableのブレンドモード\r\n   */\r\n  public getDrawableBlendMode(drawableIndex: number): CubismBlendMode {\r\n    const constantFlags = this._model.drawables.constantFlags;\r\n\r\n    return Live2DCubismCore.Utils.hasBlendAdditiveBit(\r\n      constantFlags[drawableIndex]\r\n    )\r\n      ? CubismBlendMode.CubismBlendMode_Additive\r\n      : Live2DCubismCore.Utils.hasBlendMultiplicativeBit(\r\n          constantFlags[drawableIndex]\r\n        )\r\n      ? CubismBlendMode.CubismBlendMode_Multiplicative\r\n      : CubismBlendMode.CubismBlendMode_Normal;\r\n  }\r\n\r\n  /**\r\n   * Drawableのマスクの反転使用の取得\r\n   *\r\n   * Drawableのマスク使用時の反転設定を取得する。\r\n   * マスクを使用しない場合は無視される。\r\n   *\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return Drawableの反転設定\r\n   */\r\n  public getDrawableInvertedMaskBit(drawableIndex: number): boolean {\r\n    const constantFlags: Uint8Array = this._model.drawables.constantFlags;\r\n\r\n    return Live2DCubismCore.Utils.hasIsInvertedMaskBit(\r\n      constantFlags[drawableIndex]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Drawableのクリッピングマスクリストの取得\r\n   * @return Drawableのクリッピングマスクリスト\r\n   */\r\n  public getDrawableMasks(): Int32Array[] {\r\n    const masks: Int32Array[] = this._model.drawables.masks;\r\n    return masks;\r\n  }\r\n\r\n  /**\r\n   * Drawableのクリッピングマスクの個数リストの取得\r\n   * @return Drawableのクリッピングマスクの個数リスト\r\n   */\r\n  public getDrawableMaskCounts(): Int32Array {\r\n    const maskCounts: Int32Array = this._model.drawables.maskCounts;\r\n    return maskCounts;\r\n  }\r\n\r\n  /**\r\n   * クリッピングマスクの使用状態\r\n   *\r\n   * @return true クリッピングマスクを使用している\r\n   * @return false クリッピングマスクを使用していない\r\n   */\r\n  public isUsingMasking(): boolean {\r\n    for (let d = 0; d < this._model.drawables.count; ++d) {\r\n      if (this._model.drawables.maskCounts[d] <= 0) {\r\n        continue;\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Drawableの表示情報を取得する\r\n   *\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return true Drawableが表示\r\n   * @return false Drawableが非表示\r\n   */\r\n  public getDrawableDynamicFlagIsVisible(drawableIndex: number): boolean {\r\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\r\n    return Live2DCubismCore.Utils.hasIsVisibleBit(dynamicFlags[drawableIndex]);\r\n  }\r\n\r\n  /**\r\n   * DrawableのDrawOrderの変化情報の取得\r\n   *\r\n   * 直近のCubismModel.update関数でdrawableのdrawOrderが変化したかを取得する。\r\n   * drawOrderはartMesh上で指定する0から1000の情報\r\n   * @param drawableIndex drawableのインデックス\r\n   * @return true drawableの不透明度が直近のCubismModel.update関数で変化した\r\n   * @return false drawableの不透明度が直近のCubismModel.update関数で変化している\r\n   */\r\n  public getDrawableDynamicFlagVisibilityDidChange(\r\n    drawableIndex: number\r\n  ): boolean {\r\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\r\n    return Live2DCubismCore.Utils.hasVisibilityDidChangeBit(\r\n      dynamicFlags[drawableIndex]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Drawableの不透明度の変化情報の取得\r\n   *\r\n   * 直近のCubismModel.update関数でdrawableの不透明度が変化したかを取得する。\r\n   *\r\n   * @param drawableIndex drawableのインデックス\r\n   * @return true Drawableの不透明度が直近のCubismModel.update関数で変化した\r\n   * @return false Drawableの不透明度が直近のCubismModel.update関数で変化してない\r\n   */\r\n  public getDrawableDynamicFlagOpacityDidChange(\r\n    drawableIndex: number\r\n  ): boolean {\r\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\r\n    return Live2DCubismCore.Utils.hasOpacityDidChangeBit(\r\n      dynamicFlags[drawableIndex]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Drawableの描画順序の変化情報の取得\r\n   *\r\n   * 直近のCubismModel.update関数でDrawableの描画の順序が変化したかを取得する。\r\n   *\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return true Drawableの描画の順序が直近のCubismModel.update関数で変化した\r\n   * @return false Drawableの描画の順序が直近のCubismModel.update関数で変化してない\r\n   */\r\n  public getDrawableDynamicFlagRenderOrderDidChange(\r\n    drawableIndex: number\r\n  ): boolean {\r\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\r\n    return Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(\r\n      dynamicFlags[drawableIndex]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Drawableの乗算色・スクリーン色の変化情報の取得\r\n   *\r\n   * 直近のCubismModel.update関数でDrawableの乗算色・スクリーン色が変化したかを取得する。\r\n   *\r\n   * @param drawableIndex Drawableのインデックス\r\n   * @return true Drawableの乗算色・スクリーン色が直近のCubismModel.update関数で変化した\r\n   * @return false Drawableの乗算色・スクリーン色が直近のCubismModel.update関数で変化してない\r\n   */\r\n  public getDrawableDynamicFlagBlendColorDidChange(\r\n    drawableIndex: number\r\n  ): boolean {\r\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\r\n    return Live2DCubismCore.Utils.hasBlendColorDidChangeBit(\r\n      dynamicFlags[drawableIndex]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 保存されたパラメータの読み込み\r\n   */\r\n  public loadParameters(): void {\r\n    let parameterCount: number = this._model.parameters.count;\r\n    const savedParameterCount: number = this._savedParameters.getSize();\r\n\r\n    if (parameterCount > savedParameterCount) {\r\n      parameterCount = savedParameterCount;\r\n    }\r\n\r\n    for (let i = 0; i < parameterCount; ++i) {\r\n      this._parameterValues[i] = this._savedParameters.at(i);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 初期化する\r\n   */\r\n  public initialize(): void {\r\n    CSM_ASSERT(this._model);\r\n\r\n    this._parameterValues = this._model.parameters.values;\r\n    this._partOpacities = this._model.parts.opacities;\r\n    this._parameterMaximumValues = this._model.parameters.maximumValues;\r\n    this._parameterMinimumValues = this._model.parameters.minimumValues;\r\n\r\n    {\r\n      const parameterIds: string[] = this._model.parameters.ids;\r\n      const parameterCount: number = this._model.parameters.count;\r\n\r\n      this._parameterIds.prepareCapacity(parameterCount);\r\n      for (let i = 0; i < parameterCount; ++i) {\r\n        this._parameterIds.pushBack(\r\n          CubismFramework.getIdManager().getId(parameterIds[i])\r\n        );\r\n      }\r\n    }\r\n\r\n    {\r\n      const partIds: string[] = this._model.parts.ids;\r\n      const partCount: number = this._model.parts.count;\r\n\r\n      this._partIds.prepareCapacity(partCount);\r\n      for (let i = 0; i < partCount; ++i) {\r\n        this._partIds.pushBack(\r\n          CubismFramework.getIdManager().getId(partIds[i])\r\n        );\r\n      }\r\n    }\r\n\r\n    {\r\n      const drawableIds: string[] = this._model.drawables.ids;\r\n      const drawableCount: number = this._model.drawables.count;\r\n\r\n      this._userMultiplyColors = new csmVector<DrawableColorData>();\r\n      this._userMultiplyColors.updateSize(\r\n        drawableCount,\r\n        DrawableColorData,\r\n        true\r\n      );\r\n\r\n      this._userScreenColors = new csmVector<DrawableColorData>();\r\n      this._userScreenColors.updateSize(drawableCount, DrawableColorData, true);\r\n\r\n      // カリング設定\r\n      this._userCullings = new csmVector<DrawableCullingData>();\r\n      this._userCullings.updateSize(drawableCount, DrawableCullingData, true);\r\n      const userCulling: DrawableCullingData = new DrawableCullingData(\r\n        false,\r\n        false\r\n      );\r\n\r\n      this._drawableIds.prepareCapacity(drawableCount);\r\n      for (let i = 0; i < drawableCount; ++i) {\r\n        this._drawableIds.pushBack(\r\n          CubismFramework.getIdManager().getId(drawableIds[i])\r\n        );\r\n\r\n        // shaderに影響しない色で初期化\r\n        this.setMultiplyColorByRGBA(i, 1.0, 1.0, 1.0, 1.0);\r\n        this.setScreenColorByRGBA(i, 0.0, 0.0, 0.0, 1.0);\r\n\r\n        this._userCullings.pushBack(userCulling);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   * @param model モデル\r\n   */\r\n  public constructor(model: Live2DCubismCore.Model) {\r\n    this._model = model;\r\n    this._parameterValues = null;\r\n    this._parameterMaximumValues = null;\r\n    this._parameterMinimumValues = null;\r\n    this._partOpacities = null;\r\n    this._savedParameters = new csmVector<number>();\r\n    this._parameterIds = new csmVector<CubismIdHandle>();\r\n    this._drawableIds = new csmVector<CubismIdHandle>();\r\n    this._partIds = new csmVector<CubismIdHandle>();\r\n    this._isOverwrittenModelMultiplyColors = false;\r\n    this._isOverwrittenModelScreenColors = false;\r\n    this._isOverwrittenCullings = false;\r\n    this._userMultiplyColors = null;\r\n    this._userScreenColors = null;\r\n\r\n    this._notExistPartId = new csmMap<CubismIdHandle, number>();\r\n    this._notExistParameterId = new csmMap<CubismIdHandle, number>();\r\n    this._notExistParameterValues = new csmMap<number, number>();\r\n    this._notExistPartOpacities = new csmMap<number, number>();\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    this._model.release();\r\n    this._model = null;\r\n  }\r\n\r\n  private _notExistPartOpacities: csmMap<number, number>; // 存在していないパーツの不透明度のリスト\r\n  private _notExistPartId: csmMap<CubismIdHandle, number>; // 存在していないパーツIDのリスト\r\n\r\n  private _notExistParameterValues: csmMap<number, number>; // 存在していないパラメータの値のリスト\r\n  private _notExistParameterId: csmMap<CubismIdHandle, number>; // 存在していないパラメータIDのリスト\r\n\r\n  private _savedParameters: csmVector<number>; // 保存されたパラメータ\r\n\r\n  private _isOverwrittenModelMultiplyColors: boolean; // SDK上でモデル全体の乗算色を上書きするか判定するフラグ\r\n  private _isOverwrittenModelScreenColors: boolean; // SDK上でモデル全体のスクリーン色を上書きするか判定するフラグ\r\n  private _userMultiplyColors: csmVector<DrawableColorData>; // Drawableごとに設定する乗算色と上書きフラグを管理するリスト\r\n  private _userScreenColors: csmVector<DrawableColorData>; // Drawableごとに設定するスクリーン色と上書きフラグを管理するリスト\r\n\r\n  private _model: Live2DCubismCore.Model; // モデル\r\n\r\n  private _parameterValues: Float32Array; // パラメータの値のリスト\r\n  private _parameterMaximumValues: Float32Array; // パラメータの最大値のリスト\r\n  private _parameterMinimumValues: Float32Array; // パラメータの最小値のリスト\r\n\r\n  private _partOpacities: Float32Array; // パーツの不透明度のリスト\r\n\r\n  private _parameterIds: csmVector<CubismIdHandle>;\r\n  private _partIds: csmVector<CubismIdHandle>;\r\n  private _drawableIds: csmVector<CubismIdHandle>;\r\n\r\n  private _isOverwrittenCullings: boolean; // モデルのカリング設定をすべて上書きするか？\r\n  private _userCullings: csmVector<DrawableCullingData>; // カリング設定の配列\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismmodel';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismModel = $.CubismModel;\r\n  export type CubismModel = $.CubismModel;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CSM_ASSERT } from '../utils/cubismdebug';\r\nimport { CubismModel } from './cubismmodel';\r\n\r\n/**\r\n * Mocデータの管理\r\n *\r\n * Mocデータの管理を行うクラス。\r\n */\r\nexport class CubismMoc {\r\n  /**\r\n   * Mocデータの作成\r\n   */\r\n  public static create(mocBytes: ArrayBuffer): CubismMoc {\r\n    let cubismMoc: CubismMoc = null;\r\n    const moc: Live2DCubismCore.Moc =\r\n      Live2DCubismCore.Moc.fromArrayBuffer(mocBytes);\r\n\r\n    if (moc) {\r\n      cubismMoc = new CubismMoc(moc);\r\n      cubismMoc._mocVersion = Live2DCubismCore.Version.csmGetMocVersion(\r\n        moc,\r\n        mocBytes\r\n      );\r\n    }\r\n\r\n    return cubismMoc;\r\n  }\r\n\r\n  /**\r\n   * Mocデータを削除\r\n   *\r\n   * Mocデータを削除する\r\n   */\r\n  public static delete(moc: CubismMoc): void {\r\n    moc._moc._release();\r\n    moc._moc = null;\r\n    moc = null;\r\n  }\r\n\r\n  /**\r\n   * モデルを作成する\r\n   *\r\n   * @return Mocデータから作成されたモデル\r\n   */\r\n  createModel(): CubismModel {\r\n    let cubismModel: CubismModel = null;\r\n\r\n    const model: Live2DCubismCore.Model = Live2DCubismCore.Model.fromMoc(\r\n      this._moc\r\n    );\r\n\r\n    if (model) {\r\n      cubismModel = new CubismModel(model);\r\n      cubismModel.initialize();\r\n\r\n      ++this._modelCount;\r\n    }\r\n\r\n    return cubismModel;\r\n  }\r\n\r\n  /**\r\n   * モデルを削除する\r\n   */\r\n  deleteModel(model: CubismModel): void {\r\n    if (model != null) {\r\n      model.release();\r\n      model = null;\r\n      --this._modelCount;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  private constructor(moc: Live2DCubismCore.Moc) {\r\n    this._moc = moc;\r\n    this._modelCount = 0;\r\n    this._mocVersion = 0;\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    CSM_ASSERT(this._modelCount == 0);\r\n\r\n    this._moc._release();\r\n    this._moc = null;\r\n  }\r\n\r\n  /**\r\n   * 最新の.moc3 Versionを取得\r\n   */\r\n  public getLatestMocVersion(): number {\r\n    return Live2DCubismCore.Version.csmGetLatestMocVersion();\r\n  }\r\n\r\n  /**\r\n   * 読み込んだモデルの.moc3 Versionを取得\r\n   */\r\n  public getMocVersion(): number {\r\n    return this._mocVersion;\r\n  }\r\n\r\n  /**\r\n   * .moc3 の整合性を検証する\r\n   */\r\n  public static hasMocConsistency(mocBytes: ArrayBuffer): boolean {\r\n    const hasMocConsistency =\r\n      Live2DCubismCore.Moc.prototype.hasMocConsistency(mocBytes);\r\n    return hasMocConsistency === 1 ? true : false;\r\n  }\r\n\r\n  _moc: Live2DCubismCore.Moc; // Mocデータ\r\n  _modelCount: number; // Mocデータから作られたモデルの個数\r\n  _mocVersion: number; // 読み込んだモデルの.moc3 Version\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismmoc';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismMoc = $.CubismMoc;\r\n  export type CubismMoc = $.CubismMoc;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismIdHandle } from '../id/cubismid';\r\nimport { CubismFramework } from '../live2dcubismframework';\r\nimport { CubismJson } from '../utils/cubismjson';\r\n\r\nconst Meta = 'Meta';\r\nconst UserDataCount = 'UserDataCount';\r\nconst TotalUserDataSize = 'TotalUserDataSize';\r\nconst UserData = 'UserData';\r\nconst Target = 'Target';\r\nconst Id = 'Id';\r\nconst Value = 'Value';\r\n\r\nexport class CubismModelUserDataJson {\r\n  /**\r\n   * コンストラクタ\r\n   * @param buffer    userdata3.jsonが読み込まれているバッファ\r\n   * @param size      バッファのサイズ\r\n   */\r\n  public constructor(buffer: ArrayBuffer, size: number) {\r\n    this._json = CubismJson.create(buffer, size);\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   */\r\n  public release(): void {\r\n    CubismJson.delete(this._json);\r\n  }\r\n\r\n  /**\r\n   * ユーザーデータ個数の取得\r\n   * @return ユーザーデータの個数\r\n   */\r\n  public getUserDataCount(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(UserDataCount)\r\n      .toInt();\r\n  }\r\n\r\n  /**\r\n   * ユーザーデータ総文字列数の取得\r\n   *\r\n   * @return ユーザーデータ総文字列数\r\n   */\r\n  public getTotalUserDataSize(): number {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(Meta)\r\n      .getValueByString(TotalUserDataSize)\r\n      .toInt();\r\n  }\r\n\r\n  /**\r\n   * ユーザーデータのタイプの取得\r\n   *\r\n   * @return ユーザーデータのタイプ\r\n   */\r\n  public getUserDataTargetType(i: number): string {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(UserData)\r\n      .getValueByIndex(i)\r\n      .getValueByString(Target)\r\n      .getRawString();\r\n  }\r\n\r\n  /**\r\n   * ユーザーデータのターゲットIDの取得\r\n   *\r\n   * @param i インデックス\r\n   * @return ユーザーデータターゲットID\r\n   */\r\n  public getUserDataId(i: number): CubismIdHandle {\r\n    return CubismFramework.getIdManager().getId(\r\n      this._json\r\n        .getRoot()\r\n        .getValueByString(UserData)\r\n        .getValueByIndex(i)\r\n        .getValueByString(Id)\r\n        .getRawString()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * ユーザーデータの文字列の取得\r\n   *\r\n   * @param i インデックス\r\n   * @return ユーザーデータ\r\n   */\r\n  public getUserDataValue(i: number): string {\r\n    return this._json\r\n      .getRoot()\r\n      .getValueByString(UserData)\r\n      .getValueByIndex(i)\r\n      .getValueByString(Value)\r\n      .getRawString();\r\n  }\r\n\r\n  private _json: CubismJson;\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismmodeluserdatajson';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismModelUserDataJson = $.CubismModelUserDataJson;\r\n  export type CubismModelUserDataJson = $.CubismModelUserDataJson;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismIdHandle } from '../id/cubismid';\r\nimport { CubismFramework } from '../live2dcubismframework';\r\nimport { csmString } from '../type/csmstring';\r\nimport { csmVector } from '../type/csmvector';\r\nimport { CubismModelUserDataJson } from './cubismmodeluserdatajson';\r\n\r\nconst ArtMesh = 'ArtMesh';\r\n\r\n/**\r\n * ユーザーデータインターフェース\r\n *\r\n * Jsonから読み込んだユーザーデータを記録しておくための構造体\r\n */\r\nexport class CubismModelUserDataNode {\r\n  targetType: CubismIdHandle; // ユーザーデータターゲットタイプ\r\n  targetId: CubismIdHandle; // ユーザーデータターゲットのID\r\n  value: csmString; // ユーザーデータ\r\n}\r\n\r\n/**\r\n * ユーザデータの管理クラス\r\n *\r\n * ユーザデータをロード、管理、検索インターフェイス、解放までを行う。\r\n */\r\nexport class CubismModelUserData {\r\n  /**\r\n   * インスタンスの作成\r\n   *\r\n   * @param buffer    userdata3.jsonが読み込まれているバッファ\r\n   * @param size      バッファのサイズ\r\n   * @return 作成されたインスタンス\r\n   */\r\n  public static create(buffer: ArrayBuffer, size: number): CubismModelUserData {\r\n    const ret: CubismModelUserData = new CubismModelUserData();\r\n\r\n    ret.parseUserData(buffer, size);\r\n\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * インスタンスを破棄する\r\n   *\r\n   * @param modelUserData 破棄するインスタンス\r\n   */\r\n  public static delete(modelUserData: CubismModelUserData): void {\r\n    if (modelUserData != null) {\r\n      modelUserData.release();\r\n      modelUserData = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ArtMeshのユーザーデータのリストの取得\r\n   *\r\n   * @return ユーザーデータリスト\r\n   */\r\n  public getArtMeshUserDatas(): csmVector<CubismModelUserDataNode> {\r\n    return this._artMeshUserDataNode;\r\n  }\r\n\r\n  /**\r\n   * userdata3.jsonのパース\r\n   *\r\n   * @param buffer    userdata3.jsonが読み込まれているバッファ\r\n   * @param size      バッファのサイズ\r\n   */\r\n  public parseUserData(buffer: ArrayBuffer, size: number): void {\r\n    let json: CubismModelUserDataJson = new CubismModelUserDataJson(\r\n      buffer,\r\n      size\r\n    );\r\n\r\n    const typeOfArtMesh = CubismFramework.getIdManager().getId(ArtMesh);\r\n    const nodeCount: number = json.getUserDataCount();\r\n\r\n    for (let i = 0; i < nodeCount; i++) {\r\n      const addNode: CubismModelUserDataNode = new CubismModelUserDataNode();\r\n\r\n      addNode.targetId = json.getUserDataId(i);\r\n      addNode.targetType = CubismFramework.getIdManager().getId(\r\n        json.getUserDataTargetType(i)\r\n      );\r\n      addNode.value = new csmString(json.getUserDataValue(i));\r\n      this._userDataNodes.pushBack(addNode);\r\n\r\n      if (addNode.targetType == typeOfArtMesh) {\r\n        this._artMeshUserDataNode.pushBack(addNode);\r\n      }\r\n    }\r\n\r\n    json.release();\r\n    json = void 0;\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    this._userDataNodes = new csmVector<CubismModelUserDataNode>();\r\n    this._artMeshUserDataNode = new csmVector<CubismModelUserDataNode>();\r\n  }\r\n\r\n  /**\r\n   * デストラクタ相当の処理\r\n   *\r\n   * ユーザーデータ構造体配列を解放する\r\n   */\r\n  public release(): void {\r\n    for (let i = 0; i < this._userDataNodes.getSize(); ++i) {\r\n      this._userDataNodes.set(i, null);\r\n    }\r\n\r\n    this._userDataNodes = null;\r\n  }\r\n\r\n  private _userDataNodes: csmVector<CubismModelUserDataNode>; // ユーザーデータ構造体配列\r\n  private _artMeshUserDataNode: csmVector<CubismModelUserDataNode>; // 閲覧リストの保持\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismmodeluserdata';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismModelUserData = $.CubismModelUserData;\r\n  export type CubismModelUserData = $.CubismModelUserData;\r\n  export const CubismModelUserDataNode = $.CubismModelUserDataNode;\r\n  export type CubismModelUserDataNode = $.CubismModelUserDataNode;\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismBreath } from '../effect/cubismbreath';\r\nimport { CubismEyeBlink } from '../effect/cubismeyeblink';\r\nimport { CubismPose } from '../effect/cubismpose';\r\nimport { CubismIdHandle } from '../id/cubismid';\r\nimport { Constant } from '../live2dcubismframework';\r\nimport { CubismModelMatrix } from '../math/cubismmodelmatrix';\r\nimport { CubismTargetPoint } from '../math/cubismtargetpoint';\r\nimport { ACubismMotion, FinishedMotionCallback } from '../motion/acubismmotion';\r\nimport { CubismExpressionMotion } from '../motion/cubismexpressionmotion';\r\nimport { CubismMotion } from '../motion/cubismmotion';\r\nimport { CubismMotionManager } from '../motion/cubismmotionmanager';\r\nimport { CubismMotionQueueManager } from '../motion/cubismmotionqueuemanager';\r\nimport { CubismPhysics } from '../physics/cubismphysics';\r\nimport { CubismRenderer_WebGL } from '../rendering/cubismrenderer_webgl';\r\nimport { csmString } from '../type/csmstring';\r\nimport { CubismLogError, CubismLogInfo } from '../utils/cubismdebug';\r\nimport { CubismMoc } from './cubismmoc';\r\nimport { CubismModel } from './cubismmodel';\r\nimport { CubismModelUserData } from './cubismmodeluserdata';\r\n\r\n/**\r\n * ユーザーが実際に使用するモデル\r\n *\r\n * ユーザーが実際に使用するモデルの基底クラス。これを継承してユーザーが実装する。\r\n */\r\nexport class CubismUserModel {\r\n  /**\r\n   * 初期化状態の取得\r\n   *\r\n   * 初期化されている状態か？\r\n   *\r\n   * @return true     初期化されている\r\n   * @return false    初期化されていない\r\n   */\r\n  public isInitialized(): boolean {\r\n    return this._initialized;\r\n  }\r\n\r\n  /**\r\n   * 初期化状態の設定\r\n   *\r\n   * 初期化状態を設定する。\r\n   *\r\n   * @param v 初期化状態\r\n   */\r\n  public setInitialized(v: boolean): void {\r\n    this._initialized = v;\r\n  }\r\n\r\n  /**\r\n   * 更新状態の取得\r\n   *\r\n   * 更新されている状態か？\r\n   *\r\n   * @return true     更新されている\r\n   * @return false    更新されていない\r\n   */\r\n  public isUpdating(): boolean {\r\n    return this._updating;\r\n  }\r\n\r\n  /**\r\n   * 更新状態の設定\r\n   *\r\n   * 更新状態を設定する\r\n   *\r\n   * @param v 更新状態\r\n   */\r\n  public setUpdating(v: boolean): void {\r\n    this._updating = v;\r\n  }\r\n\r\n  /**\r\n   * マウスドラッグ情報の設定\r\n   * @param ドラッグしているカーソルのX位置\r\n   * @param ドラッグしているカーソルのY位置\r\n   */\r\n  public setDragging(x: number, y: number): void {\r\n    this._dragManager.set(x, y);\r\n  }\r\n\r\n  /**\r\n   * 加速度の情報を設定する\r\n   * @param x X軸方向の加速度\r\n   * @param y Y軸方向の加速度\r\n   * @param z Z軸方向の加速度\r\n   */\r\n  public setAcceleration(x: number, y: number, z: number): void {\r\n    this._accelerationX = x;\r\n    this._accelerationY = y;\r\n    this._accelerationZ = z;\r\n  }\r\n\r\n  /**\r\n   * モデル行列を取得する\r\n   * @return モデル行列\r\n   */\r\n  public getModelMatrix(): CubismModelMatrix {\r\n    return this._modelMatrix;\r\n  }\r\n\r\n  /**\r\n   * 不透明度の設定\r\n   * @param a 不透明度\r\n   */\r\n  public setOpacity(a: number): void {\r\n    this._opacity = a;\r\n  }\r\n\r\n  /**\r\n   * 不透明度の取得\r\n   * @return 不透明度\r\n   */\r\n  public getOpacity(): number {\r\n    return this._opacity;\r\n  }\r\n\r\n  /**\r\n   * モデルデータを読み込む\r\n   *\r\n   * @param buffer    moc3ファイルが読み込まれているバッファ\r\n   */\r\n  public loadModel(buffer: ArrayBuffer) {\r\n    this._moc = CubismMoc.create(buffer);\r\n\r\n    if (this._moc == null) {\r\n      CubismLogError('Failed to CubismMoc.create().');\r\n      return;\r\n    }\r\n\r\n    this._model = this._moc.createModel();\r\n\r\n    if (this._model == null) {\r\n      CubismLogError('Failed to CreateModel().');\r\n      return;\r\n    }\r\n\r\n    this._model.saveParameters();\r\n    this._modelMatrix = new CubismModelMatrix(\r\n      this._model.getCanvasWidth(),\r\n      this._model.getCanvasHeight()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * モーションデータを読み込む\r\n   * @param buffer motion3.jsonファイルが読み込まれているバッファ\r\n   * @param size バッファのサイズ\r\n   * @param name モーションの名前\r\n   * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\r\n   * @return モーションクラス\r\n   */\r\n  public loadMotion = (\r\n    buffer: ArrayBuffer,\r\n    size: number,\r\n    name: string,\r\n    onFinishedMotionHandler?: FinishedMotionCallback\r\n  ) => CubismMotion.create(buffer, size, onFinishedMotionHandler);\r\n\r\n  /**\r\n   * 表情データの読み込み\r\n   * @param buffer expファイルが読み込まれているバッファ\r\n   * @param size バッファのサイズ\r\n   * @param name 表情の名前\r\n   */\r\n  public loadExpression(\r\n    buffer: ArrayBuffer,\r\n    size: number,\r\n    name: string\r\n  ): ACubismMotion {\r\n    return CubismExpressionMotion.create(buffer, size);\r\n  }\r\n\r\n  /**\r\n   * ポーズデータの読み込み\r\n   * @param buffer pose3.jsonが読み込まれているバッファ\r\n   * @param size バッファのサイズ\r\n   */\r\n  public loadPose(buffer: ArrayBuffer, size: number): void {\r\n    this._pose = CubismPose.create(buffer, size);\r\n  }\r\n\r\n  /**\r\n   * モデルに付属するユーザーデータを読み込む\r\n   * @param buffer userdata3.jsonが読み込まれているバッファ\r\n   * @param size バッファのサイズ\r\n   */\r\n  public loadUserData(buffer: ArrayBuffer, size: number): void {\r\n    this._modelUserData = CubismModelUserData.create(buffer, size);\r\n  }\r\n\r\n  /**\r\n   * 物理演算データの読み込み\r\n   * @param buffer  physics3.jsonが読み込まれているバッファ\r\n   * @param size    バッファのサイズ\r\n   */\r\n  public loadPhysics(buffer: ArrayBuffer, size: number): void {\r\n    this._physics = CubismPhysics.create(buffer, size);\r\n  }\r\n\r\n  /**\r\n   * 当たり判定の取得\r\n   * @param drawableId 検証したいDrawableのID\r\n   * @param pointX X位置\r\n   * @param pointY Y位置\r\n   * @return true ヒットしている\r\n   * @return false ヒットしていない\r\n   */\r\n  public isHit(\r\n    drawableId: CubismIdHandle,\r\n    pointX: number,\r\n    pointY: number\r\n  ): boolean {\r\n    const drawIndex: number = this._model.getDrawableIndex(drawableId);\r\n\r\n    if (drawIndex < 0) {\r\n      return false; // 存在しない場合はfalse\r\n    }\r\n\r\n    const count: number = this._model.getDrawableVertexCount(drawIndex);\r\n    const vertices: Float32Array = this._model.getDrawableVertices(drawIndex);\r\n\r\n    let left: number = vertices[0];\r\n    let right: number = vertices[0];\r\n    let top: number = vertices[1];\r\n    let bottom: number = vertices[1];\r\n\r\n    for (let j = 1; j < count; ++j) {\r\n      const x = vertices[Constant.vertexOffset + j * Constant.vertexStep];\r\n      const y = vertices[Constant.vertexOffset + j * Constant.vertexStep + 1];\r\n\r\n      if (x < left) {\r\n        left = x; // Min x\r\n      }\r\n\r\n      if (x > right) {\r\n        right = x; // Max x\r\n      }\r\n\r\n      if (y < top) {\r\n        top = y; // Min y\r\n      }\r\n\r\n      if (y > bottom) {\r\n        bottom = y; // Max y\r\n      }\r\n    }\r\n\r\n    const tx: number = this._modelMatrix.invertTransformX(pointX);\r\n    const ty: number = this._modelMatrix.invertTransformY(pointY);\r\n\r\n    return left <= tx && tx <= right && top <= ty && ty <= bottom;\r\n  }\r\n\r\n  /**\r\n   * モデルの取得\r\n   * @return モデル\r\n   */\r\n  public getModel(): CubismModel {\r\n    return this._model;\r\n  }\r\n\r\n  /**\r\n   * レンダラの取得\r\n   * @return レンダラ\r\n   */\r\n  public getRenderer(): CubismRenderer_WebGL {\r\n    return this._renderer;\r\n  }\r\n\r\n  /**\r\n   * レンダラを作成して初期化を実行する\r\n   * @param maskBufferCount バッファの生成数\r\n   */\r\n  public createRenderer(maskBufferCount = 1): void {\r\n    if (this._renderer) {\r\n      this.deleteRenderer();\r\n    }\r\n\r\n    this._renderer = new CubismRenderer_WebGL();\r\n    this._renderer.initialize(this._model, maskBufferCount);\r\n  }\r\n\r\n  /**\r\n   * レンダラの解放\r\n   */\r\n  public deleteRenderer(): void {\r\n    if (this._renderer != null) {\r\n      this._renderer.release();\r\n      this._renderer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * イベント発火時の標準処理\r\n   *\r\n   * Eventが再生処理時にあった場合の処理をする。\r\n   * 継承で上書きすることを想定している。\r\n   * 上書きしない場合はログ出力をする。\r\n   *\r\n   * @param eventValue 発火したイベントの文字列データ\r\n   */\r\n  public motionEventFired(eventValue: csmString): void {\r\n    CubismLogInfo('{0}', eventValue.s);\r\n  }\r\n\r\n  /**\r\n   * イベント用のコールバック\r\n   *\r\n   * CubismMotionQueueManagerにイベント用に登録するためのCallback。\r\n   * CubismUserModelの継承先のEventFiredを呼ぶ。\r\n   *\r\n   * @param caller 発火したイベントを管理していたモーションマネージャー、比較用\r\n   * @param eventValue 発火したイベントの文字列データ\r\n   * @param customData CubismUserModelを継承したインスタンスを想定\r\n   */\r\n  public static cubismDefaultMotionEventCallback(\r\n    caller: CubismMotionQueueManager,\r\n    eventValue: csmString,\r\n    customData: CubismUserModel\r\n  ): void {\r\n    const model: CubismUserModel = customData;\r\n\r\n    if (model != null) {\r\n      model.motionEventFired(eventValue);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    // 各変数初期化\r\n    this._moc = null;\r\n    this._model = null;\r\n    this._motionManager = null;\r\n    this._expressionManager = null;\r\n    this._eyeBlink = null;\r\n    this._breath = null;\r\n    this._modelMatrix = null;\r\n    this._pose = null;\r\n    this._dragManager = null;\r\n    this._physics = null;\r\n    this._modelUserData = null;\r\n    this._initialized = false;\r\n    this._updating = false;\r\n    this._opacity = 1.0;\r\n    this._lipsync = true;\r\n    this._lastLipSyncValue = 0.0;\r\n    this._dragX = 0.0;\r\n    this._dragY = 0.0;\r\n    this._accelerationX = 0.0;\r\n    this._accelerationY = 0.0;\r\n    this._accelerationZ = 0.0;\r\n    this._debugMode = false;\r\n    this._renderer = null;\r\n\r\n    // モーションマネージャーを作成\r\n    this._motionManager = new CubismMotionManager();\r\n    this._motionManager.setEventCallback(\r\n      CubismUserModel.cubismDefaultMotionEventCallback,\r\n      this\r\n    );\r\n\r\n    // 表情マネージャーを作成\r\n    this._expressionManager = new CubismMotionManager();\r\n\r\n    // ドラッグによるアニメーション\r\n    this._dragManager = new CubismTargetPoint();\r\n  }\r\n\r\n  /**\r\n   * デストラクタに相当する処理\r\n   */\r\n  public release() {\r\n    if (this._motionManager != null) {\r\n      this._motionManager.release();\r\n      this._motionManager = null;\r\n    }\r\n\r\n    if (this._expressionManager != null) {\r\n      this._expressionManager.release();\r\n      this._expressionManager = null;\r\n    }\r\n\r\n    if (this._moc != null) {\r\n      this._moc.deleteModel(this._model);\r\n      this._moc.release();\r\n      this._moc = null;\r\n    }\r\n\r\n    this._modelMatrix = null;\r\n\r\n    CubismPose.delete(this._pose);\r\n    CubismEyeBlink.delete(this._eyeBlink);\r\n    CubismBreath.delete(this._breath);\r\n\r\n    this._dragManager = null;\r\n\r\n    CubismPhysics.delete(this._physics);\r\n    CubismModelUserData.delete(this._modelUserData);\r\n\r\n    this.deleteRenderer();\r\n  }\r\n\r\n  protected _moc: CubismMoc; // Mocデータ\r\n  protected _model: CubismModel; // Modelインスタンス\r\n\r\n  protected _motionManager: CubismMotionManager; // モーション管理\r\n  protected _expressionManager: CubismMotionManager; // 表情管理\r\n  protected _eyeBlink: CubismEyeBlink; // 自動まばたき\r\n  protected _breath: CubismBreath; // 呼吸\r\n  protected _modelMatrix: CubismModelMatrix; // モデル行列\r\n  protected _pose: CubismPose; // ポーズ管理\r\n  protected _dragManager: CubismTargetPoint; // マウスドラッグ\r\n  protected _physics: CubismPhysics; // 物理演算\r\n  protected _modelUserData: CubismModelUserData; // ユーザーデータ\r\n\r\n  protected _initialized: boolean; // 初期化されたかどうか\r\n  protected _updating: boolean; // 更新されたかどうか\r\n  protected _opacity: number; // 不透明度\r\n  protected _lipsync: boolean; // リップシンクするかどうか\r\n  protected _lastLipSyncValue: number; // 最後のリップシンクの制御地\r\n  protected _dragX: number; // マウスドラッグのX位置\r\n  protected _dragY: number; // マウスドラッグのY位置\r\n  protected _accelerationX: number; // X軸方向の加速度\r\n  protected _accelerationY: number; // Y軸方向の加速度\r\n  protected _accelerationZ: number; // Z軸方向の加速度\r\n  protected _debugMode: boolean; // デバッグモードかどうか\r\n\r\n  private _renderer: CubismRenderer_WebGL; // レンダラ\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismusermodel';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismUserModel = $.CubismUserModel;\r\n  export type CubismUserModel = $.CubismUserModel;\r\n}\r\n","import LAppDefine from './lappdefine'\r\n\r\n/**\r\n * Cubism Platform Abstraction Layer.抽象的平台相关功能\r\n *\r\n * 汇总与平台相关的功能，例如文件读取和时间检索。\r\n */\r\nexport class LAppPal {\r\n  private static _currentFrame = 0.0\r\n  private static _lastFrame = 0.0\r\n  private static _deltaTime = 0.0\r\n  \r\n  /**\r\n   * 将文件作为字节数据读取\r\n   *\r\n   * @param filePath 要读取的文件的路径\r\n   * @param callback\r\n   * @return\r\n   * {\r\n   *      buffer,   字节数据读取\r\n   *      size        文件大小\r\n   * }\r\n   */\r\n  public static loadFileAsBytes(filePath: string, callback: (arrayBuffer: ArrayBuffer, size: number) => void): void {\r\n    fetch(filePath)\r\n      .then(response => response.arrayBuffer())\r\n      .then(arrayBuffer => callback(arrayBuffer, arrayBuffer.byteLength))\r\n  }\r\n  \r\n  /**\r\n   * 获取增量时间（与上一帧的差异）\r\n   * @return 增量时间 [毫秒]\r\n   */\r\n  public static getDeltaTime(): number {\r\n    return this._deltaTime\r\n  }\r\n  \r\n  public static updateTime(): void {\r\n    this._currentFrame = Date.now()\r\n    this._deltaTime = (this._currentFrame - this._lastFrame) / 1000\r\n    this._lastFrame = this._currentFrame\r\n  }\r\n  \r\n  /**\r\n   * 打印消息\r\n   * @param message 字符串\r\n   */\r\n  public static printMessage(message: string): void {\r\n    if (LAppDefine.debug) {\r\n      console.log(message)\r\n    }\r\n  }\r\n}\r\n","export class LAppWavFileHandler {\r\n  protected static _instance: LAppWavFileHandler = null\r\n  \r\n  pcmData: Array<Float32Array>\r\n  userTimeSeconds: number\r\n  lastRms: number\r\n  sampleOffset: number\r\n  wavFileInfo: WavFileInfo\r\n  byteReader: ByteReader\r\n  audio: HTMLAudioElement\r\n  audioPlayPromise?: Promise<void>\r\n  \r\n  constructor() {\r\n    this.pcmData = null\r\n    this.userTimeSeconds = 0.0\r\n    this.lastRms = 0.0\r\n    this.sampleOffset = 0.0\r\n    this.wavFileInfo = new WavFileInfo()\r\n    this.byteReader = new ByteReader()\r\n    this.audio = new Audio()\r\n  }\r\n  \r\n  private loadFileToBytes = (arrayBuffer: ArrayBuffer): void => {\r\n    this.byteReader._fileByte = arrayBuffer\r\n    this.byteReader._fileDataView = new DataView(this.byteReader._fileByte)\r\n    this.byteReader._fileSize = this.byteReader._fileByte.byteLength\r\n    this.byteReader._readOffset = 0\r\n  }\r\n  \r\n  /**\r\n   * 返回类的实例（单一实例）。\r\n   * 如果尚未创建实例，请在内部实例化它。\r\n   *\r\n   * @return 类的实例\r\n   */\r\n  public static getInstance(): LAppWavFileHandler {\r\n    if (this._instance == null) {\r\n      this._instance = new LAppWavFileHandler()\r\n    }\r\n    \r\n    return this._instance\r\n  }\r\n  \r\n  /**\r\n   * 释放类的实例（单例）。\r\n   */\r\n  public static releaseInstance(): void {\r\n    if (this._instance != null) {\r\n      this._instance = void 0\r\n    }\r\n    \r\n    this._instance = null\r\n  }\r\n  \r\n  public update(deltaTimeSeconds: number) {\r\n    let goalOffset: number\r\n    let rms: number\r\n    \r\n    // 在数据加载之前/到达文件末尾时不要更新\r\n    if (\r\n      this.pcmData == null ||\r\n      this.sampleOffset >= this.wavFileInfo._samplesPerChannel\r\n    ) {\r\n      this.lastRms = 0.0\r\n      return false\r\n    }\r\n    \r\n    // 保持年龄后的状态\r\n    this.userTimeSeconds += deltaTimeSeconds\r\n    goalOffset = Math.floor(\r\n      this.userTimeSeconds * this.wavFileInfo._samplingRate,\r\n    )\r\n    if (goalOffset > this.wavFileInfo._samplesPerChannel) {\r\n      goalOffset = this.wavFileInfo._samplesPerChannel\r\n    }\r\n    \r\n    // RMS测量\r\n    rms = 0.0\r\n    for (\r\n      let channelCount = 0;\r\n      channelCount < this.wavFileInfo._numberOfChannels;\r\n      channelCount++\r\n    ) {\r\n      for (\r\n        let sampleCount = this.sampleOffset;\r\n        sampleCount < goalOffset;\r\n        sampleCount++\r\n      ) {\r\n        const pcm = this.pcmData[channelCount][sampleCount]\r\n        rms += pcm * pcm\r\n      }\r\n    }\r\n    rms = Math.sqrt(\r\n      rms /\r\n      (this.wavFileInfo._numberOfChannels *\r\n        (goalOffset - this.sampleOffset)),\r\n    )\r\n    \r\n    this.lastRms = rms\r\n    this.sampleOffset = goalOffset\r\n    return true\r\n  }\r\n  \r\n  public async start(filePath: string): Promise<boolean> {\r\n    // 初始化样本位置参考位置\r\n    this.sampleOffset = 0\r\n    this.userTimeSeconds = 0.0\r\n    \r\n    // RMS重置值\r\n    this.lastRms = 0.0\r\n    \r\n    this.playWavFile(filePath)\r\n    return await this.loadWavFile(filePath)\r\n  }\r\n  \r\n  public getRms(): number {\r\n    return this.lastRms\r\n  }\r\n  \r\n  public async loadWavFile(filePath: string): Promise<boolean> {\r\n    let ret = false\r\n    \r\n    if (this.pcmData != null) {\r\n      this.releasePcmData()\r\n    }\r\n    \r\n    // 文件加载\r\n    const asyncFileLoad = async () => {\r\n      return fetch(filePath).then(response => {\r\n        return response.arrayBuffer()\r\n      })\r\n    }\r\n    \r\n    this.loadFileToBytes(await asyncFileLoad())\r\n    \r\n    // 如果文件加载失败或没有适合前导签名“RIFF”的大小，则失败\r\n    if (this.byteReader._fileSize < 4) {\r\n      return false\r\n    }\r\n    \r\n    // 文件名\r\n    this.wavFileInfo._fileName = filePath\r\n    \r\n    try {\r\n      // 签名“RIFF”\r\n      if (!this.byteReader.getCheckSignature('RIFF')) {\r\n        ret = false\r\n        throw new Error('Cannot find Signeture \"RIFF\".')\r\n      }\r\n      // 文件大小-8（跳过阅读）\r\n      this.byteReader.get32LittleEndian()\r\n      // 签名\"WAVE\"\r\n      if (!this.byteReader.getCheckSignature('WAVE')) {\r\n        ret = false\r\n        throw new Error('Cannot find Signeture \"WAVE\".')\r\n      }\r\n      // 签名 \"fmt \"\r\n      if (!this.byteReader.getCheckSignature('fmt ')) {\r\n        ret = false\r\n        throw new Error('Cannot find Signeture \"fmt\".')\r\n      }\r\n      // fmt区块大小\r\n      const fmtChunkSize = this.byteReader.get32LittleEndian()\r\n      // 不接受 1（线性 PCM）以外的格式 ID。\r\n      if (this.byteReader.get16LittleEndian() != 1) {\r\n        ret = false\r\n        throw new Error('File is not linear PCM.')\r\n      }\r\n      // 通道数\r\n      this.wavFileInfo._numberOfChannels = this.byteReader.get16LittleEndian()\r\n      // 采样率\r\n      this.wavFileInfo._samplingRate = this.byteReader.get32LittleEndian()\r\n      // 数据速度 [字节/秒]（跳过读取）\r\n      this.byteReader.get32LittleEndian()\r\n      // 块大小（跳过读取）\r\n      this.byteReader.get16LittleEndian()\r\n      // 量化位数\r\n      this.wavFileInfo._bitsPerSample = this.byteReader.get16LittleEndian()\r\n      // 跳过 FMT 块扩展\r\n      if (fmtChunkSize > 16) {\r\n        this.byteReader._readOffset += fmtChunkSize - 16\r\n      }\r\n      // \"data\"跳过阅读，直到出现块\r\n      while (!this.byteReader.getCheckSignature('data') && this.byteReader._readOffset < this.byteReader._fileSize) {\r\n        this.byteReader._readOffset += this.byteReader.get32LittleEndian() + 4\r\n      }\r\n      // “data”块未出现在文件中\r\n      if (this.byteReader._readOffset >= this.byteReader._fileSize) {\r\n        ret = false\r\n        throw new Error('Cannot find \"data\" Chunk.')\r\n      }\r\n      // 样品数量\r\n      {\r\n        const dataChunkSize = this.byteReader.get32LittleEndian()\r\n        this.wavFileInfo._samplesPerChannel = (dataChunkSize * 8) / (this.wavFileInfo._bitsPerSample * this.wavFileInfo._numberOfChannels)\r\n      }\r\n      \r\n      // 空间分配\r\n      this.pcmData = new Array(this.wavFileInfo._numberOfChannels)\r\n      for (let count = 0; count < this.wavFileInfo._numberOfChannels; count++) {\r\n        this.pcmData[count] = new Float32Array(this.wavFileInfo._samplesPerChannel)\r\n      }\r\n      // 波形数据采集\r\n      for (let samples = 0; samples < this.wavFileInfo._samplesPerChannel; samples++) {\r\n        for (let index = 0; index < this.wavFileInfo._numberOfChannels; index++) {\r\n          this.pcmData[index][samples] = this.getPcmSample()\r\n        }\r\n      }\r\n      \r\n      ret = true\r\n    } catch ( e ) {\r\n      console.error(e)\r\n    }\r\n    \r\n    return ret\r\n  }\r\n  \r\n  public playWavFile(filePath: string) {\r\n    this.audio.src = filePath\r\n    this.audioPlayPromise = this.audio.play()\r\n  }\r\n  \r\n  public getPcmSample(): number {\r\n    let pcm32\r\n    \r\n    // 扩展到 32 位宽度，然后舍入到 -1~1 范围\r\n    switch (this.wavFileInfo._bitsPerSample) {\r\n      case 8:\r\n        pcm32 = this.byteReader.get8() - 128\r\n        pcm32 <<= 24\r\n        break\r\n      case 16:\r\n        pcm32 = this.byteReader.get16LittleEndian() << 16\r\n        break\r\n      case 24:\r\n        pcm32 = this.byteReader.get24LittleEndian() << 8\r\n        break\r\n      default:\r\n        // 不支持的位宽\r\n        pcm32 = 0\r\n        break\r\n    }\r\n    \r\n    return pcm32 / 2147483647 //Number.MAX_VALUE;\r\n  }\r\n  \r\n  public releasePcmData(): void {\r\n    for (\r\n      let channelCount = 0;\r\n      channelCount < this.wavFileInfo._numberOfChannels;\r\n      channelCount++\r\n    ) {\r\n      delete this.pcmData[channelCount]\r\n    }\r\n    delete this.pcmData\r\n    this.pcmData = null\r\n  }\r\n  \r\n  public release() {\r\n    this.audioPlayPromise?.then(()=> this.audio.pause())\r\n  }\r\n}\r\n\r\nexport class WavFileInfo {\r\n  _fileName: string ///< 文件名\r\n  _numberOfChannels: number ///< 通道数\r\n  _bitsPerSample: number ///< 每个样本的位数\r\n  _samplingRate: number ///< 采样率\r\n  _samplesPerChannel: number ///< 每通道总采样数\r\n  constructor() {\r\n    this._fileName = ''\r\n    this._numberOfChannels = 0\r\n    this._bitsPerSample = 0\r\n    this._samplingRate = 0\r\n    this._samplesPerChannel = 0\r\n  }\r\n}\r\n\r\nexport class ByteReader {\r\n  _fileByte: ArrayBuffer ///< 加载文件的字节数\r\n  _fileDataView: DataView\r\n  _fileSize: number ///< 文件大小\r\n  _readOffset: number ///< 文件引用位置\r\n  \r\n  constructor() {\r\n    this._fileByte = null\r\n    this._fileDataView = null\r\n    this._fileSize = 0\r\n    this._readOffset = 0\r\n  }\r\n  \r\n  /**\r\n   * @brief 8 位读取\r\n   * @return Csm::csmUint8 8 位值读取\r\n   */\r\n  public get8(): number {\r\n    const ret = this._fileDataView.getUint8(this._readOffset)\r\n    this._readOffset++\r\n    return ret\r\n  }\r\n  \r\n  /**\r\n   * @brief 16 位读取（小端序）\r\n   * @return Csm::csmUint16 16 位值读取\r\n   */\r\n  public get16LittleEndian(): number {\r\n    const ret =\r\n      (this._fileDataView.getUint8(this._readOffset + 1) << 8) |\r\n      this._fileDataView.getUint8(this._readOffset)\r\n    this._readOffset += 2\r\n    return ret\r\n  }\r\n  \r\n  /**\r\n   * @brief 24 位读取（小端序）\r\n   * @return Csm::csmUint32 读取 24 位值（设置为较低的 24 位）\r\n   */\r\n  public get24LittleEndian(): number {\r\n    const ret =\r\n      (this._fileDataView.getUint8(this._readOffset + 2) << 16) |\r\n      (this._fileDataView.getUint8(this._readOffset + 1) << 8) |\r\n      this._fileDataView.getUint8(this._readOffset)\r\n    this._readOffset += 3\r\n    return ret\r\n  }\r\n  \r\n  /**\r\n   * @brief 32 位读取（小端序）\r\n   * @return Csm::csmUint32 32 位值读取\r\n   */\r\n  public get32LittleEndian(): number {\r\n    const ret =\r\n      (this._fileDataView.getUint8(this._readOffset + 3) << 24) |\r\n      (this._fileDataView.getUint8(this._readOffset + 2) << 16) |\r\n      (this._fileDataView.getUint8(this._readOffset + 1) << 8) |\r\n      this._fileDataView.getUint8(this._readOffset)\r\n    this._readOffset += 4\r\n    return ret\r\n  }\r\n  \r\n  /**\r\n   * @brief 签名检索和与引用字符串的匹配检查\r\n   * @param[in] reference 要检查的签名字符串\r\n   * @retval  true    匹配\r\n   * @retval  false   不匹配\r\n   */\r\n  public getCheckSignature(reference: string): boolean {\r\n    const getSignature: Uint8Array = new Uint8Array(4)\r\n    const referenceString: Uint8Array = new TextEncoder().encode(reference)\r\n    if (reference.length != 4) {\r\n      return false\r\n    }\r\n    for (let signatureOffset = 0; signatureOffset < 4; signatureOffset++) {\r\n      getSignature[signatureOffset] = this.get8()\r\n    }\r\n    return (\r\n      getSignature[0] == referenceString[0] &&\r\n      getSignature[1] == referenceString[1] &&\r\n      getSignature[2] == referenceString[2] &&\r\n      getSignature[3] == referenceString[3]\r\n    )\r\n  }\r\n}\r\n","import { CubismDefaultParameterId } from '@framework/cubismdefaultparameterid'\r\nimport { CubismModelSettingJson } from '@framework/cubismmodelsettingjson'\r\nimport { BreathParameterData, CubismBreath } from '@framework/effect/cubismbreath'\r\nimport { CubismEyeBlink } from '@framework/effect/cubismeyeblink'\r\nimport { ICubismModelSetting } from '@framework/icubismmodelsetting'\r\nimport { CubismIdHandle } from '@framework/id/cubismid'\r\nimport { CubismFramework } from '@framework/live2dcubismframework'\r\nimport { CubismMatrix44 } from '@framework/math/cubismmatrix44'\r\nimport { CubismUserModel } from '@framework/model/cubismusermodel'\r\nimport { ACubismMotion, FinishedMotionCallback } from '@framework/motion/acubismmotion'\r\nimport { CubismMotion } from '@framework/motion/cubismmotion'\r\nimport { CubismMotionManager } from '@framework/motion/cubismmotionmanager'\r\nimport {\r\n  CubismMotionQueueEntryHandle,\r\n  InvalidMotionQueueEntryHandleValue,\r\n} from '@framework/motion/cubismmotionqueuemanager'\r\nimport { csmMap } from '@framework/type/csmmap'\r\nimport { csmRect } from '@framework/type/csmrectf'\r\nimport { csmString } from '@framework/type/csmstring'\r\nimport { csmVector } from '@framework/type/csmvector'\r\nimport { CubismLogError, CubismLogInfo } from '@framework/utils/cubismdebug'\r\n\r\nimport path from 'path'\r\n\r\nimport { MotionGroup, Priority } from './lappdefine'\r\nimport { LAppDelegate } from './lappdelegate'\r\nimport { LAppPal } from './lapppal'\r\nimport { TextureInfo } from './lapptexturemanager'\r\nimport { LAppWavFileHandler } from './lappwavfilehandler'\r\nimport { CubismIdManager } from '@framework/id/cubismidmanager'\r\n\r\nenum LoadStep {\r\n  LoadAssets,\r\n  LoadModel,\r\n  WaitLoadModel,\r\n  LoadExpression,\r\n  WaitLoadExpression,\r\n  LoadPhysics,\r\n  WaitLoadPhysics,\r\n  LoadPose,\r\n  WaitLoadPose,\r\n  SetupEyeBlink,\r\n  SetupBreath,\r\n  LoadUserData,\r\n  WaitLoadUserData,\r\n  SetupEyeBlinkIds,\r\n  SetupLipSyncIds,\r\n  SetupLayout,\r\n  LoadMotion,\r\n  WaitLoadMotion,\r\n  CompleteInitialize,\r\n  CompleteSetupModel,\r\n  LoadTexture,\r\n  WaitLoadTexture,\r\n  CompleteSetup\r\n}\r\n\r\n/**\r\n * <br>用户实际使用的模型的实现类\r\n * 生成模型，生成功能组件，并调用更新和渲染。\r\n */\r\nexport class LAppModel extends CubismUserModel {\r\n  modelSetting: ICubismModelSetting // 模型设置信息\r\n  modelHomeDir: string // 模型设置所在的目录\r\n  userTimeSeconds: number // 增量时间总和 [秒]\r\n  \r\n  eyeBlinkIds: csmVector<CubismIdHandle> // 为模型设置的闪烁函数的参数 ID\r\n  lipSyncIds: csmVector<CubismIdHandle> // 为模型设置口型同步参数 ID\r\n  \r\n  motions: csmMap<string, ACubismMotion> // 加载的议案列表\r\n  expressions: csmMap<string, ACubismMotion> // 加载的面部表情列表\r\n  \r\n  _hitArea: csmVector<csmRect>\r\n  _userArea: csmVector<csmRect>\r\n  \r\n  idParamAngleX: CubismIdHandle // 参数ID: ParamAngleX\r\n  idParamAngleY: CubismIdHandle // 参数ID: ParamAngleY\r\n  idParamAngleZ: CubismIdHandle // 参数ID: ParamAngleZ\r\n  idParamEyeBallX: CubismIdHandle // 参数ID: ParamEyeBallX\r\n  idParamEyeBallY: CubismIdHandle // 参数ID: ParamEyeBAllY\r\n  idParamBodyAngleX: CubismIdHandle // 参数ID: ParamBodyAngleX\r\n  \r\n  state: number // 用于当前状态管理\r\n  expressionCount: number // 面部表情数据计数\r\n  textureCount: number // 纹理计数\r\n  motionCount: number // 运动数据计数\r\n  allMotionCount: number // 总动量\r\n  wavFileHandler: LAppWavFileHandler //WAV 文件处理程序\r\n  \r\n  private readonly _rightArmMotionManager: CubismMotionManager\r\n  private readonly _leftArmMotionManager: CubismMotionManager\r\n  \r\n  private get model() {\r\n    return this._model\r\n  }\r\n  \r\n  /**\r\n   * 构造 函数\r\n   */\r\n  public constructor() {\r\n    super()\r\n    \r\n    this.modelSetting = null\r\n    this.modelHomeDir = null\r\n    this.userTimeSeconds = 0.0\r\n    \r\n    this.eyeBlinkIds = new csmVector<CubismIdHandle>()\r\n    this.lipSyncIds = new csmVector<CubismIdHandle>()\r\n    \r\n    this.motions = new csmMap<string, ACubismMotion>()\r\n    this.expressions = new csmMap<string, ACubismMotion>()\r\n    \r\n    this._hitArea = new csmVector<csmRect>()\r\n    this._userArea = new csmVector<csmRect>()\r\n    \r\n    this.getParameterId()\r\n    \r\n    this.state = LoadStep.LoadAssets\r\n    this.expressionCount = 0\r\n    this.textureCount = 0\r\n    this.motionCount = 0\r\n    this.allMotionCount = 0\r\n    this.wavFileHandler = new LAppWavFileHandler()\r\n    \r\n    this._rightArmMotionManager = new CubismMotionManager() // <<<追加！\r\n    this._leftArmMotionManager = new CubismMotionManager()  // <<<追加！\r\n  }\r\n  \r\n  public getParameterId() {\r\n    const idManager: CubismIdManager = CubismFramework.getIdManager()\r\n    this.idParamAngleX = idManager.getId(CubismDefaultParameterId.ParamAngleX)\r\n    this.idParamAngleY = idManager.getId(CubismDefaultParameterId.ParamAngleY)\r\n    this.idParamAngleZ = idManager.getId(CubismDefaultParameterId.ParamAngleZ)\r\n    this.idParamEyeBallX = idManager.getId(CubismDefaultParameterId.ParamEyeBallX)\r\n    this.idParamEyeBallY = idManager.getId(CubismDefaultParameterId.ParamEyeBallY)\r\n    this.idParamBodyAngleX = idManager.getId(CubismDefaultParameterId.ParamBodyAngleX)\r\n  }\r\n  \r\n  /**\r\n   * 其中model3.json从目录和文件路径生成模型\r\n   * @param dir\r\n   * @param fileName\r\n   */\r\n  public loadAssets(dir: string, fileName: string): void {\r\n    this.modelHomeDir = dir\r\n    \r\n    fetch(path.join(dir, fileName), { cache: 'no-cache' })\r\n      .then(response => response.arrayBuffer())\r\n      .then(arrayBuffer => {\r\n        const setting: ICubismModelSetting = new CubismModelSettingJson(arrayBuffer, arrayBuffer.byteLength)\r\n        \r\n        // 更新状态\r\n        this.state = LoadStep.LoadModel\r\n        \r\n        // 保存结果\r\n        this.setupModel(setting)\r\n      })\r\n  }\r\n  \r\n  /**\r\n   * 以从model3.json中生成模型。\r\n   * 如model3.json中所述，生成模型生成、运动和物理场等组件。\r\n   *\r\n   * @param setting ICubismModelSetting的实例\r\n   */\r\n  private setupModel(setting: ICubismModelSetting): void {\r\n    this._updating = true\r\n    this._initialized = false\r\n    \r\n    this.modelSetting = setting\r\n    \r\n    // CubismModel\r\n    if (this.modelSetting.getModelFileName() != '') {\r\n      const modelFileName = this.modelSetting.getModelFileName()\r\n      \r\n      fetch(path.join(this.modelHomeDir, modelFileName))\r\n        .then(response => response.arrayBuffer())\r\n        .then(arrayBuffer => {\r\n          this.loadModel(arrayBuffer)\r\n          this.state = LoadStep.LoadExpression\r\n          \r\n          // callback\r\n          loadCubismExpression()\r\n        })\r\n      \r\n      this.state = LoadStep.WaitLoadModel\r\n    } else {\r\n      LAppPal.printMessage('Model data does not exist.')\r\n    }\r\n    \r\n    // Expression\r\n    const loadCubismExpression = (): void => {\r\n      if (this.modelSetting.getExpressionCount() > 0) {\r\n        const count: number = this.modelSetting.getExpressionCount()\r\n        \r\n        for (let i = 0; i < count; i++) {\r\n          const expressionName = this.modelSetting.getExpressionName(i)\r\n          const expressionFileName =\r\n            this.modelSetting.getExpressionFileName(i)\r\n          \r\n          fetch(path.join(this.modelHomeDir, expressionFileName))\r\n            .then(response => response.arrayBuffer())\r\n            .then(arrayBuffer => {\r\n              const motion: ACubismMotion = this.loadExpression(\r\n                arrayBuffer,\r\n                arrayBuffer.byteLength,\r\n                expressionName,\r\n              )\r\n              \r\n              if (this.expressions.getValue(expressionName) != null) {\r\n                ACubismMotion.delete(\r\n                  this.expressions.getValue(expressionName),\r\n                )\r\n                this.expressions.setValue(expressionName, null)\r\n              }\r\n              \r\n              this.expressions.setValue(expressionName, motion)\r\n              \r\n              this.expressionCount++\r\n              \r\n              if (this.expressionCount >= count) {\r\n                this.state = LoadStep.LoadPhysics\r\n                \r\n                // callback\r\n                loadCubismPhysics()\r\n              }\r\n            })\r\n        }\r\n        this.state = LoadStep.WaitLoadExpression\r\n      } else {\r\n        this.state = LoadStep.LoadPhysics\r\n        \r\n        // callback\r\n        loadCubismPhysics()\r\n      }\r\n    }\r\n    \r\n    // Physics\r\n    const loadCubismPhysics = (): void => {\r\n      if (this.modelSetting.getPhysicsFileName() != '') {\r\n        const physicsFileName = this.modelSetting.getPhysicsFileName()\r\n        \r\n        fetch(path.join(this.modelHomeDir, physicsFileName))\r\n          .then(response => response.arrayBuffer())\r\n          .then(arrayBuffer => {\r\n            this.loadPhysics(arrayBuffer, arrayBuffer.byteLength)\r\n            \r\n            this.state = LoadStep.LoadPose\r\n            \r\n            // callback\r\n            loadCubismPose()\r\n          })\r\n        this.state = LoadStep.WaitLoadPhysics\r\n      } else {\r\n        this.state = LoadStep.LoadPose\r\n        \r\n        // callback\r\n        loadCubismPose()\r\n      }\r\n    }\r\n    \r\n    // Pose\r\n    const loadCubismPose = (): void => {\r\n      if (this.modelSetting.getPoseFileName() != '') {\r\n        const poseFileName = this.modelSetting.getPoseFileName()\r\n        \r\n        fetch(path.join(this.modelHomeDir, poseFileName))\r\n          .then(response => response.arrayBuffer())\r\n          .then(arrayBuffer => {\r\n            this.loadPose(arrayBuffer, arrayBuffer.byteLength)\r\n            \r\n            this.state = LoadStep.SetupEyeBlink\r\n            \r\n            // callback\r\n            setupEyeBlink()\r\n          })\r\n        this.state = LoadStep.WaitLoadPose\r\n      } else {\r\n        this.state = LoadStep.SetupEyeBlink\r\n        \r\n        // callback\r\n        setupEyeBlink()\r\n      }\r\n    }\r\n    \r\n    // EyeBlink\r\n    const setupEyeBlink = (): void => {\r\n      if (this.modelSetting.getEyeBlinkParameterCount() > 0) {\r\n        this._eyeBlink = CubismEyeBlink.create(this.modelSetting)\r\n        this.state = LoadStep.SetupBreath\r\n      }\r\n      \r\n      // callback\r\n      setupBreath()\r\n    }\r\n    \r\n    // Breath\r\n    const setupBreath = (): void => {\r\n      this._breath = CubismBreath.create()\r\n      \r\n      const breathParameters: csmVector<BreathParameterData> = new csmVector()\r\n      breathParameters.pushBack(\r\n        new BreathParameterData(this.idParamAngleX, 0.0, 15.0, 6.5345, 0.5),\r\n      )\r\n      breathParameters.pushBack(\r\n        new BreathParameterData(this.idParamAngleY, 0.0, 8.0, 3.5345, 0.5),\r\n      )\r\n      breathParameters.pushBack(\r\n        new BreathParameterData(this.idParamAngleZ, 0.0, 10.0, 5.5345, 0.5),\r\n      )\r\n      breathParameters.pushBack(\r\n        new BreathParameterData(this.idParamBodyAngleX, 0.0, 4.0, 15.5345, 0.5),\r\n      )\r\n      breathParameters.pushBack(\r\n        new BreathParameterData(\r\n          CubismFramework.getIdManager().getId(\r\n            CubismDefaultParameterId.ParamBreath,\r\n          ),\r\n          0.5,\r\n          0.5,\r\n          3.2345,\r\n          1,\r\n        ),\r\n      )\r\n      \r\n      this._breath.setParameters(breathParameters)\r\n      this.state = LoadStep.LoadUserData\r\n      \r\n      // callback\r\n      loadUserData()\r\n    }\r\n    \r\n    // UserData\r\n    const loadUserData = (): void => {\r\n      if (this.modelSetting.getUserDataFile() !== '') {\r\n        const userDataFile = this.modelSetting.getUserDataFile()\r\n        \r\n        fetch(path.join(this.modelHomeDir, userDataFile))\r\n          .then(response => response.arrayBuffer())\r\n          .then(arrayBuffer => {\r\n            this.loadUserData(arrayBuffer, arrayBuffer.byteLength)\r\n            \r\n            this.state = LoadStep.SetupEyeBlinkIds\r\n            \r\n            // callback\r\n            setupEyeBlinkIds()\r\n          })\r\n        \r\n        this.state = LoadStep.WaitLoadUserData\r\n      } else {\r\n        this.state = LoadStep.SetupEyeBlinkIds\r\n        \r\n        // callback\r\n        setupEyeBlinkIds()\r\n      }\r\n    }\r\n    \r\n    // EyeBlinkIds\r\n    const setupEyeBlinkIds = (): void => {\r\n      const eyeBlinkIdCount: number =\r\n        this.modelSetting.getEyeBlinkParameterCount()\r\n      \r\n      for (let i = 0; i < eyeBlinkIdCount; ++i) {\r\n        this.eyeBlinkIds.pushBack(\r\n          this.modelSetting.getEyeBlinkParameterId(i),\r\n        )\r\n      }\r\n      \r\n      this.state = LoadStep.SetupLipSyncIds\r\n      \r\n      // callback\r\n      setupLipSyncIds()\r\n    }\r\n    \r\n    // LipSyncIds\r\n    const setupLipSyncIds = (): void => {\r\n      const lipSyncIdCount = this.modelSetting.getLipSyncParameterCount()\r\n      \r\n      for (let i = 0; i < lipSyncIdCount; ++i) {\r\n        this.lipSyncIds.pushBack(this.modelSetting.getLipSyncParameterId(i))\r\n      }\r\n      this.state = LoadStep.SetupLayout\r\n      \r\n      // callback\r\n      setupLayout()\r\n    }\r\n    \r\n    // Layout\r\n    const setupLayout = (): void => {\r\n      const layout: csmMap<string, number> = new csmMap<string, number>()\r\n      \r\n      if (this.modelSetting === null || this._modelMatrix === null) {\r\n        CubismLogError('Failed to setupLayout().')\r\n        return\r\n      }\r\n      \r\n      this.modelSetting.getLayoutMap(layout)\r\n      this._modelMatrix.setupFromLayout(layout)\r\n      this.state = LoadStep.LoadMotion\r\n      \r\n      // callback\r\n      loadCubismMotion()\r\n    }\r\n    \r\n    // Motion\r\n    const loadCubismMotion = (): void => {\r\n      this.state = LoadStep.WaitLoadMotion\r\n      this.model.saveParameters()\r\n      this.allMotionCount = 0\r\n      this.motionCount = 0\r\n      const group: string[] = []\r\n      \r\n      const motionGroupCount: number = this.modelSetting.getMotionGroupCount()\r\n      \r\n      // 查找动议总数\r\n      for (let i = 0; i < motionGroupCount; i++) {\r\n        group[i] = this.modelSetting.getMotionGroupName(i)\r\n        this.allMotionCount += this.modelSetting.getMotionCount(group[i])\r\n      }\r\n      \r\n      // 导入运动\r\n      for (let i = 0; i < motionGroupCount; i++) {\r\n        this.preLoadMotionGroup(group[i])\r\n      }\r\n      \r\n      // 没有运动时\r\n      if (motionGroupCount == 0) {\r\n        this.reloadTextures()\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 将纹理加载到纹理单元中\r\n   */\r\n  private setupTextures(): void {\r\n    // iPhone手机使用预乘的 Alpha 来提高 Alpha 质量\r\n    const usePremultiply = true\r\n    \r\n    if (this.state === LoadStep.LoadTexture) {\r\n      // 用于纹理加载\r\n      const textureCount: number = this.modelSetting.getTextureCount()\r\n      \r\n      for (let index = 0; index < textureCount; index++) {\r\n        // 如果纹理名称为空，请跳过加载绑定过程\r\n        if (this.modelSetting.getTextureFileName(index) === '') {\r\n          LAppPal.printMessage('getTextureFileName null')\r\n          continue\r\n        }\r\n        \r\n        // 将纹理加载到 WebGL 中的纹理单元中\r\n        const textureName = this.modelSetting.getTextureFileName(index)\r\n        const texturePath = path.join(this.modelHomeDir, textureName)\r\n        \r\n        // 加载完成时调用的回调函数\r\n        const onLoad = (textureInfo: TextureInfo): void => {\r\n          this.getRenderer()?.bindTexture(index, textureInfo.id)\r\n          \r\n          this.textureCount++\r\n          \r\n          if (this.textureCount >= textureCount) {\r\n            // 加载完成\r\n            this.state = LoadStep.CompleteSetup\r\n          }\r\n        }\r\n        \r\n        // 负荷\r\n        LAppDelegate.instance.textureManager.createTextureFromPngFile(texturePath, usePremultiply, onLoad)\r\n        this.getRenderer()?.setIsPremultipliedAlpha(usePremultiply)\r\n      }\r\n      \r\n      this.state = LoadStep.WaitLoadTexture\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 重新生成渲染器\r\n   */\r\n  public reloadRenderer(): void {\r\n    this.deleteRenderer()\r\n    this.createRenderer()\r\n    this.setupTextures()\r\n  }\r\n  \r\n  /**\r\n   * 更新\r\n   */\r\n  public update(): void {\r\n    if (this.state != LoadStep.CompleteSetup) return\r\n    \r\n    const deltaTimeSeconds: number = LAppPal.getDeltaTime()\r\n    this.userTimeSeconds += deltaTimeSeconds\r\n    \r\n    this._dragManager.update(deltaTimeSeconds)\r\n    this._dragX = this._dragManager.getX()\r\n    this._dragY = this._dragManager.getY()\r\n    \r\n    // 参数是否通过运动更新\r\n    let motionUpdated = false\r\n    \r\n    //--------------------------------------------------------------------------\r\n    this.model.loadParameters() // 加载上次保存的状态\r\n    if (this._motionManager.isFinished()) {\r\n      // 如果没有动作播放，它将从等待的动作中随机播放。\r\n      this.startRandomMotion(MotionGroup.Idle, Priority.Idle)\r\n    } else {\r\n      const normal = this._motionManager.updateMotion(this.model, deltaTimeSeconds) // 更新运动\r\n      const rightArm = this._rightArmMotionManager.updateMotion(this.model, deltaTimeSeconds)   // <追加\r\n      const leftArm = this._leftArmMotionManager.updateMotion(this.model, deltaTimeSeconds)    // <追加\r\n      \r\n      motionUpdated = [ normal, rightArm, leftArm ].some(k => k)\r\n    }\r\n    this.model.saveParameters() // 保存状态\r\n    //--------------------------------------------------------------------------\r\n    \r\n    // 眨眼\r\n    if (!motionUpdated) {\r\n      // 当没有主运动更新时\r\n      this._eyeBlink?.updateParameters(this.model, deltaTimeSeconds) // 眨眼\r\n    }\r\n    \r\n    this._expressionManager?.updateMotion(this.model, deltaTimeSeconds) // 使用面部表情更新参数（相对变化）\r\n    \r\n    // 拖动引起的更改\r\n    // 通过拖动调整面部方向\r\n    this.model.addParameterValueById(this.idParamAngleX, this._dragX * 30) // 将 -30 之间的值添加到 30\r\n    this.model.addParameterValueById(this.idParamAngleY, this._dragY * 30)\r\n    this.model.addParameterValueById(this.idParamAngleZ, this._dragX * this._dragY * -30)\r\n    \r\n    // 通过拖动调整身体方向\r\n    this.model.addParameterValueById(this.idParamBodyAngleX, this._dragX * 10) // 将 -10 之间的值添加到 10\r\n    \r\n    // 通过拖动调整眼睛方向\r\n    this.model.addParameterValueById(this.idParamEyeBallX, this._dragX) // 将值 -1 添加到 1\r\n    this.model.addParameterValueById(this.idParamEyeBallY, this._dragY)\r\n    \r\n    // 呼吸等。\r\n    this._breath?.updateParameters(this.model, deltaTimeSeconds)\r\n    \r\n    // 设置物理场\r\n    this._physics?.evaluate(this.model, deltaTimeSeconds)\r\n    \r\n    // 口型同步设置\r\n    if (this._lipsync) {\r\n      this.wavFileHandler?.update(deltaTimeSeconds)\r\n      // 对于实时口型同步，请从系统获取音量并输入 0~1 范围内的值。\r\n      const value = this.wavFileHandler.getRms()\r\n      \r\n      for (let i = 0; i < this.lipSyncIds.getSize(); ++i) {\r\n        this.model.addParameterValueById(this.lipSyncIds.at(i), value, 0.8)\r\n      }\r\n    }\r\n    \r\n    // 姿势设置\r\n    this._pose?.updateParameters(this.model, deltaTimeSeconds)\r\n    \r\n    this.model.update()\r\n  }\r\n  \r\n  /**\r\n   * 开始播放参数指定的运动\r\n   * @param group 运动组名称\r\n   * @param no 组中的数字\r\n   * @param priority 优先权\r\n   * @param onFinishedMotionHandler 在动作播放结束时调用的回调函数\r\n   * @return 返回已开始的运动的标识号。 在参数 is Done（） 中使用，以确定单个运动是否已结束。 如果无法启动[-1]\r\n   */\r\n  public startMotion(\r\n    group: string,\r\n    no: number,\r\n    priority: number,\r\n    onFinishedMotionHandler?: FinishedMotionCallback,\r\n  ): CubismMotionQueueEntryHandle {\r\n    if (priority == Priority.Force) {\r\n      this._motionManager.setReservePriority(priority)\r\n    } else if (!this._motionManager.reserveMotion(priority)) {\r\n      if (this._debugMode) {\r\n        LAppPal.printMessage('[APP]can\\'t start motion.')\r\n      }\r\n      return InvalidMotionQueueEntryHandleValue\r\n    }\r\n    \r\n    const { motion, autoDelete } = this.getMotion(group, no, onFinishedMotionHandler)\r\n    \r\n    //voice\r\n    const voice = this.modelSetting.getMotionSoundFileName(group, no)\r\n    if (voice.localeCompare('') != 0) {\r\n      let path = this.modelHomeDir + voice\r\n      this.wavFileHandler.start(path).catch()\r\n    }\r\n    \r\n    if (this._debugMode) {\r\n      LAppPal.printMessage(`[APP]start motion: [${ group }_${ no }`)\r\n    }\r\n    return this._motionManager.startMotionPriority(motion, autoDelete, priority)\r\n  }\r\n  \r\n  /**\r\n   * 开始播放随机选择的动作。\r\n   * @param group 运动组名称\r\n   * @param priority 优先权\r\n   * @param onFinishedMotionHandler 在动作播放结束时调用的回调函数\r\n   * @return 返回已开始的运动的标识号。 在参数 is Done（） 中使用，以确定单个运动是否已结束。 如果无法启动[-1]\r\n   */\r\n  public startRandomMotion(\r\n    group: string,\r\n    priority: number,\r\n    onFinishedMotionHandler?: FinishedMotionCallback,\r\n  ): CubismMotionQueueEntryHandle {\r\n    if (this.modelSetting.getMotionCount(group) == 0) {\r\n      return InvalidMotionQueueEntryHandleValue\r\n    }\r\n    \r\n    const no: number = Math.floor(Math.random() * this.modelSetting.getMotionCount(group))\r\n    \r\n    return this.startMotion(group, no, priority, onFinishedMotionHandler)\r\n  }\r\n  \r\n  public getMotion(group: string, no: number, onFinishedMotionHandler?: FinishedMotionCallback) {\r\n    const motionFileName = this.modelSetting.getMotionFileName(group, no)\r\n    \r\n    // ex) idle_0\r\n    const name = `${ group }_${ no }`\r\n    let motion: CubismMotion = this.motions.getValue(name) as CubismMotion\r\n    let autoDelete = false\r\n    \r\n    const srcPath = path.join(this.modelHomeDir, motionFileName)\r\n    if (motion == null) {\r\n      fetch(srcPath)\r\n        .then(response => response.arrayBuffer())\r\n        .then(arrayBuffer => {\r\n          motion = this.loadMotion(arrayBuffer, arrayBuffer.byteLength, null, onFinishedMotionHandler)\r\n          \r\n          let fadeTime: number = this.modelSetting.getMotionFadeInTimeValue(group, no)\r\n          if (fadeTime >= 0.0) {\r\n            motion.setFadeInTime(fadeTime)\r\n          }\r\n          \r\n          fadeTime = this.modelSetting.getMotionFadeOutTimeValue(group, no)\r\n          if (fadeTime >= 0.0) {\r\n            motion.setFadeOutTime(fadeTime)\r\n          }\r\n          \r\n          motion.setEffectIds(this.eyeBlinkIds, this.lipSyncIds)\r\n          autoDelete = true // 退出时从内存中删除\r\n        })\r\n    } else {\r\n      motion.setFinishedMotionHandler(onFinishedMotionHandler)\r\n    }\r\n    \r\n    return { motion, autoDelete }\r\n  }\r\n  \r\n  // 通过从StartMotion复制创建\r\n  public startHandMotion(\r\n    targetManage: CubismMotionManager,\r\n    group: string,\r\n    no: number,\r\n    priority: number,\r\n    onFinishedMotionHandler?: FinishedMotionCallback,\r\n  ): CubismMotionQueueEntryHandle {\r\n    if (priority == Priority.Force) {\r\n      targetManage.setReservePriority(priority)\r\n    } else if (!targetManage.reserveMotion(priority)) {\r\n      if (this._debugMode) {\r\n        LAppPal.printMessage('[APP]can\\'t start motion.')\r\n      }\r\n      return InvalidMotionQueueEntryHandleValue\r\n    }\r\n    \r\n    const { motion, autoDelete } = this.getMotion(group, no, onFinishedMotionHandler)\r\n    \r\n    //voice\r\n    const voice = this.modelSetting.getMotionSoundFileName(group, no)\r\n    if (voice.localeCompare('') != 0) {\r\n      let path = this.modelHomeDir + voice\r\n      this.wavFileHandler.start(path).catch()\r\n    }\r\n    \r\n    if (this._debugMode) {\r\n      LAppPal.printMessage(`[APP]start motion: ${ name }`)\r\n    }\r\n    return targetManage.startMotionPriority(motion, autoDelete, priority)\r\n  }\r\n  \r\n  // 通过startRandomMotion复制创建\r\n  public startRandomRightHandMotion(\r\n    group: string,\r\n    priority: number,\r\n    onFinishedMotionHandler?: FinishedMotionCallback,\r\n  ): CubismMotionQueueEntryHandle {\r\n    if (this.modelSetting.getMotionCount(group) == 0) {\r\n      return InvalidMotionQueueEntryHandleValue\r\n    }\r\n    let no: number = Math.floor(Math.random() * this.modelSetting.getMotionCount(group))\r\n    \r\n    return this.startHandMotion(this._rightArmMotionManager, group, no, priority, onFinishedMotionHandler)\r\n  }\r\n  \r\n  // 通过startRandomMotion复制创建\r\n  public startRandomLeftHandMotion(\r\n    group: string,\r\n    priority: number,\r\n    onFinishedMotionHandler?: FinishedMotionCallback,\r\n  ): CubismMotionQueueEntryHandle {\r\n    if (this.modelSetting.getMotionCount(group) == 0) {\r\n      return InvalidMotionQueueEntryHandleValue\r\n    }\r\n    let no: number = Math.floor(Math.random() * this.modelSetting.getMotionCount(group))\r\n    return this.startHandMotion(this._leftArmMotionManager, group, no, priority, onFinishedMotionHandler)\r\n  }\r\n  \r\n  /**\r\n   * 设置参数指定的面部表情动作\r\n   *\r\n   * @param expressionId 面部表情运动 ID\r\n   */\r\n  public setExpression(expressionId: string): void {\r\n    const motion: ACubismMotion = this.expressions.getValue(expressionId)\r\n    \r\n    if (this._debugMode) {\r\n      LAppPal.printMessage(`[APP]expression: [${ expressionId }]`)\r\n    }\r\n    \r\n    if (motion != null) {\r\n      this._expressionManager.startMotionPriority(motion, false, Priority.Force)\r\n    } else {\r\n      if (this._debugMode) {\r\n        LAppPal.printMessage(`[APP]expression[${ expressionId }] is null`)\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 设置随机选择的面部表情动作\r\n   * expressions/[random_expression_name].exp3.json\r\n   */\r\n  public setRandomExpression(): void {\r\n    if (this.expressions.getSize() == 0) {\r\n      return\r\n    }\r\n    \r\n    const no: number = Math.floor(Math.random() * this.expressions.getSize())\r\n    \r\n    for (let i = 0; i < this.expressions.getSize(); i++) {\r\n      if (i == no) {\r\n        const name: string = this.expressions._keyValues[i].first\r\n        this.setExpression(name)\r\n        return\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 接收事件的触发\r\n   */\r\n  public motionEventFired(eventValue: csmString): void {\r\n    CubismLogInfo('{0} is fired on LAppModel!!', eventValue.s)\r\n  }\r\n  \r\n  /**\r\n   * 是否命中透明物\r\n   * @returns {boolean}\r\n   */\r\n  public hitOpacity() {\r\n    return this._opacity < 1\r\n  }\r\n  \r\n  /**\r\n   * 命中测试\r\n   * 根据指定ID的顶点列表计算一个矩形，并确定坐标在矩形范围内。\r\n   *\r\n   * @param hitArenaName  要测试命中确定的目标的 ID\r\n   * @param x             X 坐标做出判断\r\n   * @param y             Y坐标做出判断\r\n   */\r\n  public hitTest(hitArenaName: string, x: number, y: number): boolean {\r\n    // 当透明时，没有命中判断。\r\n    if (this.hitOpacity()) {\r\n      return false\r\n    }\r\n    \r\n    const count: number = this.modelSetting.getHitAreasCount()\r\n    \r\n    for (let i = 0; i < count; i++) {\r\n      if (this.modelSetting.getHitAreaName(i) == hitArenaName) {\r\n        const drawId: CubismIdHandle = this.modelSetting.getHitAreaId(i)\r\n        return this.isHit(drawId, x, y)\r\n      }\r\n    }\r\n    \r\n    return false\r\n  }\r\n  \r\n  /**\r\n   * 从组名批量加载运动数据。\r\n   * 运动数据的名称是从“模型设置”内部获取的。\r\n   *\r\n   * @param group 运动数据的组名称\r\n   */\r\n  public preLoadMotionGroup(group: string): void {\r\n    for (let i = 0; i < this.modelSetting.getMotionCount(group); i++) {\r\n      const motionFileName = this.modelSetting.getMotionFileName(group, i)\r\n      \r\n      // ex) idle_0\r\n      const name = `${ group }_${ i }`\r\n      if (this._debugMode) {\r\n        LAppPal.printMessage(`[APP]load motion: ${ motionFileName } => [${ name }]`)\r\n      }\r\n      \r\n      fetch(path.join(this.modelHomeDir, motionFileName))\r\n        .then(response => response.arrayBuffer())\r\n        .then(arrayBuffer => {\r\n          const tmpMotion: CubismMotion = this.loadMotion(\r\n            arrayBuffer,\r\n            arrayBuffer.byteLength,\r\n            name,\r\n          )\r\n          \r\n          let fadeTime = this.modelSetting.getMotionFadeInTimeValue(group, i)\r\n          if (fadeTime >= 0.0) {\r\n            tmpMotion.setFadeInTime(fadeTime)\r\n          }\r\n          \r\n          fadeTime = this.modelSetting.getMotionFadeOutTimeValue(group, i)\r\n          if (fadeTime >= 0.0) {\r\n            tmpMotion.setFadeOutTime(fadeTime)\r\n          }\r\n          tmpMotion.setEffectIds(this.eyeBlinkIds, this.lipSyncIds)\r\n          \r\n          if (this.motions.getValue(name) != null) {\r\n            ACubismMotion.delete(this.motions.getValue(name))\r\n          }\r\n          \r\n          this.motions.setValue(name, tmpMotion)\r\n          \r\n          this.motionCount++\r\n          if (this.motionCount >= this.allMotionCount) {\r\n            this.reloadTextures()\r\n          }\r\n        })\r\n    }\r\n  }\r\n  \r\n  private reloadTextures(): void {\r\n    this.state = LoadStep.LoadTexture\r\n    \r\n    // 停止所有运动\r\n    this._motionManager?.stopAllMotions()\r\n    \r\n    this._updating = false\r\n    this._initialized = true\r\n    \r\n    this.createRenderer()\r\n    \r\n    this.setupTextures()\r\n    this.getRenderer().startUp(LAppDelegate.gl)\r\n  }\r\n  \r\n  /**\r\n   * 释放所有运动数据。\r\n   */\r\n  public releaseMotions(): void {\r\n    this.motions.clear()\r\n  }\r\n  \r\n  /**\r\n   * 释放所有面部表情数据。\r\n   */\r\n  public releaseExpressions(): void {\r\n    this.expressions.clear()\r\n  }\r\n  \r\n  /**\r\n   * 绘制模型的过程。 传递要在其中绘制模型的空间的视图投影矩阵。\r\n   */\r\n  public doDraw(): void {\r\n    if (this.model == null) return\r\n    \r\n    // 传递画布大小\r\n    const viewport: number[] = [\r\n      0,\r\n      0,\r\n      LAppDelegate.canvas.width,\r\n      LAppDelegate.canvas.height,\r\n    ]\r\n    \r\n    this.getRenderer().setRenderState(LAppDelegate.frameBuffer, viewport)\r\n    this.getRenderer().drawModel()\r\n  }\r\n  \r\n  /**\r\n   * 绘制模型的过程。 传递要在其中绘制模型的空间的视图投影矩阵。\r\n   */\r\n  public draw(matrix: CubismMatrix44): void {\r\n    if (this.model === null) {\r\n      return\r\n    }\r\n    \r\n    // 每次导入后\r\n    if (this.state == LoadStep.CompleteSetup) {\r\n      matrix.multiplyByMatrix(this._modelMatrix)\r\n      \r\n      this.getRenderer().setMvpMatrix(matrix)\r\n      \r\n      this.doDraw()\r\n    }\r\n  }\r\n  \r\n  public override release(): void {\r\n    this._leftArmMotionManager.release()\r\n    this._rightArmMotionManager.release()\r\n    this.wavFileHandler.release()\r\n    \r\n    super.release()\r\n  }\r\n}\r\n","import { CubismMatrix44 } from '@framework/math/cubismmatrix44'\r\nimport { ACubismMotion } from '@framework/motion/acubismmotion'\r\nimport { csmVector } from '@framework/type/csmvector'\r\nimport path from 'path'\r\n\r\nimport LAppDefine, { HitArea, MotionGroup, Priority } from './lappdefine'\r\n\r\nimport { LAppDelegate } from './lappdelegate'\r\nimport { LAppModel } from './lappmodel'\r\nimport { LAppPal } from './lapppal'\r\nimport Live2dWidget from './main'\r\n\r\n/**\r\n * 用于在示例应用程序中管理立体主义模型的类\r\n * 创建和销毁模型、处理点击事件以及切换模型。\r\n */\r\nexport class LAppLive2DManager {\r\n  private readonly viewMatrix: CubismMatrix44 // 用于模型绘制的视图矩阵\r\n  private readonly models: csmVector<LAppModel> // 模型实例容器\r\n  private sceneIndex: number // 要显示的场景的索引值\r\n  private static _instance: LAppLive2DManager = null\r\n  \r\n  public static get instance(): LAppLive2DManager {\r\n    return this.initialize()\r\n  }\r\n  \r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.viewMatrix = new CubismMatrix44()\r\n    this.models = new csmVector<LAppModel>()\r\n    this.sceneIndex = 0\r\n    this.changeScene(0)\r\n  }\r\n  \r\n  // 运动播放结束回调函数\r\n  _finishedMotion = (self: ACubismMotion): void => {\r\n    LAppPal.printMessage(`Motion Finished: OK`)\r\n  }\r\n  \r\n  /**\r\n   * 返回类的实例（单一实例）。\r\n   * 如果尚未创建实例，请在内部实例化它。\r\n   *\r\n   * @return 类的实例\r\n   */\r\n  public static initialize(): LAppLive2DManager {\r\n    if (this._instance == null) {\r\n      this._instance = new LAppLive2DManager()\r\n    }\r\n    \r\n    return this._instance\r\n  }\r\n  \r\n  /**\r\n   * 释放类的实例（单例）。\r\n   */\r\n  public static releaseInstance(): void {\r\n    if (this._instance != null) {\r\n      this._instance = void 0\r\n    }\r\n    \r\n    this._instance = null\r\n  }\r\n  \r\n  /**\r\n   * 返回当前场景中持有的模型。\r\n   *\r\n   * @param no 模型列表中的索引值\r\n   * @return 返回模型的实例。 如果索引值超出范围，则返回 NULL。\r\n   */\r\n  public getModel(no: number): LAppModel {\r\n    if (no < this.models.getSize()) {\r\n      return this.models.at(no)\r\n    }\r\n    \r\n    return null\r\n  }\r\n  \r\n  /**\r\n   * 释放当前场景中的所有模型\r\n   */\r\n  public releaseAllModel(): void {\r\n    for (let i = 0; i < this.models.getSize(); i++) {\r\n      this.models.at(i).release()\r\n      this.models.set(i, null)\r\n    }\r\n    \r\n    this.models.clear()\r\n  }\r\n  \r\n  /**\r\n   * 拖动屏幕时会发生什么情况\r\n   *\r\n   * @param x 屏幕的 X 坐标\r\n   * @param y 屏幕 Y 坐标\r\n   */\r\n  public onDrag(x: number, y: number): void {\r\n    for (let i = 0; i < this.models.getSize(); i++) {\r\n      const model: LAppModel = this.getModel(i)\r\n      \r\n      if (model) {\r\n        model.setDragging(x, y)\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 点按屏幕后会发生什么情况\r\n   *\r\n   * @param x 屏幕的 X 坐标\r\n   * @param y 屏幕 Y 坐标\r\n   */\r\n  public onTap(x: number, y: number): void {\r\n    LAppPal.printMessage(`[APP]tap point: {x: ${ x.toFixed(2) } y: ${ y.toFixed(2) }}`)\r\n    \r\n    for (let i = 0; i < this.models.getSize(); i++) {\r\n      const model = this.models.at(i)\r\n      const count = model.modelSetting.getHitAreasCount()\r\n      \r\n      if (count === 0) {\r\n        LAppPal.printMessage(`[APP]hit area: [${ HitArea.Other }]`)\r\n        model.startRandomMotion(MotionGroup.Tap, Priority.Normal, this._finishedMotion)\r\n        Live2dWidget.emit(HitArea.Other)\r\n        return\r\n      }\r\n      \r\n      if (model.hitTest(HitArea.Head, x, y)) {\r\n        LAppPal.printMessage(`[APP]hit area: [${ HitArea.Head }]`)\r\n        model.setRandomExpression()\r\n        Live2dWidget.emit(HitArea.Head)\r\n      } else if (model.hitTest(HitArea.Left, x, y)) {\r\n        LAppPal.printMessage(`[APP]hit area: [${ HitArea.Body + HitArea.Left }]`)\r\n        model.startRandomLeftHandMotion(MotionGroup.TapLeft, Priority.Normal, this._finishedMotion)\r\n        Live2dWidget.emit(HitArea.Left)\r\n      } else if (model.hitTest(HitArea.Right, x, y)) {\r\n        LAppPal.printMessage(`[APP]hit area: [${ HitArea.Body + HitArea.Right }]`)\r\n        model.startRandomRightHandMotion(MotionGroup.TapRight, Priority.Normal, this._finishedMotion)\r\n        Live2dWidget.emit(HitArea.Right)\r\n      } else if (model.hitTest(HitArea.Body, x, y)) {\r\n        LAppPal.printMessage(`[APP]hit area: [${ HitArea.Body }]`)\r\n        model.startRandomMotion(MotionGroup.TapBody, Priority.Normal, this._finishedMotion)\r\n        Live2dWidget.emit(HitArea.Body)\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 刷新屏幕时会发生什么情况\r\n   * 执行模型更新处理和图纸处理\r\n   */\r\n  public onUpdate(): void {\r\n    const { width, height } = LAppDelegate.canvas\r\n    \r\n    const modelCount: number = this.models.getSize()\r\n    \r\n    for (let i = 0; i < modelCount; ++i) {\r\n      const projection: CubismMatrix44 = new CubismMatrix44()\r\n      const model: LAppModel = this.getModel(i)\r\n      \r\n      if (model.getModel()) {\r\n        if (model.getModel().getCanvasWidth() > 1.0 && width < height) {\r\n          // 在垂直窗口中显示长水平模型时，请根据模型的水平大小计算比例。\r\n          model.getModelMatrix().setWidth(2.0)\r\n          projection.scale(1.0, width / height)\r\n        } else {\r\n          projection.scale(height / width, 1.0)\r\n        }\r\n        \r\n        // 如有必要，请在此处乘法\r\n        projection.multiplyByMatrix(this.viewMatrix)\r\n      }\r\n      \r\n      model.update()\r\n      model.draw(projection) // 由于它是通过引用传递的，因此投影会发生变化。\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 切换到上一个场景\r\n   * 在示例应用程序中，模型集已切换。\r\n   */\r\n  public prevScene(): void {\r\n    const no: number = (this.sceneIndex - 1) % LAppDefine.source.models.length\r\n    this.changeScene(no)\r\n  }\r\n  \r\n  /**\r\n   * 切换到下一个场景\r\n   * 在示例应用程序中，模型集已切换。\r\n   */\r\n  public nextScene(): void {\r\n    const no: number = (this.sceneIndex + 1) % LAppDefine.source.models.length\r\n    this.changeScene(no)\r\n  }\r\n  \r\n  /**\r\n   * 在场景之间切换\r\n   * 在示例应用程序中，模型集已切换。\r\n   */\r\n  public changeScene(index: number): void {\r\n    this.sceneIndex = index\r\n    LAppPal.printMessage(`[APP]model index: ${ this.sceneIndex }`)\r\n    \r\n    const model: string = LAppDefine.source.models.at(index)\r\n    const modelPath: string = path.join(LAppDefine.source.path, model)\r\n    let modelJsonName: string = `${ model }.model3.json`\r\n    \r\n    this.releaseAllModel()\r\n    this.models.pushBack(new LAppModel())\r\n    this.models.at(0).loadAssets(modelPath, modelJsonName)\r\n  }\r\n  \r\n  public setViewMatrix(m: CubismMatrix44) {\r\n    for (let i = 0; i < 16; i++) {\r\n      this.viewMatrix.getArray()[i] = m.getArray()[i]\r\n    }\r\n  }\r\n}\r\n","import { csmVector, iterator } from '@framework/type/csmvector'\r\n\r\nimport { LAppDelegate } from './lappdelegate'\r\n\r\n/**\r\n * 纹理管理类\r\n * 加载和管理图像的类。\r\n */\r\nexport class LAppTextureManager {\r\n  textures: csmVector<TextureInfo>\r\n  \r\n  /**\r\n   * 构造 函数\r\n   */\r\n  constructor() {\r\n    this.textures = new csmVector<TextureInfo>()\r\n  }\r\n  \r\n  /**\r\n   * 解放。\r\n   */\r\n  public release(): void {\r\n    for (\r\n      let ite: iterator<TextureInfo> = this.textures.begin();\r\n      ite.notEqual(this.textures.end());\r\n      ite.preIncrement()\r\n    ) {\r\n      LAppDelegate.gl.deleteTexture(ite.ptr().id)\r\n    }\r\n    this.textures = new csmVector<TextureInfo>()\r\n  }\r\n  \r\n  /**\r\n   * 图像加载\r\n   *\r\n   * @param fileName 要导入的图像文件路径名\r\n   * @param usePremultiply Premult是否要启用处理？\r\n   * @param callback\r\n   * @return 图像信息，加载失败时返回空值\r\n   */\r\n  public createTextureFromPngFile(\r\n    fileName: string,\r\n    usePremultiply: boolean,\r\n    callback: (textureInfo: TextureInfo) => void,\r\n  ): void {\r\n    // search loaded texture already\r\n    for (\r\n      let ite: iterator<TextureInfo> = this.textures.begin();\r\n      ite.notEqual(this.textures.end());\r\n      ite.preIncrement()\r\n    ) {\r\n      if (\r\n        ite.ptr().fileName == fileName &&\r\n        ite.ptr().usePremultply == usePremultiply\r\n      ) {\r\n        // 缓存在第二次使用后使用（无需等待）\r\n        // Web 工具包需要重新实例才能再次调用同一映像的加载\r\n        // 细节：https://stackoverflow.com/a/5024181\r\n        ite.ptr().img = new Image()\r\n        ite.ptr().img.onload = (): void => callback(ite.ptr())\r\n        ite.ptr().img.src = fileName\r\n        return\r\n      }\r\n    }\r\n    \r\n    // 触发数据加载\r\n    const img = new Image()\r\n    img.onload = (): void => {\r\n      const gl = LAppDelegate.gl\r\n      // 创建纹理对象\r\n      const tex: WebGLTexture = gl.createTexture()\r\n      \r\n      // 选择纹理\r\n      gl.bindTexture(gl.TEXTURE_2D, tex)\r\n      \r\n      // 将像素写入纹理\r\n      gl.texParameteri(\r\n        gl.TEXTURE_2D,\r\n        gl.TEXTURE_MIN_FILTER,\r\n        gl.LINEAR_MIPMAP_LINEAR,\r\n      )\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)\r\n      \r\n      // 让Premult这个过程完成\r\n      if (usePremultiply) {\r\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1)\r\n      }\r\n      \r\n      // 将像素写入纹理\r\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img)\r\n      \r\n      // 生成 Mipmap\r\n      gl.generateMipmap(gl.TEXTURE_2D)\r\n      \r\n      // テクスチャをバインド\r\n      gl.bindTexture(gl.TEXTURE_2D, null)\r\n      \r\n      const textureInfo: TextureInfo = new TextureInfo()\r\n      if (textureInfo != null) {\r\n        textureInfo.fileName = fileName\r\n        textureInfo.width = img.width\r\n        textureInfo.height = img.height\r\n        textureInfo.id = tex\r\n        textureInfo.img = img\r\n        textureInfo.usePremultply = usePremultiply\r\n        this.textures.pushBack(textureInfo)\r\n      }\r\n      \r\n      callback(textureInfo)\r\n    }\r\n    img.src = fileName\r\n  }\r\n  \r\n  /**\r\n   * 释放图像\r\n   *\r\n   * 释放阵列中的所有图像。\r\n   */\r\n  public releaseTextures(): void {\r\n    for (let i = 0; i < this.textures.getSize(); i++) {\r\n      this.textures.set(i, null)\r\n    }\r\n    \r\n    this.textures.clear()\r\n  }\r\n  \r\n  /**\r\n   * 释放图像\r\n   *\r\n   * 释放指定纹理的图像。\r\n   * @param texture 要释放的纹理\r\n   */\r\n  public releaseTextureByTexture(texture: WebGLTexture): void {\r\n    for (let i = 0; i < this.textures.getSize(); i++) {\r\n      if (this.textures.at(i).id != texture) {\r\n        continue\r\n      }\r\n      \r\n      this.textures.set(i, null)\r\n      this.textures.remove(i)\r\n      break\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 释放图像\r\n   *\r\n   * 释放指定名称的映像。\r\n   * @param fileName 解放する画像ファイルパス名\r\n   */\r\n  public releaseTextureByFilePath(fileName: string): void {\r\n    for (let i = 0; i < this.textures.getSize(); i++) {\r\n      if (this.textures.at(i).fileName == fileName) {\r\n        this.textures.set(i, null)\r\n        this.textures.remove(i)\r\n        break\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 图像信息结构\r\n */\r\nexport class TextureInfo {\r\n  img: HTMLImageElement // 图像\r\n  id: WebGLTexture = null // 质地\r\n  width = 0 // 宽度\r\n  height = 0 // 高度\r\n  usePremultply: boolean // 是否要启用预置处理？\r\n  fileName: string // 文件名\r\n}\r\n","/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismMatrix44 } from './cubismmatrix44';\r\n\r\n/**\r\n * カメラの位置変更に使うと便利な4x4行列\r\n *\r\n * カメラの位置変更に使うと便利な4x4行列のクラス。\r\n */\r\nexport class CubismViewMatrix extends CubismMatrix44 {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    super();\r\n    this._screenLeft = 0.0;\r\n    this._screenRight = 0.0;\r\n    this._screenTop = 0.0;\r\n    this._screenBottom = 0.0;\r\n    this._maxLeft = 0.0;\r\n    this._maxRight = 0.0;\r\n    this._maxTop = 0.0;\r\n    this._maxBottom = 0.0;\r\n    this._maxScale = 0.0;\r\n    this._minScale = 0.0;\r\n  }\r\n\r\n  /**\r\n   * 移動を調整\r\n   *\r\n   * @param x X軸の移動量\r\n   * @param y Y軸の移動量\r\n   */\r\n  public adjustTranslate(x: number, y: number): void {\r\n    if (this._tr[0] * this._maxLeft + (this._tr[12] + x) > this._screenLeft) {\r\n      x = this._screenLeft - this._tr[0] * this._maxLeft - this._tr[12];\r\n    }\r\n\r\n    if (this._tr[0] * this._maxRight + (this._tr[12] + x) < this._screenRight) {\r\n      x = this._screenRight - this._tr[0] * this._maxRight - this._tr[12];\r\n    }\r\n\r\n    if (this._tr[5] * this._maxTop + (this._tr[13] + y) < this._screenTop) {\r\n      y = this._screenTop - this._tr[5] * this._maxTop - this._tr[13];\r\n    }\r\n\r\n    if (\r\n      this._tr[5] * this._maxBottom + (this._tr[13] + y) >\r\n      this._screenBottom\r\n    ) {\r\n      y = this._screenBottom - this._tr[5] * this._maxBottom - this._tr[13];\r\n    }\r\n\r\n    const tr1: Float32Array = new Float32Array([\r\n      1.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      1.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      1.0,\r\n      0.0,\r\n      x,\r\n      y,\r\n      0.0,\r\n      1.0,\r\n    ]);\r\n\r\n    CubismMatrix44.multiply(tr1, this._tr, this._tr);\r\n  }\r\n\r\n  /**\r\n   * 拡大率を調整\r\n   *\r\n   * @param cx 拡大を行うX軸の中心位置\r\n   * @param cy 拡大を行うY軸の中心位置\r\n   * @param scale 拡大率\r\n   */\r\n  public adjustScale(cx: number, cy: number, scale: number): void {\r\n    const maxScale: number = this.getMaxScale();\r\n    const minScale: number = this.getMinScale();\r\n\r\n    const targetScale = scale * this._tr[0];\r\n\r\n    if (targetScale < minScale) {\r\n      if (this._tr[0] > 0.0) {\r\n        scale = minScale / this._tr[0];\r\n      }\r\n    } else if (targetScale > maxScale) {\r\n      if (this._tr[0] > 0.0) {\r\n        scale = maxScale / this._tr[0];\r\n      }\r\n    }\r\n\r\n    const tr1: Float32Array = new Float32Array([\r\n      1.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      1.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      1.0,\r\n      0.0,\r\n      cx,\r\n      cy,\r\n      0.0,\r\n      1.0,\r\n    ]);\r\n\r\n    const tr2: Float32Array = new Float32Array([\r\n      scale,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      scale,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      1.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      1.0,\r\n    ]);\r\n\r\n    const tr3: Float32Array = new Float32Array([\r\n      1.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      1.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      1.0,\r\n      0.0,\r\n      -cx,\r\n      -cy,\r\n      0.0,\r\n      1.0,\r\n    ]);\r\n\r\n    CubismMatrix44.multiply(tr3, this._tr, this._tr);\r\n    CubismMatrix44.multiply(tr2, this._tr, this._tr);\r\n    CubismMatrix44.multiply(tr1, this._tr, this._tr);\r\n  }\r\n\r\n  /**\r\n   * デバイスに対応する論理座養生の範囲の設定\r\n   *\r\n   * @param left      左辺のX軸の位置\r\n   * @param right     右辺のX軸の位置\r\n   * @param bottom    下辺のY軸の位置\r\n   * @param top       上辺のY軸の位置\r\n   */\r\n  public setScreenRect(\r\n    left: number,\r\n    right: number,\r\n    bottom: number,\r\n    top: number\r\n  ): void {\r\n    this._screenLeft = left;\r\n    this._screenRight = right;\r\n    this._screenBottom = bottom;\r\n    this._screenTop = top;\r\n  }\r\n\r\n  /**\r\n   * デバイスに対応する論理座標上の移動可能範囲の設定\r\n   * @param left      左辺のX軸の位置\r\n   * @param right     右辺のX軸の位置\r\n   * @param bottom    下辺のY軸の位置\r\n   * @param top       上辺のY軸の位置\r\n   */\r\n  public setMaxScreenRect(\r\n    left: number,\r\n    right: number,\r\n    bottom: number,\r\n    top: number\r\n  ): void {\r\n    this._maxLeft = left;\r\n    this._maxRight = right;\r\n    this._maxTop = top;\r\n    this._maxBottom = bottom;\r\n  }\r\n\r\n  /**\r\n   * 最大拡大率の設定\r\n   * @param maxScale 最大拡大率\r\n   */\r\n  public setMaxScale(maxScale: number): void {\r\n    this._maxScale = maxScale;\r\n  }\r\n\r\n  /**\r\n   * 最小拡大率の設定\r\n   * @param minScale 最小拡大率\r\n   */\r\n  public setMinScale(minScale: number): void {\r\n    this._minScale = minScale;\r\n  }\r\n\r\n  /**\r\n   * 最大拡大率の取得\r\n   * @return 最大拡大率\r\n   */\r\n  public getMaxScale(): number {\r\n    return this._maxScale;\r\n  }\r\n\r\n  /**\r\n   * 最小拡大率の取得\r\n   * @return 最小拡大率\r\n   */\r\n  public getMinScale(): number {\r\n    return this._minScale;\r\n  }\r\n\r\n  /**\r\n   * 拡大率が最大になっているかを確認する\r\n   *\r\n   * @return true 拡大率は最大\r\n   * @return false 拡大率は最大ではない\r\n   */\r\n  public isMaxScale(): boolean {\r\n    return this.getScaleX() >= this._maxScale;\r\n  }\r\n\r\n  /**\r\n   * 拡大率が最小になっているかを確認する\r\n   *\r\n   * @return true 拡大率は最小\r\n   * @return false 拡大率は最小ではない\r\n   */\r\n  public isMinScale(): boolean {\r\n    return this.getScaleX() <= this._minScale;\r\n  }\r\n\r\n  /**\r\n   * デバイスに対応する論理座標の左辺のＸ軸位置を取得する\r\n   * @return デバイスに対応する論理座標の左辺のX軸位置\r\n   */\r\n  public getScreenLeft(): number {\r\n    return this._screenLeft;\r\n  }\r\n\r\n  /**\r\n   * デバイスに対応する論理座標の右辺のＸ軸位置を取得する\r\n   * @return デバイスに対応する論理座標の右辺のX軸位置\r\n   */\r\n  public getScreenRight(): number {\r\n    return this._screenRight;\r\n  }\r\n\r\n  /**\r\n   * デバイスに対応する論理座標の下辺のY軸位置を取得する\r\n   * @return デバイスに対応する論理座標の下辺のY軸位置\r\n   */\r\n  public getScreenBottom(): number {\r\n    return this._screenBottom;\r\n  }\r\n\r\n  /**\r\n   * デバイスに対応する論理座標の上辺のY軸位置を取得する\r\n   * @return デバイスに対応する論理座標の上辺のY軸位置\r\n   */\r\n  public getScreenTop(): number {\r\n    return this._screenTop;\r\n  }\r\n\r\n  /**\r\n   * 左辺のX軸位置の最大値の取得\r\n   * @return 左辺のX軸位置の最大値\r\n   */\r\n  public getMaxLeft(): number {\r\n    return this._maxLeft;\r\n  }\r\n\r\n  /**\r\n   * 右辺のX軸位置の最大値の取得\r\n   * @return 右辺のX軸位置の最大値\r\n   */\r\n  public getMaxRight(): number {\r\n    return this._maxRight;\r\n  }\r\n\r\n  /**\r\n   * 下辺のY軸位置の最大値の取得\r\n   * @return 下辺のY軸位置の最大値\r\n   */\r\n  public getMaxBottom(): number {\r\n    return this._maxBottom;\r\n  }\r\n\r\n  /**\r\n   * 上辺のY軸位置の最大値の取得\r\n   * @return 上辺のY軸位置の最大値\r\n   */\r\n  public getMaxTop(): number {\r\n    return this._maxTop;\r\n  }\r\n\r\n  private _screenLeft: number; // デバイスに対応する論理座標上の範囲（左辺X軸位置）\r\n  private _screenRight: number; // デバイスに対応する論理座標上の範囲（右辺X軸位置）\r\n  private _screenTop: number; // デバイスに対応する論理座標上の範囲（上辺Y軸位置）\r\n  private _screenBottom: number; // デバイスに対応する論理座標上の範囲（下辺Y軸位置）\r\n  private _maxLeft: number; // 論理座標上の移動可能範囲（左辺X軸位置）\r\n  private _maxRight: number; // 論理座標上の移動可能範囲（右辺X軸位置）\r\n  private _maxTop: number; // 論理座標上の移動可能範囲（上辺Y軸位置）\r\n  private _maxBottom: number; // 論理座標上の移動可能範囲（下辺Y軸位置）\r\n  private _maxScale: number; // 拡大率の最大値\r\n  private _minScale: number; // 拡大率の最小値\r\n}\r\n\r\n// Namespace definition for compatibility.\r\nimport * as $ from './cubismviewmatrix';\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace Live2DCubismFramework {\r\n  export const CubismViewMatrix = $.CubismViewMatrix;\r\n  export type CubismViewMatrix = $.CubismViewMatrix;\r\n}\r\n","import { LAppDelegate } from './lappdelegate'\r\n\r\n/**\r\n * 实现子画面的类\r\n *\r\n * 纹理 ID，矩形管理\r\n */\r\nexport class LAppSprite {\r\n  texture: WebGLTexture // 质地\r\n  vertexBuffer: WebGLBuffer // 顶点缓冲区\r\n  uvBuffer: WebGLBuffer // uv顶点缓冲区\r\n  indexBuffer: WebGLBuffer // 顶点索引缓冲区\r\n  rect: Rect // 矩形\r\n  \r\n  positionLocation: number\r\n  uvLocation: number\r\n  textureLocation: WebGLUniformLocation\r\n  \r\n  positionArray: Float32Array\r\n  uvArray: Float32Array\r\n  indexArray: Uint16Array\r\n  \r\n  firstDraw: boolean\r\n  hitCallback?: () => void\r\n  \r\n  /**\r\n   * 构造 函数\r\n   * @param x            x坐标\r\n   * @param y            y坐标\r\n   * @param width        宽度\r\n   * @param height       高度\r\n   * @param textureId    质地\r\n   * @param hitCallback\r\n   */\r\n  constructor(\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number,\r\n    textureId: WebGLTexture,\r\n    hitCallback?: () => void\r\n  ) {\r\n    this.rect = new Rect()\r\n    this.rect.left = x - width * 0.5\r\n    this.rect.right = x + width * 0.5\r\n    this.rect.up = y + height * 0.5\r\n    this.rect.down = y - height * 0.5\r\n    this.texture = textureId\r\n    this.vertexBuffer = null\r\n    this.uvBuffer = null\r\n    this.indexBuffer = null\r\n    \r\n    this.positionLocation = null\r\n    this.uvLocation = null\r\n    this.textureLocation = null\r\n    \r\n    this.positionArray = null\r\n    this.uvArray = null\r\n    this.indexArray = null\r\n    \r\n    this.firstDraw = true\r\n    \r\n    this.hitCallback = hitCallback\r\n  }\r\n  \r\n  /**\r\n   * 解放。\r\n   */\r\n  public release(): void {\r\n    this.rect = null\r\n    \r\n    const gl = LAppDelegate.gl\r\n    gl.deleteTexture(this.texture)\r\n    this.texture = null\r\n    \r\n    gl.deleteBuffer(this.uvBuffer)\r\n    this.uvBuffer = null\r\n    \r\n    gl.deleteBuffer(this.vertexBuffer)\r\n    this.vertexBuffer = null\r\n    \r\n    gl.deleteBuffer(this.indexBuffer)\r\n    this.indexBuffer = null\r\n  }\r\n  \r\n  /**\r\n   * 返回纹理\r\n   */\r\n  public getTexture(): WebGLTexture {\r\n    return this.texture\r\n  }\r\n  \r\n  /**\r\n   * 画。\r\n   * @param programId 着色器程序\r\n   */\r\n  public render(programId: WebGLProgram): void {\r\n    if (this.texture == null) {\r\n      // 加载未完成\r\n      return\r\n    }\r\n    \r\n    const gl = LAppDelegate.gl\r\n    // 首次绘制时\r\n    if (this.firstDraw) {\r\n      // 获取属性变量的数量\r\n      this.positionLocation = gl.getAttribLocation(programId, 'position')\r\n      gl.enableVertexAttribArray(this.positionLocation)\r\n      \r\n      this.uvLocation = gl.getAttribLocation(programId, 'uv')\r\n      gl.enableVertexAttribArray(this.uvLocation)\r\n      \r\n      // 获取什么统一变量\r\n      this.textureLocation = gl.getUniformLocation(programId, 'texture')\r\n      \r\n      // uniform注册属性\r\n      gl.uniform1i(this.textureLocation, 0)\r\n      \r\n      // UV缓冲器，坐标初始化\r\n      {\r\n        this.uvArray = new Float32Array([ 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0 ])\r\n        \r\n        // 创建 UV 缓冲区\r\n        this.uvBuffer = gl.createBuffer()\r\n      }\r\n      \r\n      // 顶点缓冲区，坐标初始化\r\n      {\r\n        const maxWidth = LAppDelegate.canvas.width\r\n        const maxHeight = LAppDelegate.canvas.height\r\n        \r\n        // 顶点数据\r\n        this.positionArray = new Float32Array([\r\n          (this.rect.right - maxWidth * 0.5) / (maxWidth * 0.5),\r\n          (this.rect.up - maxHeight * 0.5) / (maxHeight * 0.5),\r\n          (this.rect.left - maxWidth * 0.5) / (maxWidth * 0.5),\r\n          (this.rect.up - maxHeight * 0.5) / (maxHeight * 0.5),\r\n          (this.rect.left - maxWidth * 0.5) / (maxWidth * 0.5),\r\n          (this.rect.down - maxHeight * 0.5) / (maxHeight * 0.5),\r\n          (this.rect.right - maxWidth * 0.5) / (maxWidth * 0.5),\r\n          (this.rect.down - maxHeight * 0.5) / (maxHeight * 0.5),\r\n        ])\r\n        \r\n        // 创建顶点缓冲区\r\n        this.vertexBuffer = gl.createBuffer()\r\n      }\r\n      \r\n      // 顶点索引缓冲区， 初始化\r\n      {\r\n        // 索引数据\r\n        this.indexArray = new Uint16Array([ 0, 1, 2, 3, 2, 0 ])\r\n        \r\n        // 创建索引缓冲区\r\n        this.indexBuffer = gl.createBuffer()\r\n      }\r\n      \r\n      this.firstDraw = false\r\n    }\r\n    \r\n    // UV坐标注册\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.uvBuffer)\r\n    gl.bufferData(gl.ARRAY_BUFFER, this.uvArray, gl.STATIC_DRAW)\r\n    \r\n    // attribute属性自注册\r\n    gl.vertexAttribPointer(this.uvLocation, 2, gl.FLOAT, false, 0, 0)\r\n    \r\n    // 顶点坐标自注册\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer)\r\n    gl.bufferData(gl.ARRAY_BUFFER, this.positionArray, gl.STATIC_DRAW)\r\n    \r\n    // attribute属性注册\r\n    gl.vertexAttribPointer(this.positionLocation, 2, gl.FLOAT, false, 0, 0)\r\n    \r\n    // 创建顶点索引\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer)\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indexArray, gl.DYNAMIC_DRAW)\r\n    \r\n    // 绘制模型\r\n    gl.bindTexture(gl.TEXTURE_2D, this.texture)\r\n    gl.drawElements(gl.TRIANGLES, this.indexArray.length, gl.UNSIGNED_SHORT, 0,)\r\n  }\r\n  \r\n  /**\r\n   * 当たり判定\r\n   * @param pointX x座標\r\n   * @param pointY y座標\r\n   */\r\n  public isHit(pointX: number, pointY: number): boolean {\r\n    // 获取屏幕尺寸。\r\n    const { height } = LAppDelegate.canvas\r\n    \r\n    // 需要转换 Y 坐标\r\n    const y = height - pointY\r\n    \r\n    return (\r\n      pointX >= this.rect.left &&\r\n      pointX <= this.rect.right &&\r\n      y <= this.rect.up &&\r\n      y >= this.rect.down\r\n    )\r\n  }\r\n}\r\n\r\nexport class Rect {\r\n  public left: number // 左辺\r\n  public right: number // 右辺\r\n  public up: number // 上辺\r\n  public down: number // 下辺\r\n}\r\n","export class TouchManager {\r\n  startY: number // 启动触摸时 x 的值\r\n  startX: number // 启动触摸时 y 的值\r\n  lastX: number // x 在单点触摸上的值\r\n  lastY: number // 单点触摸时的 Y 值\r\n  lastX1: number // 双点触控时第一个 x 的值\r\n  lastY1: number // 双点触摸时第一个 y 的值\r\n  lastX2: number // 双点触控上第二个 x 的值\r\n  lastY2: number // 双击时的第二个 y 值\r\n  lastTouchDistance: number // 两个或多个手指之间的距离\r\n  deltaX: number // x 从上一个值到当前值的距离。\r\n  deltaY: number // 距离 y 已从上一个值移动到当前值。\r\n  scale: number // 在此帧中要乘以的放大倍率。 1 放大操作期间除外。\r\n  touchSingle: boolean // 适用于单点触控\r\n  flipAvailable: boolean // 是否启用翻转\r\n  \r\n  /**\r\n   * 构造 函数\r\n   */\r\n  constructor() {\r\n    this.startX = 0.0\r\n    this.startY = 0.0\r\n    this.lastX = 0.0\r\n    this.lastY = 0.0\r\n    this.lastX1 = 0.0\r\n    this.lastY1 = 0.0\r\n    this.lastX2 = 0.0\r\n    this.lastY2 = 0.0\r\n    this.lastTouchDistance = 0.0\r\n    this.deltaX = 0.0\r\n    this.deltaY = 0.0\r\n    this.scale = 1.0\r\n    this.touchSingle = false\r\n    this.flipAvailable = false\r\n  }\r\n  \r\n  public getCenterX(): number {\r\n    return this.lastX\r\n  }\r\n  \r\n  public getCenterY(): number {\r\n    return this.lastY\r\n  }\r\n  \r\n  public getDeltaX(): number {\r\n    return this.deltaX\r\n  }\r\n  \r\n  public getDeltaY(): number {\r\n    return this.deltaY\r\n  }\r\n  \r\n  public getStartX(): number {\r\n    return this.startX\r\n  }\r\n  \r\n  public getStartY(): number {\r\n    return this.startY\r\n  }\r\n  \r\n  public getScale(): number {\r\n    return this.scale\r\n  }\r\n  \r\n  public getX(): number {\r\n    return this.lastX\r\n  }\r\n  \r\n  public getY(): number {\r\n    return this.lastY\r\n  }\r\n  \r\n  public getX1(): number {\r\n    return this.lastX1\r\n  }\r\n  \r\n  public getY1(): number {\r\n    return this.lastY1\r\n  }\r\n  \r\n  public getX2(): number {\r\n    return this.lastX2\r\n  }\r\n  \r\n  public getY2(): number {\r\n    return this.lastY2\r\n  }\r\n  \r\n  public isSingleTouch(): boolean {\r\n    return this.touchSingle\r\n  }\r\n  \r\n  public isFlickAvailable(): boolean {\r\n    return this.flipAvailable\r\n  }\r\n  \r\n  public disableFlick(): void {\r\n    this.flipAvailable = false\r\n  }\r\n  \r\n  /**\r\n   * 触摸启动事件\r\n   * @param deviceX 您触摸的屏幕上 x 的值\r\n   * @param deviceY 您触摸的屏幕上 y 的值\r\n   */\r\n  public touchesBegan(deviceX: number, deviceY: number): void {\r\n    this.lastX = deviceX\r\n    this.lastY = deviceY\r\n    this.startX = deviceX\r\n    this.startY = deviceY\r\n    this.lastTouchDistance = -1.0\r\n    this.flipAvailable = true\r\n    this.touchSingle = true\r\n  }\r\n  \r\n  /**\r\n   * 拖动事件\r\n   * @param deviceX 您触摸的屏幕上 x 的值\r\n   * @param deviceY 您触摸的屏幕上 y 的值\r\n   */\r\n  public touchesMoved(deviceX: number, deviceY: number): void {\r\n    this.lastX = deviceX\r\n    this.lastY = deviceY\r\n    this.lastTouchDistance = -1.0\r\n    this.touchSingle = true\r\n  }\r\n  \r\n  /**\r\n   * 轻拂距离测量\r\n   * @return 轻拂距离\r\n   */\r\n  public getFlickDistance(): number {\r\n    return this.calculateDistance(\r\n      this.startX,\r\n      this.startY,\r\n      this.lastX,\r\n      this.lastY,\r\n    )\r\n  }\r\n  \r\n  /**\r\n   * 求从点 1 到点 2 的距离\r\n   *\r\n   * @param x1 第一个触摸屏幕上的 x 值\r\n   * @param y1 第一个触摸屏幕上 y 值\r\n   * @param x2 第二个触摸屏上的 x 值\r\n   * @param y2 第二个触摸屏上的 y 值\r\n   */\r\n  public calculateDistance(\r\n    x1: number,\r\n    y1: number,\r\n    x2: number,\r\n    y2: number,\r\n  ): number {\r\n    return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2))\r\n  }\r\n  \r\n  /**\r\n   * 从第两个值中，找到移动量。\r\n   * 如果方向不同，则移动量为 0。 在同一方向上，参考具有较低绝对值的值。\r\n   *\r\n   * @param v1 第一次移动量\r\n   * @param v2 第二次移动量\r\n   *\r\n   * @return 更小移动量\r\n   */\r\n  public calculateMovingAmount(v1: number, v2: number): number {\r\n    if (v1 > 0.0 != v2 > 0.0) {\r\n      return 0.0\r\n    }\r\n    \r\n    const sign: number = v1 > 0.0 ? 1.0 : -1.0\r\n    const absoluteValue1 = Math.abs(v1)\r\n    const absoluteValue2 = Math.abs(v2)\r\n    return (\r\n      sign * (absoluteValue1 < absoluteValue2 ? absoluteValue1 : absoluteValue2)\r\n    )\r\n  }\r\n}\r\n","import { CubismMatrix44 } from '@framework/math/cubismmatrix44'\r\nimport { CubismViewMatrix } from '@framework/math/cubismviewmatrix'\r\nimport LAppDefine, { ViewLogical, ViewLogicalMax, ViewScale } from './lappdefine'\r\nimport { LAppDelegate } from './lappdelegate'\r\nimport { LAppLive2DManager } from './lapplive2dmanager'\r\nimport { LAppPal } from './lapppal'\r\nimport { LAppSprite } from './lappsprite'\r\nimport { TextureInfo } from './lapptexturemanager'\r\nimport { TouchManager } from './touchmanager'\r\n\r\n/**\r\n * 绘图类。\r\n */\r\nexport class LAppView {\r\n  private readonly touchManager: TouchManager // 触摸管理器\r\n  private readonly deviceToScreen: CubismMatrix44 // 设备到屏幕矩阵\r\n  private readonly viewMatrix: CubismViewMatrix // viewMatrix\r\n  private readonly sprites: LAppSprite[] = [] // 纹理对象\r\n  private programId?: WebGLProgram // 着色器标识\r\n  public released: boolean = false // 是否已释放\r\n  \r\n  /**\r\n   * 构造 函数\r\n   */\r\n  constructor() {\r\n    this.programId = null\r\n    this.released = false\r\n    \r\n    // 触摸相关事件管理\r\n    this.touchManager = new TouchManager()\r\n    \r\n    // 用于从设备坐标转换为屏幕坐标\r\n    this.deviceToScreen = new CubismMatrix44()\r\n    \r\n    // 缩放和转换屏幕显示移动的矩阵\r\n    this.viewMatrix = new CubismViewMatrix()\r\n  }\r\n  \r\n  /**\r\n   * 初始化。\r\n   */\r\n  public initialize(): void {\r\n    const { width, height } = LAppDelegate.canvas\r\n    \r\n    const ratio: number = width / height\r\n    const left: number = -ratio ?? ViewLogical.Left\r\n    const right: number = ratio ?? ViewLogical.Right\r\n    const bottom: number = ViewLogical.Bottom\r\n    const top: number = ViewLogical.Top\r\n    \r\n    // 与设备相对应的屏幕范围。X左端、X右端、Y下端、Y上端\r\n    this.viewMatrix.setScreenRect(left, right, bottom, top)\r\n    this.viewMatrix.scale(LAppDefine.scale, LAppDefine.scale)\r\n    \r\n    this.deviceToScreen.loadIdentity()\r\n    if (width > height) {\r\n      const screenW: number = Math.abs(right - left)\r\n      this.deviceToScreen.scaleRelative(screenW / width, -screenW / width)\r\n    } else {\r\n      const screenH: number = Math.abs(top - bottom)\r\n      this.deviceToScreen.scaleRelative(screenH / height, -screenH / height)\r\n    }\r\n    this.deviceToScreen.translateRelative(-width * 0.5, -height * 0.5)\r\n    \r\n    // 设置显示范围\r\n    this.viewMatrix.setMaxScale(ViewScale.Max) // 边际扩张率\r\n    this.viewMatrix.setMinScale(ViewScale.Min) // 边际减量率\r\n    \r\n    // 可显示的最大范围\r\n    this.viewMatrix.setMaxScreenRect(\r\n      ViewLogicalMax.Left,\r\n      ViewLogicalMax.Right,\r\n      ViewLogicalMax.Bottom,\r\n      ViewLogicalMax.Top,\r\n    )\r\n  }\r\n  \r\n  /**\r\n   * 释放资源\r\n   */\r\n  public release(): void {\r\n    this.sprites.forEach(s => s.release())\r\n    this.sprites.length = 0\r\n    \r\n    LAppDelegate.gl.deleteProgram(this.programId)\r\n    this.released = true\r\n  }\r\n  \r\n  /**\r\n   * 渲染。\r\n   */\r\n  public render(): void {\r\n    const gl = LAppDelegate.gl\r\n    gl.useProgram(this.programId)\r\n    \r\n    this.sprites.forEach(s => s.render(this.programId))\r\n    \r\n    gl.flush()\r\n    \r\n    LAppLive2DManager.instance.setViewMatrix(this.viewMatrix)\r\n    LAppLive2DManager.instance.onUpdate()\r\n  }\r\n  \r\n  public addSprite(\r\n    imgPath: string,\r\n    position?: { x: number, y: number },\r\n    size?: { width: number, height: number },\r\n    hitCallback?: () => void,\r\n  ) {\r\n    // 齿轮图像初始化\r\n    LAppDelegate.instance.textureManager.createTextureFromPngFile(\r\n      imgPath,\r\n      false,\r\n      (textureInfo: TextureInfo): void => {\r\n        const { width, height } = LAppDelegate.canvas\r\n        const x: number = position ? position.x : width - textureInfo.width * 0.5\r\n        const y: number = position ? position.y : height - textureInfo.height * 0.5\r\n        \r\n        const fWidth: number = size? size.width : textureInfo.width\r\n        const fHeight: number = size? size.height : textureInfo.height\r\n        \r\n        const sprite = new LAppSprite(x, y, fWidth, fHeight, textureInfo.id, hitCallback)\r\n        \r\n        this.sprites.push(sprite)\r\n      },\r\n    )\r\n  }\r\n  \r\n  /**\r\n   * 初始化映像。\r\n   */\r\n  public initializeSprite(): void {\r\n    // 创建着色器\r\n    this.programId = LAppDelegate.instance.createShader()\r\n  }\r\n  \r\n  /**\r\n   * 触摸时调用。\r\n   *\r\n   * @param pointX 屏幕 X 坐标\r\n   * @param pointY 屏幕 Y 坐标\r\n   */\r\n  public onTouchesBegan(pointX: number, pointY: number): void {\r\n    this.touchManager.touchesBegan(pointX, pointY)\r\n  }\r\n  \r\n  /**\r\n   * 当指针在触摸时移动时调用。\r\n   *\r\n   * @param pointX 屏幕 X 坐标\r\n   * @param pointY 屏幕 Y 坐标\r\n   */\r\n  public onTouchesMoved(pointX: number, pointY: number): void {\r\n    const viewX: number = this.transformViewX(this.touchManager.getX())\r\n    const viewY: number = this.transformViewY(this.touchManager.getY())\r\n    \r\n    this.touchManager.touchesMoved(pointX, pointY)\r\n    \r\n    LAppLive2DManager.instance.onDrag(viewX, viewY)\r\n  }\r\n  \r\n  /**\r\n   * 触摸完成后调用。\r\n   *\r\n   * @param pointX 屏幕 X 坐标\r\n   * @param pointY 屏幕 Y 坐标\r\n   */\r\n  public onTouchesEnded(pointX: number, pointY: number): void {\r\n    // 触摸退出\r\n    LAppLive2DManager.instance.onDrag(0.0, 0.0)\r\n    \r\n    {\r\n      // 单击键\r\n      const x: number = this.deviceToScreen.transformX(this.touchManager.getX()) // 获取由逻辑坐标转换的坐标。\r\n      const y: number = this.deviceToScreen.transformY(this.touchManager.getY()) // 逻辑坐标获取更改的坐标。\r\n      \r\n      if ('ontouchend' in LAppDelegate.canvas) {\r\n        LAppPal.printMessage(`[APP]touchesEnded x: ${ x } y: ${ y }`)\r\n      }\r\n      LAppLive2DManager.instance.onTap(x, y)\r\n      \r\n      // 你点击了吗？\r\n      this.sprites.forEach(s => {\r\n        if (s.isHit(pointX, pointY)) {\r\n          s.hitCallback()\r\n        }\r\n      })\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 将 X 坐标转换为视图坐标。\r\n   *\r\n   * @param deviceX 设备 X 坐标\r\n   */\r\n  public transformViewX(deviceX: number): number {\r\n    const screenX: number = this.deviceToScreen.transformX(deviceX) // 論理座標変換した座標を取得。\r\n    return this.viewMatrix.invertTransformX(screenX) // 拡大、縮小、移動後の値。\r\n  }\r\n  \r\n  /**\r\n   * 将 Y 坐标转换为查看坐标。\r\n   *\r\n   * @param deviceY 设备 Y 坐标\r\n   */\r\n  public transformViewY(deviceY: number): number {\r\n    const screenY: number = this.deviceToScreen.transformY(deviceY) // 論理座標変換した座標を取得。\r\n    return this.viewMatrix.invertTransformY(screenY)\r\n  }\r\n  \r\n  /**\r\n   * 将 X 坐标转换为屏幕坐标。\r\n   *\r\n   * @param deviceX 设备 X 坐标\r\n   */\r\n  public transformScreenX(deviceX: number): number {\r\n    return this.deviceToScreen.transformX(deviceX)\r\n  }\r\n  \r\n  /**\r\n   * 将 Y 坐标转换为屏幕坐标。\r\n   *\r\n   * @param deviceY 设备 Y 坐标\r\n   */\r\n  public transformScreenY(deviceY: number): number {\r\n    return this.deviceToScreen.transformY(deviceY)\r\n  }\r\n}\r\n","import { CubismFramework, LogLevel, Option } from '@framework/live2dcubismframework'\r\n\r\nimport LAppDefine, { doc } from './lappdefine'\r\nimport { LAppLive2DManager } from './lapplive2dmanager'\r\nimport { LAppPal } from './lapppal'\r\nimport { LAppTextureManager } from './lapptexturemanager'\r\nimport { LAppView } from './lappview'\r\n\r\n/**\r\n * 应用程序类。\r\n * Cubism SDK管理\r\n */\r\nexport class LAppDelegate {\r\n  private readonly cubismOption: Option // Cubism SDK Option\r\n  public readonly view: LAppView // View信息\r\n  public captured: boolean // 是否单击\r\n  public readonly textureManager: LAppTextureManager // 纹理管理器\r\n  private static _instance: LAppDelegate = null\r\n  public static frameBuffer: WebGLFramebuffer = null\r\n  public static canvas: HTMLCanvasElement = null\r\n  public static gl: WebGLRenderingContext = null\r\n  private readonly canvasId: string = 'live2d-canvas'\r\n  private loopId: number = 0\r\n  \r\n  /**\r\n   * 获取一个类的实例。\r\n   * 如果未生成实例，则在内部生成实例。\r\n   * @return 类实例\r\n   */\r\n  static get instance(): LAppDelegate {\r\n    if (this._instance == null) {\r\n      this._instance = new LAppDelegate()\r\n    }\r\n    \r\n    return this._instance\r\n  }\r\n  \r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.captured = false\r\n    \r\n    this.cubismOption = new Option()\r\n    this.view = new LAppView()\r\n    this.textureManager = new LAppTextureManager()\r\n  }\r\n  \r\n  /**\r\n   * 释放一个类的实例（单个）。\r\n   */\r\n  public static releaseInstance(): void {\r\n    if (this._instance != null) {\r\n      this._instance.release()\r\n    }\r\n    \r\n    this._instance = null\r\n  }\r\n  \r\n  /**\r\n   * 初始化APP所需的东西。\r\n   */\r\n  public initialize(): boolean {\r\n    // 创建画布\r\n    const canvas = LAppDelegate.canvas = this.getCanvas()\r\n    \r\n    // 初始化gl上下文\r\n    const gl = LAppDelegate.gl = canvas.getContext('webgl') || (canvas.getContext('experimental-webgl') as WebGLRenderingContext)\r\n    \r\n    if (!gl) {\r\n      alert('Cannot initialize WebGL. This browser does not support.')\r\n      LAppDelegate.gl = null\r\n      \r\n      doc.body.innerHTML = 'This browser does not support the <code>&lt;canvas&gt;</code> element.'\r\n      \r\n      // gl 初始化失败\r\n      return false\r\n    }\r\n    \r\n    if (!LAppDelegate.frameBuffer) {\r\n      LAppDelegate.frameBuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING)\r\n    }\r\n    \r\n    // 透明设置\r\n    gl.enable(gl.BLEND)\r\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\r\n    \r\n    // 事件绑定\r\n    this.onEvent()\r\n    \r\n    // AppView 初始化\r\n    this.view.initialize()\r\n    \r\n    // Cubism SDK 初始化\r\n    this.initializeCubism()\r\n    \r\n    return true\r\n  }\r\n  \r\n  public getCanvas() {\r\n    let canvas = doc.querySelector<HTMLCanvasElement>(`#${ this.canvasId }`)\r\n    \r\n    if (!canvas) {\r\n      canvas = doc.createElement('canvas')\r\n      canvas.setAttribute('id', this.canvasId)\r\n    } else {\r\n      this.release()\r\n    }\r\n    \r\n    if (LAppDefine.canvas === 'auto') {\r\n      this._resizeCanvas()\r\n    } else {\r\n      canvas.width = LAppDefine.canvas.width || canvas.width\r\n      canvas.height = LAppDefine.canvas.height || canvas.height\r\n    }\r\n    // 将画布添加到 DOM\r\n    LAppDefine.target.appendChild(canvas)\r\n    \r\n    return canvas\r\n  }\r\n  \r\n  // 鼠标和触摸事件注册\r\n  private onEvent() {\r\n    const canvas = LAppDelegate.canvas\r\n    const supportTouch: boolean = 'ontouchend' in canvas\r\n    \r\n    if (supportTouch) {\r\n      canvas.ontouchstart = onTouchBegan\r\n      canvas.ontouchmove = onTouchMoved\r\n      canvas.ontouchend = onTouchEnded\r\n      canvas.ontouchcancel = onTouchEnded\r\n    } else {\r\n      canvas.onmousedown = onClickBegan\r\n      canvas.onmousemove = onMouseMoved\r\n      canvas.onmouseup = onClickEnded\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 调整画布大小并重新初始化视图。\r\n   */\r\n  public onResize(): void {\r\n    this._resizeCanvas()\r\n    this.view.initialize()\r\n    this.view.initializeSprite()\r\n    \r\n    // 传递画布大小\r\n    const { width, height } = LAppDelegate.canvas\r\n    LAppDelegate.gl.viewport(0, 0, width, height)\r\n  }\r\n  \r\n  /**\r\n   * 释放资源。\r\n   */\r\n  public release(): void {\r\n    this.textureManager.release()\r\n    this.view.release()\r\n    cancelAnimationFrame(this.loopId)\r\n    \r\n    // 释放资源\r\n    LAppLive2DManager.releaseInstance()\r\n    // 释放 Cubism SDK\r\n    CubismFramework.dispose()\r\n  }\r\n  \r\n  /**\r\n   * 执行处理。\r\n   */\r\n  public run(): void {\r\n    // 主循环\r\n    const loop = (): void => {\r\n      // 检查实例是否存在\r\n      if (!LAppDelegate.instance) {\r\n        return\r\n      }\r\n      \r\n      // 更新时间\r\n      LAppPal.updateTime()\r\n      \r\n      const gl = LAppDelegate.gl\r\n      // 屏幕初始化\r\n      gl.clearColor(0.0, 0.0, 0.0, 0)\r\n      \r\n      // 启用深度测试\r\n      gl.enable(gl.DEPTH_TEST)\r\n      \r\n      // 附近的物体 远处的模糊物体\r\n      gl.depthFunc(gl.LEQUAL)\r\n      \r\n      // 清除颜色和深度缓冲区\r\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n      \r\n      gl.clearDepth(1.0)\r\n      \r\n      // 透过设定\r\n      gl.enable(gl.BLEND)\r\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\r\n      \r\n      // 图形更新\r\n      this.view.render()\r\n      \r\n      // 循环的递归调用\r\n      this.loopId = requestAnimationFrame(loop)\r\n    }\r\n    loop()\r\n  }\r\n  \r\n  /**\r\n   * 注册着色器。\r\n   */\r\n  public createShader(): WebGLProgram {\r\n    const gl = LAppDelegate.gl\r\n    \r\n    // 编译顶点着色器\r\n    const vertexShaderId = gl.createShader(gl.VERTEX_SHADER)\r\n    \r\n    if (vertexShaderId === null) {\r\n      LAppPal.printMessage('failed to create vertexShader')\r\n      return null\r\n    }\r\n    \r\n    const vertexShader: string =\r\n      `\r\n        precision mediump float;\r\n        attribute vec3 position;\r\n        attribute vec2 uv;\r\n        varying vec2 vuv;\r\n        void main(void)\r\n        {\r\n           gl_Position = vec4(position, 1.0);\r\n           vuv = uv;\r\n        }\r\n      `\r\n    \r\n    gl.shaderSource(vertexShaderId, vertexShader)\r\n    gl.compileShader(vertexShaderId)\r\n    \r\n    // 编译片段着色器\r\n    const fragmentShaderId = gl.createShader(gl.FRAGMENT_SHADER)\r\n    \r\n    if (fragmentShaderId == null) {\r\n      LAppPal.printMessage('failed to create fragmentShader')\r\n      return null\r\n    }\r\n    \r\n    const fragmentShader: string =\r\n      `\r\n        precision mediump float;\r\n        varying vec2 vuv;\r\n        uniform sampler2D texture;\r\n        void main(void)\r\n        {\r\n           gl_FragColor = texture2D(texture, vuv);\r\n        }\r\n      `\r\n    \r\n    gl.shaderSource(fragmentShaderId, fragmentShader)\r\n    gl.compileShader(fragmentShaderId)\r\n    \r\n    // 创建程序对象\r\n    const programId = gl.createProgram()\r\n    gl.attachShader(programId, vertexShaderId)\r\n    gl.attachShader(programId, fragmentShaderId)\r\n    \r\n    gl.deleteShader(vertexShaderId)\r\n    gl.deleteShader(fragmentShaderId)\r\n    \r\n    // 链接\r\n    gl.linkProgram(programId)\r\n    \r\n    gl.useProgram(programId)\r\n    \r\n    return programId\r\n  }\r\n  \r\n  /**\r\n   * 初始化 Cubism SDK\r\n   */\r\n  public initializeCubism(): void {\r\n    // setup cubism\r\n    this.cubismOption.logFunction = LAppPal.printMessage\r\n    this.cubismOption.loggingLevel = LogLevel.LogLevel_Error\r\n    CubismFramework.startUp(this.cubismOption)\r\n    \r\n    // initialize cubism\r\n    CubismFramework.initialize()\r\n    \r\n    // load model\r\n    LAppLive2DManager.initialize()\r\n    \r\n    LAppPal.updateTime()\r\n    \r\n    this.view.initializeSprite()\r\n  }\r\n  \r\n  /**\r\n   * 调整画布大小以填充屏幕。\r\n   */\r\n  private _resizeCanvas(): void {\r\n    LAppDelegate.canvas.width = window.innerWidth\r\n    LAppDelegate.canvas.height = window.innerHeight\r\n  }\r\n}\r\n\r\n/**\r\n * 点击开始时\r\n */\r\nfunction onClickBegan(e: MouseEvent): void {\r\n  LAppDelegate.instance.captured = true\r\n  \r\n  if (LAppDelegate.instance.view.released) {\r\n    LAppPal.printMessage('view released')\r\n    return\r\n  }\r\n  \r\n  const rect = (e.target as Element).getBoundingClientRect()\r\n  const posX: number = e.pageX - rect.left\r\n  const posY: number = e.pageY - rect.top\r\n  \r\n  LAppDelegate.instance.view.onTouchesBegan(posX, posY)\r\n}\r\n\r\n/**\r\n * 当鼠标指针移动时\r\n */\r\nfunction onMouseMoved(e: MouseEvent): void {\r\n  if (!LAppDelegate.instance.captured) {\r\n    return\r\n  }\r\n  \r\n  if (LAppDelegate.instance.view.released) {\r\n    LAppPal.printMessage('view released')\r\n    return\r\n  }\r\n  \r\n  const rect = (e.target as Element).getBoundingClientRect()\r\n  const posX: number = e.clientX - rect.left\r\n  const posY: number = e.clientY - rect.top\r\n  \r\n  LAppDelegate.instance.view.onTouchesMoved(posX, posY)\r\n}\r\n\r\n/**\r\n * 点击结束时\r\n */\r\nfunction onClickEnded(e: MouseEvent): void {\r\n  LAppDelegate.instance.captured = false\r\n  \r\n  if (LAppDelegate.instance.view.released) {\r\n    LAppPal.printMessage('view released')\r\n    return\r\n  }\r\n  \r\n  const rect = (e.target as Element).getBoundingClientRect()\r\n  const posX: number = e.clientX - rect.left\r\n  const posY: number = e.clientY - rect.top\r\n  \r\n  LAppDelegate.instance.view.onTouchesEnded(posX, posY)\r\n}\r\n\r\n/**\r\n * 触摸开始时\r\n */\r\nfunction onTouchBegan(e: TouchEvent): void {\r\n  LAppDelegate.instance.captured = true\r\n  \r\n  if (LAppDelegate.instance.view.released) {\r\n    LAppPal.printMessage('view released')\r\n    return\r\n  }\r\n  \r\n  const rect = (e.target as Element).getBoundingClientRect()\r\n  const posX: number = e.changedTouches[0].clientX - rect.left\r\n  const posY: number = e.changedTouches[0].clientY - rect.top\r\n  \r\n  LAppDelegate.instance.view.onTouchesBegan(posX, posY)\r\n}\r\n\r\n/**\r\n * 当触摸移动时\r\n */\r\nfunction onTouchMoved(e: TouchEvent): void {\r\n  if (!LAppDelegate.instance.captured) {\r\n    return\r\n  }\r\n  \r\n  if (LAppDelegate.instance.view.released) {\r\n    LAppPal.printMessage('view released')\r\n    return\r\n  }\r\n  \r\n  const rect = (e.target as Element).getBoundingClientRect()\r\n  \r\n  const posX = e.changedTouches[0].clientX - rect.left\r\n  const posY = e.changedTouches[0].clientY - rect.top\r\n  \r\n  LAppDelegate.instance.view.onTouchesMoved(posX, posY)\r\n}\r\n\r\n/**\r\n * 触摸结束时\r\n * 触摸取消时\r\n */\r\nfunction onTouchEnded(e: TouchEvent): void {\r\n  LAppDelegate.instance.captured = false\r\n  \r\n  if (LAppDelegate.instance.view.released) {\r\n    LAppPal.printMessage('view released')\r\n    return\r\n  }\r\n  \r\n  const rect = (e.target as Element).getBoundingClientRect()\r\n  \r\n  const posX = e.changedTouches[0].clientX - rect.left\r\n  const posY = e.changedTouches[0].clientY - rect.top\r\n  \r\n  LAppDelegate.instance.view.onTouchesEnded(posX, posY)\r\n}\r\n","import LAppDefine, { doc, HitArea, LAppDefineOptions, setDefaults } from './lappdefine'\r\nimport { LAppDelegate } from './lappdelegate'\r\nimport { LAppLive2DManager } from './lapplive2dmanager'\r\n\r\nexport type { LAppDefineOptions } from './lappdefine'\r\nexport { HitArea } from './lappdefine'\r\n\r\nexport class Live2dWidgetBase {\r\n  protected static eventListener = {\r\n    [HitArea.Head]: [],\r\n    [HitArea.Body]: [],\r\n    [HitArea.Left]: [],\r\n    [HitArea.Right]: [],\r\n    [HitArea.Other]: [],\r\n  }\r\n  \r\n  static get model() {\r\n    return LAppDelegate.instance\r\n  }\r\n  \r\n  static get scene() {\r\n    return LAppLive2DManager.instance\r\n  }\r\n  \r\n  static get view() {\r\n    return this.model.view\r\n  }\r\n  \r\n  static async init(options: LAppDefineOptions) {\r\n    setDefaults(options)\r\n    \r\n    const init = this.model.initialize()\r\n    if (!init) return\r\n    \r\n    this.model.run()\r\n    \r\n    this.listener()\r\n  }\r\n  \r\n  static async release() {\r\n    return this.model.release()\r\n  }\r\n  \r\n  protected static listener() {\r\n    window.addEventListener('beforeunload', () => this.model.release())\r\n    window.addEventListener('resize', () => (LAppDefine.canvas === 'auto') && this.model.onResize())\r\n  }\r\n  \r\n  static on(type: HitArea, callback: () => void) {\r\n    this.eventListener[type]?.push(callback)\r\n  }\r\n  \r\n  static emit(type: string) {\r\n    this.eventListener[type]?.forEach((callback: () => void) => callback())\r\n  }\r\n}\r\n\r\n\r\nexport class Live2dWidget extends Live2dWidgetBase {\r\n  static async loadScript() {\r\n    return new Promise((resolve) => {\r\n      if (globalThis.Live2DCubismCore) resolve(globalThis.Live2DCubismCore)\r\n      \r\n      const script = doc.createElement('script')\r\n      script.src = LAppDefine.cubismCorePath\r\n      doc.body.appendChild(script)\r\n      script.onload = () => resolve(globalThis.Live2DCubismCore)\r\n    })\r\n  }\r\n  \r\n  static override async init(options: LAppDefineOptions) {\r\n    await this.loadScript()\r\n    \r\n    await Live2dWidgetBase.init(options)\r\n  }\r\n}\r\n\r\nexport default Live2dWidget\r\n","import { LAppDefineOptions, setDefaults } from './lappdefine'\r\nimport { Live2dWidgetBase } from './main'\r\n\r\nexport default class Live2dWidgetIife extends Live2dWidgetBase {\r\n  static async init(options: LAppDefineOptions) {\r\n    setDefaults(options)\r\n    \r\n    const init = this.model.initialize()\r\n    if (!init) return\r\n    \r\n    this.model.run()\r\n    \r\n    this.listener()\r\n  }\r\n}\r\n"],"names":["ViewScale","ViewLogical","ViewLogicalMax","MotionGroup","HitArea","Priority","Priority2","doc","LAppDefine","setDefaults","options","key","csmVector","initialCapacity","index","value","offset","ret","i","newSize","callPlacementNew","sub","position","begin","end","dstSi","srcSi","srcEi","addCount","addSize","ite","iterator","newVector","iterator$1","v","Live2DCubismFramework","$.csmVector","$.iterator","csmString","c","length","s","$.csmString","CubismId","id","$.CubismId","CubismIdManager","ids","result","$.CubismIdManager","CubismMatrix44","a","b","dst","n","j","k","tr","src","x","y","tr1","m","cloneMatrix","$.CubismMatrix44","CubismRenderer","renderer","model","matrix44","red","green","blue","alpha","enable","culling","high","CubismTextureColor","CubismBlendMode","$.CubismBlendMode","$.CubismRenderer","$.CubismTextureColor","CubismLogPrint","level","fmt","args","CubismDebug","CubismLogPrintIn","CSM_ASSERT","expr","CubismLogDebug","CubismLogInfo","CubismLogWarning","CubismLogError","LogLevel","logLevel","format","CubismFramework","logPrint","buffer","data","$.CubismDebug","csmPair","csmMap","size","found","fitToSize","idx","iteold","$.csmMap","$.csmPair","CubismJsonExtension","obj","map","JsonBoolean","JsonString","JsonFloat","JsonMap","JsonNullvalue","arr","JsonArray","convKey","CSM_JSON_ERROR_TYPE_MISMATCH","CSM_JSON_ERROR_INDEX_OF_BOUNDS","Value$2","Value","defaultValue","indent","errorStr","JsonError","CubismJson","json","instance","uint8Array","str","len","parseCallback","endPos","decodeBuffer","strbuf","outEndPos","o","f","afterString","strtod","string","c2","bufStart","localRetEndPos2","ok","FOR_LOOP","FOR_LOOP2","FOR_LOOP3","localRetEndpos2","isStatic","stringBuffer","iter","$.CubismJson","$.JsonArray","$.JsonBoolean","$.JsonError","$.JsonFloat","$.JsonMap","$.JsonNullvalue","$.JsonString","$.Value","endPtr","testC","test","number","d","s_isStarted","s_isInitialized","s_option","s_cubismIdManager","Constant","csmDelete","address","option","Live2DCubismCore","version","major","minor","patch","versionNumber","memorySize","message","Option","LogLevel2","$.Constant","$.csmDelete","$.CubismFramework","CubismDefaultParameterId","$.CubismDefaultParameterId","ICubismModelSetting","$.ICubismModelSetting","FileReferences","Groups","Layout","HitAreas","Moc","Textures","Physics","Pose","Expressions","Motions","UserData","Name","FilePath","Id","Ids","SoundPath","FadeInTime","FadeOutTime","LipSync","EyeBlink","CubismModelSettingJson","pathArray","arrayLength","textureDirectoryStr","groupName","outLayoutMap","num","refI","node","$.CubismModelSettingJson","CubismBreath","breathParameters","deltaTimeSeconds","t","BreathParameterData","parameterId","peak","cycle","weight","$.BreathParameterData","$.CubismBreath","CubismEyeBlink","modelSetting","eyeBlink","blinkingInterval","closing","closed","opening","parameterIds","parameterValue","r","EyeState","EyeState2","$.CubismEyeBlink","$.EyeState","Epsilon","DefaultFadeInSeconds","FadeIn","Link","CubismPose","pose3json","root","poseListInfo","poseCount","poseIndex","idListInfo","idCount","groupCount","groupIndex","partInfo","partData","PartData","linkListInfo","linkCount","linkIndex","linkPart","linkId","pose","beginIndex","partGroupCount","partsIndex","paramIndex","partIndex","opacity","linkPartIndex","visiblePartIndex","newOpacity","phi","backOpacityThreshold","a1","clonePartData","$.CubismPose","$.PartData","CubismModelMatrix","w","h","scaleX","scaleY","layout","keyWidth","keyHeight","keyX","keyY","keyCenterX","keyCenterY","keyTop","keyBottom","keyLeft","keyRight","$.CubismModelMatrix","CubismVector2","vector2","scalar","rhs","$.CubismVector2","CubismMath","min","max","cx","isNegativeNumber","left","right","degrees","radian","from","to","q1","q2","degree","totalAngle","ba","ca","da","p","p3","q","discriminant","center","threshold","mp3","mp33","cosphi","t1","root1","root2","root3","u1","sd","v1","$.CubismMath","FrameRate","CubismTargetPoint","maxV","deltaTimeWeight","frameToMaxSpeed","maxA","dx","dy","vx","vy","ax","ay","curV","$.CubismTargetPoint","ACubismMotion","motion","motionQueueEntry","userTimeSeconds","duration","fadeWeight","fadeIn","fadeOut","fadeInSeconds","fadeOutSeconds","offsetSeconds","beforeCheckTimeSeconds","motionTimeSeconds","onFinishedMotionHandler","$.ACubismMotion","ExpressionKeyFadeIn","ExpressionKeyFadeOut","ExpressionKeyParameters","ExpressionKeyId","ExpressionKeyValue","ExpressionKeyBlend","BlendValueAdd","BlendValueMultiply","BlendValueOverwrite","DefaultFadeTime","CubismExpressionMotion","expression","parameterCount","param","blendType","item","ExpressionParameter","parameter","ExpressionBlendType","$.CubismExpressionMotion","$.ExpressionBlendType","$.ExpressionParameter","CubismMotionCurveTarget","CubismMotionCurveTarget2","CubismMotionSegmentType","CubismMotionPoint","CubismMotionSegment","CubismMotionCurve","CubismMotionEvent","CubismMotionData","$.CubismMotionCurve","$.CubismMotionCurveTarget","$.CubismMotionData","$.CubismMotionEvent","$.CubismMotionPoint","$.CubismMotionSegment","$.CubismMotionSegmentType","Meta","Duration","Loop","AreBeziersRestricted","CurveCount","Fps","TotalSegmentCount","TotalPointCount","Curves","Target","Segments","UserDataCount","TotalUserDataSize","Time","CubismMotionJson","flagType","curveIndex","segmentIndex","userDataIndex","EvaluationOptionFlag","$.CubismMotionJson","EffectNameEyeBlink","EffectNameLipSync","TargetNameModel","TargetNameParameter","TargetNamePartOpacity","UseOldBeziersCurveMotion","lerpPoints","linearEvaluate","points","time","bezierEvaluate","p01","p12","p23","p012","p123","bezierEvaluateCardanoInterpretation","x1","x2","cx1","cx2","steppedEvaluate","inverseSteppedEvaluate","evaluateCurve","motionData","curve","target","totalSegmentCount","pointPosition","segment","CubismMotion","timeOffsetSeconds","lipSyncValue","eyeBlinkValue","MaxTargetSize","lipSyncFlags","eyeBlinkFlags","tmpFadeIn","tmpFadeOut","parameterIndex","curves","sourceValue","fin","fout","paramWeight","loop","loopFadeIn","eyeBlinkParameterIds","lipSyncParameterIds","motionJson","areBeziersRestructed","totalPointCount","curveCount","segmentPosition","userdatacount","u","$.CubismMotion","CubismMotionQueueEntry","newEndTimeSeconds","startTime","endTime","timeSeconds","checkSeconds","$.CubismMotionQueueEntry","CubismMotionQueueManager","autoDelete","InvalidMotionQueueEntryHandleValue","motionQueueEntryNumber","callback","customData","updated","firedList","$.CubismMotionQueueManager","$.InvalidMotionQueueEntryHandleValue","CubismMotionManager","val","priority","$.CubismMotionManager","CubismPhysicsTargetType","CubismPhysicsTargetType2","CubismPhysicsSource","CubismPhysicsSource2","PhysicsJsonEffectiveForces","CubismPhysicsParameter","CubismPhysicsNormalization","CubismPhysicsParticle","CubismPhysicsSubRig","CubismPhysicsInput","CubismPhysicsOutput","CubismPhysicsRig","$.CubismPhysicsInput","$.CubismPhysicsNormalization","$.CubismPhysicsOutput","$.CubismPhysicsParameter","$.CubismPhysicsParticle","$.CubismPhysicsRig","$.CubismPhysicsSource","$.CubismPhysicsSubRig","$.CubismPhysicsTargetType","$.PhysicsJsonEffectiveForces","Position","X","Y","Angle","Type","EffectiveForces","TotalInputCount","TotalOutputCount","PhysicsSettingCount","Gravity","Wind","VertexCount","PhysicsSettings","Normalization","Minimum","Maximum","Default","Reflect","Weight","Input","Source","Output","Scale","VertexIndex","Destination","Vertices","Mobility","Delay","Radius","Acceleration","CubismPhysicsJson","physicsSettingIndex","inputIndex","outputIndex","vertexIndex","$.CubismPhysicsJson","PhysicsTypeTagX","PhysicsTypeTagY","PhysicsTypeTagAngle","AirResistance","MaximumWeight","MovementThreshold","MaxDeltaTime","CubismPhysics","physics","physicsJson","particleIndex","getInputTranslationXFromNormalizedParameterValue","getInputTranslationYFromNormalizedParamterValue","getInputAngleFromNormalizedParameterValue","currentRigOutput","PhysicsOutput","previousRigOutput","getOutputTranslationX","getOutputScaleTranslationX","getOutputTranslationY","getOutputScaleTranslationY","getOutputAngle","getOutputScaleAngle","radAngle","outputValue","totalTranslation","currentSetting","currentInputs","currentOutputs","currentParticles","parameterValues","parameterMaximumValues","parameterMinimumValues","parameterDefaultValues","settingIndex","updateParticlesForStabilization","translation","destinationParameterIndex","outParameterCaches","updateOutputParameterValue","outParamIndex","physicsDeltaTime","inputWeight","updateParticles","outParameterValues","Options","strand","radius","sign","targetTranslation","targetAngle","parameterMinimumValue","parameterMaximumValue","parameterDefaultValue","normalizationPosition","normalizationAngle","isInverted","normalizeParameterValue","normalizaitionPosition","particles","parentGravity","getRangeValue","maxValue","minValue","getDefaultValue","translationScale","angleScale","strandCount","windDirection","thresholdValue","airResistance","totalRadian","delay","currentGravity","direction","velocity","force","newDirection","parameterValueMinimum","parameterValueMaximum","output","outputScale","parameterMinimum","parameterMaximum","parameterDefault","normalizedMinimum","normalizedMaximum","normalizedDefault","minNormValue","maxNormValue","middleNormValue","middleValue","paramValue","nLength","pLength","$.CubismPhysics","$.Options","csmRect","$.csmRect","ColorChannelCount","ClippingMaskMaxCountOnDefault","ClippingMaskMaxCountOnMultiRenderTexture","ShaderCount","s_instance","s_viewport","s_fbo","CubismClippingManager_WebGL","channelNo","CubismRenderTextureResource","gl","clippingContext","clippedDrawTotalMinX","clippedDrawTotalMinY","clippedDrawTotalMaxX","clippedDrawTotalMaxY","clippedDrawCount","clippedDrawableIndex","drawableIndex","drawableVertexCount","drawableVertexes","minX","minY","maxX","maxY","pi","tmp","drawableCount","drawableMasks","drawableMaskCounts","renderTextureCount","CubismClippingContext","usingClipCount","clipIndex","cc","clipContext","allClipedDrawRect","layoutBoundsOnTex01","MARGIN","clipContextRenderTexture","ppu","maskPixelSize","physicalMaskWidth","physicalMaskHeight","clipDrawCount","clipDrawIndex","count","sameCount","clipId","useClippingMaskMaxCount","layoutCountMaxValue","countPerSheetDiv","countPerSheetMod","div","mod","curClipIndex","renderTextureNo","layoutCount","checkChannelNo","xpos","ypos","frameNo","texture","manager","clippingDrawableIndices","clipCount","CubismRendererProfile_WebGL","enabled","CubismShader_WebGL","textureId","vertexCount","vertexArray","indexArray","uvArray","bufferData","colorBlendMode","baseColor","multiplyColor","screenColor","isPremultipliedAlpha","matrix4x4","invertedMask","SRC_COLOR","DST_COLOR","SRC_ALPHA","DST_ALPHA","shaderSet","colorChannel","rect","masked","CubismShaderSet","tex","vertexShaderSrcSetupMask","fragmentShaderSrcsetupMask","vertexShaderSrc","fragmentShaderSrcPremultipliedAlpha","vertexShaderSrcMasked","fragmentShaderSrcMaskPremultipliedAlpha","fragmentShaderSrcMaskInvertedPremultipliedAlpha","vertexShaderSource","fragmentShaderSource","shaderProgram","vertShader","fragShader","shaderType","shaderSource","source","shader","log","ShaderNames","ShaderNames2","CubismRenderer_WebGL","maskBufferCount","modelTextureNo","glTexture","renderOrder","order","textureNo","indexCount","modelColorRGBA","drawtexture","fbo","viewport","clip","$.CubismClippingContext","$.CubismClippingManager_WebGL","$.CubismRenderTextureResource","$.CubismRenderer_WebGL","$.CubismShaderSet","$.CubismShader_WebGL","$.ShaderNames","DrawableColorData","DrawableCullingData","isOverwritten","isCulling","CubismModel","savedParameterCount","color","g","drawableindex","constantFlags","isOverwrittenCullings","partId","partCount","drawableId","dynamicFlags","multiplyColors","screenColors","partIds","drawableIds","userCulling","$.CubismModel","CubismMoc","mocBytes","cubismMoc","moc","cubismModel","$.CubismMoc","CubismModelUserDataJson","$.CubismModelUserDataJson","ArtMesh","CubismModelUserDataNode","CubismModelUserData","modelUserData","typeOfArtMesh","nodeCount","addNode","$.CubismModelUserData","$.CubismModelUserDataNode","CubismUserModel","z","name","pointX","pointY","drawIndex","vertices","top","bottom","tx","ty","eventValue","caller","$.CubismUserModel","LAppPal","filePath","response","arrayBuffer","LAppWavFileHandler","WavFileInfo","ByteReader","goalOffset","rms","channelCount","sampleCount","pcm","asyncFileLoad","fmtChunkSize","dataChunkSize","samples","e","pcm32","reference","getSignature","referenceString","signatureOffset","LAppModel","idManager","dir","fileName","path","setting","modelFileName","loadCubismExpression","expressionName","expressionFileName","loadCubismPhysics","physicsFileName","loadCubismPose","poseFileName","setupEyeBlink","setupBreath","loadUserData","userDataFile","setupEyeBlinkIds","eyeBlinkIdCount","setupLipSyncIds","lipSyncIdCount","setupLayout","loadCubismMotion","group","motionGroupCount","textureCount","textureName","texturePath","onLoad","textureInfo","LAppDelegate","motionUpdated","normal","rightArm","leftArm","no","voice","motionFileName","srcPath","fadeTime","targetManage","expressionId","hitArenaName","drawId","tmpMotion","matrix","LAppLive2DManager","self","Live2dWidget","width","height","modelCount","projection","modelPath","modelJsonName","LAppTextureManager","usePremultiply","img","TextureInfo","CubismViewMatrix","cy","scale","maxScale","minScale","targetScale","tr2","tr3","$.CubismViewMatrix","LAppSprite","hitCallback","Rect","programId","maxWidth","maxHeight","TouchManager","deviceX","deviceY","y1","y2","v2","absoluteValue1","absoluteValue2","LAppView","ratio","screenW","screenH","imgPath","fWidth","fHeight","sprite","viewX","viewY","screenX","screenY","canvas","onTouchBegan","onTouchMoved","onTouchEnded","onClickBegan","onMouseMoved","onClickEnded","vertexShaderId","vertexShader","fragmentShaderId","fragmentShader","posX","posY","Live2dWidgetBase","type","resolve","script","Live2dWidget$1","Live2dWidgetIife"],"mappings":"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"}